
Uart_App.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000664  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000664  000006d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000710  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000074c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009be  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f1  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000069f  00000000  00000000  00001893  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000464  00000000  00000000  000020b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c2  00000000  00000000  00002514  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000027d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e6       	ldi	r30, 0x64	; 100
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <main>
  7a:	0c 94 30 03 	jmp	0x660	; 0x660 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_WritePin>:
	}
	
	return Get_Bit(Gpio->PIN,Local_Copyu8_Actuall_Pin);
	
	
}
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <DIO_WritePin+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <DIO_WritePin+0x8>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	8b 83       	std	Y+3, r24	; 0x03
  90:	6c 83       	std	Y+4, r22	; 0x04
  92:	1a 82       	std	Y+2, r1	; 0x02
  94:	19 82       	std	Y+1, r1	; 0x01
  96:	8b 81       	ldd	r24, Y+3	; 0x03
  98:	88 30       	cpi	r24, 0x08	; 8
  9a:	28 f4       	brcc	.+10     	; 0xa6 <DIO_WritePin+0x24>
  9c:	89 e3       	ldi	r24, 0x39	; 57
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	9a 83       	std	Y+2, r25	; 0x02
  a2:	89 83       	std	Y+1, r24	; 0x01
  a4:	20 c0       	rjmp	.+64     	; 0xe6 <DIO_WritePin+0x64>
  a6:	8b 81       	ldd	r24, Y+3	; 0x03
  a8:	80 31       	cpi	r24, 0x10	; 16
  aa:	40 f4       	brcc	.+16     	; 0xbc <DIO_WritePin+0x3a>
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	88 30       	cpi	r24, 0x08	; 8
  b0:	28 f0       	brcs	.+10     	; 0xbc <DIO_WritePin+0x3a>
  b2:	86 e3       	ldi	r24, 0x36	; 54
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	9a 83       	std	Y+2, r25	; 0x02
  b8:	89 83       	std	Y+1, r24	; 0x01
  ba:	15 c0       	rjmp	.+42     	; 0xe6 <DIO_WritePin+0x64>
  bc:	8b 81       	ldd	r24, Y+3	; 0x03
  be:	88 31       	cpi	r24, 0x18	; 24
  c0:	40 f4       	brcc	.+16     	; 0xd2 <DIO_WritePin+0x50>
  c2:	8b 81       	ldd	r24, Y+3	; 0x03
  c4:	80 31       	cpi	r24, 0x10	; 16
  c6:	28 f0       	brcs	.+10     	; 0xd2 <DIO_WritePin+0x50>
  c8:	83 e3       	ldi	r24, 0x33	; 51
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	9a 83       	std	Y+2, r25	; 0x02
  ce:	89 83       	std	Y+1, r24	; 0x01
  d0:	0a c0       	rjmp	.+20     	; 0xe6 <DIO_WritePin+0x64>
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	80 32       	cpi	r24, 0x20	; 32
  d6:	38 f4       	brcc	.+14     	; 0xe6 <DIO_WritePin+0x64>
  d8:	8b 81       	ldd	r24, Y+3	; 0x03
  da:	88 31       	cpi	r24, 0x18	; 24
  dc:	20 f0       	brcs	.+8      	; 0xe6 <DIO_WritePin+0x64>
  de:	80 e3       	ldi	r24, 0x30	; 48
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	9a 83       	std	Y+2, r25	; 0x02
  e4:	89 83       	std	Y+1, r24	; 0x01
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	4b 81       	ldd	r20, Y+3	; 0x03
  ec:	6c 81       	ldd	r22, Y+4	; 0x04
  ee:	0e 94 81 00 	call	0x102	; 0x102 <Apply>
  f2:	00 00       	nop
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <Apply>:
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	00 d0       	rcall	.+0      	; 0x108 <Apply+0x6>
 108:	00 d0       	rcall	.+0      	; 0x10a <Apply+0x8>
 10a:	1f 92       	push	r1
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	9b 83       	std	Y+3, r25	; 0x03
 112:	8a 83       	std	Y+2, r24	; 0x02
 114:	6c 83       	std	Y+4, r22	; 0x04
 116:	4d 83       	std	Y+5, r20	; 0x05
 118:	19 82       	std	Y+1, r1	; 0x01
 11a:	8d 81       	ldd	r24, Y+5	; 0x05
 11c:	88 30       	cpi	r24, 0x08	; 8
 11e:	18 f4       	brcc	.+6      	; 0x126 <Apply+0x24>
 120:	8d 81       	ldd	r24, Y+5	; 0x05
 122:	89 83       	std	Y+1, r24	; 0x01
 124:	1d c0       	rjmp	.+58     	; 0x160 <Apply+0x5e>
 126:	8d 81       	ldd	r24, Y+5	; 0x05
 128:	80 31       	cpi	r24, 0x10	; 16
 12a:	38 f4       	brcc	.+14     	; 0x13a <Apply+0x38>
 12c:	8d 81       	ldd	r24, Y+5	; 0x05
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	20 f0       	brcs	.+8      	; 0x13a <Apply+0x38>
 132:	8d 81       	ldd	r24, Y+5	; 0x05
 134:	88 50       	subi	r24, 0x08	; 8
 136:	89 83       	std	Y+1, r24	; 0x01
 138:	13 c0       	rjmp	.+38     	; 0x160 <Apply+0x5e>
 13a:	8d 81       	ldd	r24, Y+5	; 0x05
 13c:	88 31       	cpi	r24, 0x18	; 24
 13e:	38 f4       	brcc	.+14     	; 0x14e <Apply+0x4c>
 140:	8d 81       	ldd	r24, Y+5	; 0x05
 142:	80 31       	cpi	r24, 0x10	; 16
 144:	20 f0       	brcs	.+8      	; 0x14e <Apply+0x4c>
 146:	8d 81       	ldd	r24, Y+5	; 0x05
 148:	80 51       	subi	r24, 0x10	; 16
 14a:	89 83       	std	Y+1, r24	; 0x01
 14c:	09 c0       	rjmp	.+18     	; 0x160 <Apply+0x5e>
 14e:	8d 81       	ldd	r24, Y+5	; 0x05
 150:	80 32       	cpi	r24, 0x20	; 32
 152:	30 f4       	brcc	.+12     	; 0x160 <Apply+0x5e>
 154:	8d 81       	ldd	r24, Y+5	; 0x05
 156:	88 31       	cpi	r24, 0x18	; 24
 158:	18 f0       	brcs	.+6      	; 0x160 <Apply+0x5e>
 15a:	8d 81       	ldd	r24, Y+5	; 0x05
 15c:	88 51       	subi	r24, 0x18	; 24
 15e:	89 83       	std	Y+1, r24	; 0x01
 160:	8c 81       	ldd	r24, Y+4	; 0x04
 162:	88 2f       	mov	r24, r24
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	00 97       	sbiw	r24, 0x00	; 0
 168:	c9 f0       	breq	.+50     	; 0x19c <Apply+0x9a>
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	09 f0       	breq	.+2      	; 0x170 <Apply+0x6e>
 16e:	2d c0       	rjmp	.+90     	; 0x1ca <Apply+0xc8>
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	9b 81       	ldd	r25, Y+3	; 0x03
 174:	fc 01       	movw	r30, r24
 176:	82 81       	ldd	r24, Z+2	; 0x02
 178:	48 2f       	mov	r20, r24
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	28 2f       	mov	r18, r24
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <Apply+0x88>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	2a 95       	dec	r18
 18c:	e2 f7       	brpl	.-8      	; 0x186 <Apply+0x84>
 18e:	84 2b       	or	r24, r20
 190:	28 2f       	mov	r18, r24
 192:	8a 81       	ldd	r24, Y+2	; 0x02
 194:	9b 81       	ldd	r25, Y+3	; 0x03
 196:	fc 01       	movw	r30, r24
 198:	22 83       	std	Z+2, r18	; 0x02
 19a:	17 c0       	rjmp	.+46     	; 0x1ca <Apply+0xc8>
 19c:	8a 81       	ldd	r24, Y+2	; 0x02
 19e:	9b 81       	ldd	r25, Y+3	; 0x03
 1a0:	fc 01       	movw	r30, r24
 1a2:	82 81       	ldd	r24, Z+2	; 0x02
 1a4:	48 2f       	mov	r20, r24
 1a6:	89 81       	ldd	r24, Y+1	; 0x01
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <Apply+0xb4>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	2a 95       	dec	r18
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <Apply+0xb0>
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	28 2f       	mov	r18, r24
 1c0:	8a 81       	ldd	r24, Y+2	; 0x02
 1c2:	9b 81       	ldd	r25, Y+3	; 0x03
 1c4:	fc 01       	movw	r30, r24
 1c6:	22 83       	std	Z+2, r18	; 0x02
 1c8:	00 00       	nop
 1ca:	00 00       	nop
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	08 95       	ret

000001dc <DIO_SetPinDirection>:
*I/P:Pin number and PinDirection
*Return:NOTHING
*Description:this function Configure the direction and choose
*whether the direction input or output
*************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	00 d0       	rcall	.+0      	; 0x1e2 <DIO_SetPinDirection+0x6>
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <DIO_SetPinDirection+0x8>
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	8b 83       	std	Y+3, r24	; 0x03
 1ea:	6c 83       	std	Y+4, r22	; 0x04
	GPIO* Local_Copy_Address=0;
 1ec:	1a 82       	std	Y+2, r1	; 0x02
 1ee:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNum<=pin7) && (PinNum>=pin0))
 1f0:	8b 81       	ldd	r24, Y+3	; 0x03
 1f2:	88 30       	cpi	r24, 0x08	; 8
 1f4:	28 f4       	brcc	.+10     	; 0x200 <DIO_SetPinDirection+0x24>
	{
		Local_Copy_Address=GPIOA_DIO;
 1f6:	89 e3       	ldi	r24, 0x39	; 57
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	9a 83       	std	Y+2, r25	; 0x02
 1fc:	89 83       	std	Y+1, r24	; 0x01
 1fe:	20 c0       	rjmp	.+64     	; 0x240 <DIO_SetPinDirection+0x64>
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	80 31       	cpi	r24, 0x10	; 16
 204:	40 f4       	brcc	.+16     	; 0x216 <DIO_SetPinDirection+0x3a>
 206:	8b 81       	ldd	r24, Y+3	; 0x03
 208:	88 30       	cpi	r24, 0x08	; 8
 20a:	28 f0       	brcs	.+10     	; 0x216 <DIO_SetPinDirection+0x3a>
	{
		Local_Copy_Address=GPIOB_DIO;
 20c:	86 e3       	ldi	r24, 0x36	; 54
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	9a 83       	std	Y+2, r25	; 0x02
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	15 c0       	rjmp	.+42     	; 0x240 <DIO_SetPinDirection+0x64>
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
 216:	8b 81       	ldd	r24, Y+3	; 0x03
 218:	88 31       	cpi	r24, 0x18	; 24
 21a:	40 f4       	brcc	.+16     	; 0x22c <DIO_SetPinDirection+0x50>
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	80 31       	cpi	r24, 0x10	; 16
 220:	28 f0       	brcs	.+10     	; 0x22c <DIO_SetPinDirection+0x50>
	{
		Local_Copy_Address=GPIOC_DIO;
 222:	83 e3       	ldi	r24, 0x33	; 51
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	9a 83       	std	Y+2, r25	; 0x02
 228:	89 83       	std	Y+1, r24	; 0x01
 22a:	0a c0       	rjmp	.+20     	; 0x240 <DIO_SetPinDirection+0x64>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	80 32       	cpi	r24, 0x20	; 32
 230:	38 f4       	brcc	.+14     	; 0x240 <DIO_SetPinDirection+0x64>
 232:	8b 81       	ldd	r24, Y+3	; 0x03
 234:	88 31       	cpi	r24, 0x18	; 24
 236:	20 f0       	brcs	.+8      	; 0x240 <DIO_SetPinDirection+0x64>
	{
		Local_Copy_Address=GPIOD_DIO;
 238:	80 e3       	ldi	r24, 0x30	; 48
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	9a 83       	std	Y+2, r25	; 0x02
 23e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	Apply_Dir(Local_Copy_Address,PinNum,PinDirection);
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	9a 81       	ldd	r25, Y+2	; 0x02
 244:	4c 81       	ldd	r20, Y+4	; 0x04
 246:	6b 81       	ldd	r22, Y+3	; 0x03
 248:	0e 94 2e 01 	call	0x25c	; 0x25c <Apply_Dir>
	
}
 24c:	00 00       	nop
 24e:	0f 90       	pop	r0
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <Apply_Dir>:


static void Apply_Dir(GPIO* Gpio,uint8 PinNum,uint8 PinDirection){
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	00 d0       	rcall	.+0      	; 0x262 <Apply_Dir+0x6>
 262:	00 d0       	rcall	.+0      	; 0x264 <Apply_Dir+0x8>
 264:	1f 92       	push	r1
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	9b 83       	std	Y+3, r25	; 0x03
 26c:	8a 83       	std	Y+2, r24	; 0x02
 26e:	6c 83       	std	Y+4, r22	; 0x04
 270:	4d 83       	std	Y+5, r20	; 0x05
	
	uint8 Local_Copyu8_Actuall_Pin=0;
 272:	19 82       	std	Y+1, r1	; 0x01
	if ((PinNum<=pin7) && (PinNum>=pin0))
 274:	8c 81       	ldd	r24, Y+4	; 0x04
 276:	88 30       	cpi	r24, 0x08	; 8
 278:	18 f4       	brcc	.+6      	; 0x280 <Apply_Dir+0x24>
	{
		Local_Copyu8_Actuall_Pin=PinNum;
 27a:	8c 81       	ldd	r24, Y+4	; 0x04
 27c:	89 83       	std	Y+1, r24	; 0x01
 27e:	1d c0       	rjmp	.+58     	; 0x2ba <Apply_Dir+0x5e>
	}
	else if ((PinNum<=pin15) && (PinNum>=pin8))
 280:	8c 81       	ldd	r24, Y+4	; 0x04
 282:	80 31       	cpi	r24, 0x10	; 16
 284:	38 f4       	brcc	.+14     	; 0x294 <Apply_Dir+0x38>
 286:	8c 81       	ldd	r24, Y+4	; 0x04
 288:	88 30       	cpi	r24, 0x08	; 8
 28a:	20 f0       	brcs	.+8      	; 0x294 <Apply_Dir+0x38>
	{
		Local_Copyu8_Actuall_Pin=PinNum-8;
 28c:	8c 81       	ldd	r24, Y+4	; 0x04
 28e:	88 50       	subi	r24, 0x08	; 8
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	13 c0       	rjmp	.+38     	; 0x2ba <Apply_Dir+0x5e>
	}
	else if ((PinNum<=pin23) && (PinNum>=pin16))
 294:	8c 81       	ldd	r24, Y+4	; 0x04
 296:	88 31       	cpi	r24, 0x18	; 24
 298:	38 f4       	brcc	.+14     	; 0x2a8 <Apply_Dir+0x4c>
 29a:	8c 81       	ldd	r24, Y+4	; 0x04
 29c:	80 31       	cpi	r24, 0x10	; 16
 29e:	20 f0       	brcs	.+8      	; 0x2a8 <Apply_Dir+0x4c>
	{
		Local_Copyu8_Actuall_Pin=PinNum-16;
 2a0:	8c 81       	ldd	r24, Y+4	; 0x04
 2a2:	80 51       	subi	r24, 0x10	; 16
 2a4:	89 83       	std	Y+1, r24	; 0x01
 2a6:	09 c0       	rjmp	.+18     	; 0x2ba <Apply_Dir+0x5e>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
 2a8:	8c 81       	ldd	r24, Y+4	; 0x04
 2aa:	80 32       	cpi	r24, 0x20	; 32
 2ac:	30 f4       	brcc	.+12     	; 0x2ba <Apply_Dir+0x5e>
 2ae:	8c 81       	ldd	r24, Y+4	; 0x04
 2b0:	88 31       	cpi	r24, 0x18	; 24
 2b2:	18 f0       	brcs	.+6      	; 0x2ba <Apply_Dir+0x5e>
	{
		Local_Copyu8_Actuall_Pin=PinNum-24;
 2b4:	8c 81       	ldd	r24, Y+4	; 0x04
 2b6:	88 51       	subi	r24, 0x18	; 24
 2b8:	89 83       	std	Y+1, r24	; 0x01
	}
	switch(PinDirection){
 2ba:	8d 81       	ldd	r24, Y+5	; 0x05
 2bc:	88 2f       	mov	r24, r24
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	91 05       	cpc	r25, r1
 2c4:	99 f1       	breq	.+102    	; 0x32c <Apply_Dir+0xd0>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	91 05       	cpc	r25, r1
 2ca:	09 f4       	brne	.+2      	; 0x2ce <Apply_Dir+0x72>
 2cc:	5c c0       	rjmp	.+184    	; 0x386 <Apply_Dir+0x12a>
 2ce:	89 2b       	or	r24, r25
 2d0:	09 f0       	breq	.+2      	; 0x2d4 <Apply_Dir+0x78>
		case OUTPUT:Set_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);break;
		
		
	}
	
 2d2:	6f c0       	rjmp	.+222    	; 0x3b2 <Apply_Dir+0x156>
	}else if ((PinNum<=pin31) && (PinNum>=pin24))
	{
		Local_Copyu8_Actuall_Pin=PinNum-24;
	}
	switch(PinDirection){
		case Input_PUll_UP:Clear_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);Set_Bit(Gpio->PORT,Local_Copyu8_Actuall_Pin); break;
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	9b 81       	ldd	r25, Y+3	; 0x03
 2d8:	fc 01       	movw	r30, r24
 2da:	81 81       	ldd	r24, Z+1	; 0x01
 2dc:	48 2f       	mov	r20, r24
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	28 2f       	mov	r18, r24
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <Apply_Dir+0x92>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	2a 95       	dec	r18
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <Apply_Dir+0x8e>
 2f2:	80 95       	com	r24
 2f4:	84 23       	and	r24, r20
 2f6:	28 2f       	mov	r18, r24
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	9b 81       	ldd	r25, Y+3	; 0x03
 2fc:	fc 01       	movw	r30, r24
 2fe:	21 83       	std	Z+1, r18	; 0x01
 300:	8a 81       	ldd	r24, Y+2	; 0x02
 302:	9b 81       	ldd	r25, Y+3	; 0x03
 304:	fc 01       	movw	r30, r24
 306:	82 81       	ldd	r24, Z+2	; 0x02
 308:	48 2f       	mov	r20, r24
 30a:	89 81       	ldd	r24, Y+1	; 0x01
 30c:	28 2f       	mov	r18, r24
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	02 c0       	rjmp	.+4      	; 0x31a <Apply_Dir+0xbe>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	2a 95       	dec	r18
 31c:	e2 f7       	brpl	.-8      	; 0x316 <Apply_Dir+0xba>
 31e:	84 2b       	or	r24, r20
 320:	28 2f       	mov	r18, r24
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	9b 81       	ldd	r25, Y+3	; 0x03
 326:	fc 01       	movw	r30, r24
 328:	22 83       	std	Z+2, r18	; 0x02
 32a:	43 c0       	rjmp	.+134    	; 0x3b2 <Apply_Dir+0x156>
		case INPUT_WITHOUT_PULL:Clear_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);Clear_Bit(Gpio->PORT,Local_Copyu8_Actuall_Pin); break;
 32c:	8a 81       	ldd	r24, Y+2	; 0x02
 32e:	9b 81       	ldd	r25, Y+3	; 0x03
 330:	fc 01       	movw	r30, r24
 332:	81 81       	ldd	r24, Z+1	; 0x01
 334:	48 2f       	mov	r20, r24
 336:	89 81       	ldd	r24, Y+1	; 0x01
 338:	28 2f       	mov	r18, r24
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <Apply_Dir+0xea>
 342:	88 0f       	add	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	2a 95       	dec	r18
 348:	e2 f7       	brpl	.-8      	; 0x342 <Apply_Dir+0xe6>
 34a:	80 95       	com	r24
 34c:	84 23       	and	r24, r20
 34e:	28 2f       	mov	r18, r24
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	9b 81       	ldd	r25, Y+3	; 0x03
 354:	fc 01       	movw	r30, r24
 356:	21 83       	std	Z+1, r18	; 0x01
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	9b 81       	ldd	r25, Y+3	; 0x03
 35c:	fc 01       	movw	r30, r24
 35e:	82 81       	ldd	r24, Z+2	; 0x02
 360:	48 2f       	mov	r20, r24
 362:	89 81       	ldd	r24, Y+1	; 0x01
 364:	28 2f       	mov	r18, r24
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <Apply_Dir+0x116>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	2a 95       	dec	r18
 374:	e2 f7       	brpl	.-8      	; 0x36e <Apply_Dir+0x112>
 376:	80 95       	com	r24
 378:	84 23       	and	r24, r20
 37a:	28 2f       	mov	r18, r24
 37c:	8a 81       	ldd	r24, Y+2	; 0x02
 37e:	9b 81       	ldd	r25, Y+3	; 0x03
 380:	fc 01       	movw	r30, r24
 382:	22 83       	std	Z+2, r18	; 0x02
 384:	16 c0       	rjmp	.+44     	; 0x3b2 <Apply_Dir+0x156>
		case OUTPUT:Set_Bit(Gpio->DDR,Local_Copyu8_Actuall_Pin);break;
 386:	8a 81       	ldd	r24, Y+2	; 0x02
 388:	9b 81       	ldd	r25, Y+3	; 0x03
 38a:	fc 01       	movw	r30, r24
 38c:	81 81       	ldd	r24, Z+1	; 0x01
 38e:	48 2f       	mov	r20, r24
 390:	89 81       	ldd	r24, Y+1	; 0x01
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <Apply_Dir+0x144>
 39c:	88 0f       	add	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	2a 95       	dec	r18
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <Apply_Dir+0x140>
 3a4:	84 2b       	or	r24, r20
 3a6:	28 2f       	mov	r18, r24
 3a8:	8a 81       	ldd	r24, Y+2	; 0x02
 3aa:	9b 81       	ldd	r25, Y+3	; 0x03
 3ac:	fc 01       	movw	r30, r24
 3ae:	21 83       	std	Z+1, r18	; 0x01
 3b0:	00 00       	nop
		
		
	}
	
 3b2:	00 00       	nop
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	0f 90       	pop	r0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <main>:
#include "DIO_Interface.h"
#include "Uart_Interface.h"


int main(void)
{
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	1f 92       	push	r1
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(pin13,OUTPUT);
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	8d e0       	ldi	r24, 0x0D	; 13
 3d2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_SetPinDirection>
	DIO_SetPinDirection(pin14,OUTPUT);
 3d6:	62 e0       	ldi	r22, 0x02	; 2
 3d8:	8e e0       	ldi	r24, 0x0E	; 14
 3da:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_SetPinDirection>
	/*uart initilaization*/
	UART_Init();
 3de:	0e 94 0b 02 	call	0x416	; 0x416 <UART_Init>
	while (1)
	{
	/*Check the value received from uart */	
	uint8 x=UART_Receive();
 3e2:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <UART_Receive>
 3e6:	89 83       	std	Y+1, r24	; 0x01
	/*if value equal to A then write high to led2*/
	if (x=='A'){
 3e8:	89 81       	ldd	r24, Y+1	; 0x01
 3ea:	81 34       	cpi	r24, 0x41	; 65
 3ec:	41 f4       	brne	.+16     	; 0x3fe <main+0x3a>
	DIO_WritePin(pin13,LOW);
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	8d e0       	ldi	r24, 0x0D	; 13
 3f2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	DIO_WritePin(pin14,High);	
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	8e e0       	ldi	r24, 0x0E	; 14
 3fa:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	}
	/*if value equal to A then write high to led3*/
	if (x=='B'){
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	82 34       	cpi	r24, 0x42	; 66
 402:	79 f7       	brne	.-34     	; 0x3e2 <main+0x1e>
		DIO_WritePin(pin13,High);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	8d e0       	ldi	r24, 0x0D	; 13
 408:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
		DIO_WritePin(pin14,LOW);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	8e e0       	ldi	r24, 0x0E	; 14
 410:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WritePin>
	}
	}
 414:	e6 cf       	rjmp	.-52     	; 0x3e2 <main+0x1e>

00000416 <UART_Init>:
void UART_Transmit(uint8 data){
   /*Check wether the udr empty to transmit*/
   while (!( UART->UCSRA & (1<<UDRE)));
   /* Put data into buffer, sends the data */
   UART->UDR = data;
}
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	28 97       	sbiw	r28, 0x08	; 8
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	f8 94       	cli
 424:	de bf       	out	0x3e, r29	; 62
 426:	0f be       	out	0x3f, r0	; 63
 428:	cd bf       	out	0x3d, r28	; 61
 42a:	1a 82       	std	Y+2, r1	; 0x02
 42c:	19 82       	std	Y+1, r1	; 0x01
 42e:	86 e0       	ldi	r24, 0x06	; 6
 430:	e0 e6       	ldi	r30, 0x60	; 96
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	de 01       	movw	r26, r28
 436:	13 96       	adiw	r26, 0x03	; 3
 438:	01 90       	ld	r0, Z+
 43a:	0d 92       	st	X+, r0
 43c:	8a 95       	dec	r24
 43e:	e1 f7       	brne	.-8      	; 0x438 <UART_Init+0x22>
 440:	88 85       	ldd	r24, Y+8	; 0x08
 442:	88 2f       	mov	r24, r24
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	00 97       	sbiw	r24, 0x00	; 0
 448:	19 f0       	breq	.+6      	; 0x450 <UART_Init+0x3a>
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	a1 f0       	breq	.+40     	; 0x476 <UART_Init+0x60>
 44e:	2f c0       	rjmp	.+94     	; 0x4ae <UART_Init+0x98>
 450:	8b 81       	ldd	r24, Y+3	; 0x03
 452:	9c 81       	ldd	r25, Y+4	; 0x04
 454:	9c 01       	movw	r18, r24
 456:	40 e0       	ldi	r20, 0x00	; 0
 458:	50 e0       	ldi	r21, 0x00	; 0
 45a:	80 e4       	ldi	r24, 0x40	; 64
 45c:	92 e4       	ldi	r25, 0x42	; 66
 45e:	af e0       	ldi	r26, 0x0F	; 15
 460:	b0 e0       	ldi	r27, 0x00	; 0
 462:	bc 01       	movw	r22, r24
 464:	cd 01       	movw	r24, r26
 466:	0e 94 0e 03 	call	0x61c	; 0x61c <__udivmodsi4>
 46a:	da 01       	movw	r26, r20
 46c:	c9 01       	movw	r24, r18
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	9a 83       	std	Y+2, r25	; 0x02
 472:	89 83       	std	Y+1, r24	; 0x01
 474:	1c c0       	rjmp	.+56     	; 0x4ae <UART_Init+0x98>
 476:	89 e2       	ldi	r24, 0x29	; 41
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	29 e2       	ldi	r18, 0x29	; 41
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	f9 01       	movw	r30, r18
 480:	22 81       	ldd	r18, Z+2	; 0x02
 482:	22 60       	ori	r18, 0x02	; 2
 484:	fc 01       	movw	r30, r24
 486:	22 83       	std	Z+2, r18	; 0x02
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	9c 81       	ldd	r25, Y+4	; 0x04
 48c:	9c 01       	movw	r18, r24
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	80 e8       	ldi	r24, 0x80	; 128
 494:	94 e8       	ldi	r25, 0x84	; 132
 496:	ae e1       	ldi	r26, 0x1E	; 30
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	bc 01       	movw	r22, r24
 49c:	cd 01       	movw	r24, r26
 49e:	0e 94 0e 03 	call	0x61c	; 0x61c <__udivmodsi4>
 4a2:	da 01       	movw	r26, r20
 4a4:	c9 01       	movw	r24, r18
 4a6:	01 97       	sbiw	r24, 0x01	; 1
 4a8:	9a 83       	std	Y+2, r25	; 0x02
 4aa:	89 83       	std	Y+1, r24	; 0x01
 4ac:	00 00       	nop
 4ae:	80 e4       	ldi	r24, 0x40	; 64
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	29 81       	ldd	r18, Y+1	; 0x01
 4b4:	3a 81       	ldd	r19, Y+2	; 0x02
 4b6:	23 2f       	mov	r18, r19
 4b8:	33 27       	eor	r19, r19
 4ba:	fc 01       	movw	r30, r24
 4bc:	20 83       	st	Z, r18
 4be:	89 e2       	ldi	r24, 0x29	; 41
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	29 81       	ldd	r18, Y+1	; 0x01
 4c4:	fc 01       	movw	r30, r24
 4c6:	20 83       	st	Z, r18
 4c8:	8f 81       	ldd	r24, Y+7	; 0x07
 4ca:	88 2f       	mov	r24, r24
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	86 30       	cpi	r24, 0x06	; 6
 4d0:	91 05       	cpc	r25, r1
 4d2:	b1 f0       	breq	.+44     	; 0x500 <UART_Init+0xea>
 4d4:	87 30       	cpi	r24, 0x07	; 7
 4d6:	91 05       	cpc	r25, r1
 4d8:	1c f4       	brge	.+6      	; 0x4e0 <UART_Init+0xca>
 4da:	05 97       	sbiw	r24, 0x05	; 5
 4dc:	39 f0       	breq	.+14     	; 0x4ec <UART_Init+0xd6>
 4de:	40 c0       	rjmp	.+128    	; 0x560 <UART_Init+0x14a>
 4e0:	87 30       	cpi	r24, 0x07	; 7
 4e2:	91 05       	cpc	r25, r1
 4e4:	01 f1       	breq	.+64     	; 0x526 <UART_Init+0x110>
 4e6:	08 97       	sbiw	r24, 0x08	; 8
 4e8:	89 f1       	breq	.+98     	; 0x54c <UART_Init+0x136>
 4ea:	3a c0       	rjmp	.+116    	; 0x560 <UART_Init+0x14a>
 4ec:	89 e2       	ldi	r24, 0x29	; 41
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	29 e2       	ldi	r18, 0x29	; 41
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	f9 01       	movw	r30, r18
 4f6:	21 81       	ldd	r18, Z+1	; 0x01
 4f8:	2b 7f       	andi	r18, 0xFB	; 251
 4fa:	fc 01       	movw	r30, r24
 4fc:	21 83       	std	Z+1, r18	; 0x01
 4fe:	30 c0       	rjmp	.+96     	; 0x560 <UART_Init+0x14a>
 500:	80 e4       	ldi	r24, 0x40	; 64
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	20 e4       	ldi	r18, 0x40	; 64
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	f9 01       	movw	r30, r18
 50a:	20 81       	ld	r18, Z
 50c:	22 68       	ori	r18, 0x82	; 130
 50e:	fc 01       	movw	r30, r24
 510:	20 83       	st	Z, r18
 512:	89 e2       	ldi	r24, 0x29	; 41
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	29 e2       	ldi	r18, 0x29	; 41
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	f9 01       	movw	r30, r18
 51c:	21 81       	ldd	r18, Z+1	; 0x01
 51e:	2b 7f       	andi	r18, 0xFB	; 251
 520:	fc 01       	movw	r30, r24
 522:	21 83       	std	Z+1, r18	; 0x01
 524:	1d c0       	rjmp	.+58     	; 0x560 <UART_Init+0x14a>
 526:	80 e4       	ldi	r24, 0x40	; 64
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	20 e4       	ldi	r18, 0x40	; 64
 52c:	30 e0       	ldi	r19, 0x00	; 0
 52e:	f9 01       	movw	r30, r18
 530:	20 81       	ld	r18, Z
 532:	24 68       	ori	r18, 0x84	; 132
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
 538:	89 e2       	ldi	r24, 0x29	; 41
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	29 e2       	ldi	r18, 0x29	; 41
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	f9 01       	movw	r30, r18
 542:	21 81       	ldd	r18, Z+1	; 0x01
 544:	2b 7f       	andi	r18, 0xFB	; 251
 546:	fc 01       	movw	r30, r24
 548:	21 83       	std	Z+1, r18	; 0x01
 54a:	0a c0       	rjmp	.+20     	; 0x560 <UART_Init+0x14a>
 54c:	80 e4       	ldi	r24, 0x40	; 64
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	20 e4       	ldi	r18, 0x40	; 64
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	f9 01       	movw	r30, r18
 556:	20 81       	ld	r18, Z
 558:	26 68       	ori	r18, 0x86	; 134
 55a:	fc 01       	movw	r30, r24
 55c:	20 83       	st	Z, r18
 55e:	00 00       	nop
 560:	8d 81       	ldd	r24, Y+5	; 0x05
 562:	88 2f       	mov	r24, r24
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	91 05       	cpc	r25, r1
 56a:	61 f0       	breq	.+24     	; 0x584 <UART_Init+0x16e>
 56c:	02 97       	sbiw	r24, 0x02	; 2
 56e:	59 f4       	brne	.+22     	; 0x586 <UART_Init+0x170>
 570:	80 e4       	ldi	r24, 0x40	; 64
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	20 e4       	ldi	r18, 0x40	; 64
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	f9 01       	movw	r30, r18
 57a:	20 81       	ld	r18, Z
 57c:	28 68       	ori	r18, 0x88	; 136
 57e:	fc 01       	movw	r30, r24
 580:	20 83       	st	Z, r18
 582:	01 c0       	rjmp	.+2      	; 0x586 <UART_Init+0x170>
 584:	00 00       	nop
 586:	8e 81       	ldd	r24, Y+6	; 0x06
 588:	88 2f       	mov	r24, r24
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	81 30       	cpi	r24, 0x01	; 1
 58e:	91 05       	cpc	r25, r1
 590:	19 f0       	breq	.+6      	; 0x598 <UART_Init+0x182>
 592:	02 97       	sbiw	r24, 0x02	; 2
 594:	59 f0       	breq	.+22     	; 0x5ac <UART_Init+0x196>
 596:	14 c0       	rjmp	.+40     	; 0x5c0 <UART_Init+0x1aa>
 598:	80 e4       	ldi	r24, 0x40	; 64
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	20 e4       	ldi	r18, 0x40	; 64
 59e:	30 e0       	ldi	r19, 0x00	; 0
 5a0:	f9 01       	movw	r30, r18
 5a2:	20 81       	ld	r18, Z
 5a4:	20 6b       	ori	r18, 0xB0	; 176
 5a6:	fc 01       	movw	r30, r24
 5a8:	20 83       	st	Z, r18
 5aa:	0a c0       	rjmp	.+20     	; 0x5c0 <UART_Init+0x1aa>
 5ac:	80 e4       	ldi	r24, 0x40	; 64
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	20 e4       	ldi	r18, 0x40	; 64
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	f9 01       	movw	r30, r18
 5b6:	20 81       	ld	r18, Z
 5b8:	20 6a       	ori	r18, 0xA0	; 160
 5ba:	fc 01       	movw	r30, r24
 5bc:	20 83       	st	Z, r18
 5be:	00 00       	nop
 5c0:	89 e2       	ldi	r24, 0x29	; 41
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	29 e2       	ldi	r18, 0x29	; 41
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	f9 01       	movw	r30, r18
 5ca:	21 81       	ldd	r18, Z+1	; 0x01
 5cc:	20 61       	ori	r18, 0x10	; 16
 5ce:	fc 01       	movw	r30, r24
 5d0:	21 83       	std	Z+1, r18	; 0x01
 5d2:	89 e2       	ldi	r24, 0x29	; 41
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	29 e2       	ldi	r18, 0x29	; 41
 5d8:	30 e0       	ldi	r19, 0x00	; 0
 5da:	f9 01       	movw	r30, r18
 5dc:	21 81       	ldd	r18, Z+1	; 0x01
 5de:	28 60       	ori	r18, 0x08	; 8
 5e0:	fc 01       	movw	r30, r24
 5e2:	21 83       	std	Z+1, r18	; 0x01
 5e4:	00 00       	nop
 5e6:	28 96       	adiw	r28, 0x08	; 8
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	f8 94       	cli
 5ec:	de bf       	out	0x3e, r29	; 62
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	cd bf       	out	0x3d, r28	; 61
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <UART_Receive>:
/***********************UART_Reccive()***************************
*I/P:NOTHING
*Return:uint8
*Description:this function receive one char from uart
*************************************************************/
uint8 UART_Receive(){
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
	/*Receive completed*/
	while(Get_Bit(UART->UCSRA,RXC)==0);
 600:	00 00       	nop
 602:	89 e2       	ldi	r24, 0x29	; 41
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	fc 01       	movw	r30, r24
 608:	82 81       	ldd	r24, Z+2	; 0x02
 60a:	88 23       	and	r24, r24
 60c:	d4 f7       	brge	.-12     	; 0x602 <UART_Receive+0xa>
	return UART->UDR;
 60e:	89 e2       	ldi	r24, 0x29	; 41
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	fc 01       	movw	r30, r24
 614:	83 81       	ldd	r24, Z+3	; 0x03
	
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <__udivmodsi4>:
 61c:	a1 e2       	ldi	r26, 0x21	; 33
 61e:	1a 2e       	mov	r1, r26
 620:	aa 1b       	sub	r26, r26
 622:	bb 1b       	sub	r27, r27
 624:	fd 01       	movw	r30, r26
 626:	0d c0       	rjmp	.+26     	; 0x642 <__udivmodsi4_ep>

00000628 <__udivmodsi4_loop>:
 628:	aa 1f       	adc	r26, r26
 62a:	bb 1f       	adc	r27, r27
 62c:	ee 1f       	adc	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	a2 17       	cp	r26, r18
 632:	b3 07       	cpc	r27, r19
 634:	e4 07       	cpc	r30, r20
 636:	f5 07       	cpc	r31, r21
 638:	20 f0       	brcs	.+8      	; 0x642 <__udivmodsi4_ep>
 63a:	a2 1b       	sub	r26, r18
 63c:	b3 0b       	sbc	r27, r19
 63e:	e4 0b       	sbc	r30, r20
 640:	f5 0b       	sbc	r31, r21

00000642 <__udivmodsi4_ep>:
 642:	66 1f       	adc	r22, r22
 644:	77 1f       	adc	r23, r23
 646:	88 1f       	adc	r24, r24
 648:	99 1f       	adc	r25, r25
 64a:	1a 94       	dec	r1
 64c:	69 f7       	brne	.-38     	; 0x628 <__udivmodsi4_loop>
 64e:	60 95       	com	r22
 650:	70 95       	com	r23
 652:	80 95       	com	r24
 654:	90 95       	com	r25
 656:	9b 01       	movw	r18, r22
 658:	ac 01       	movw	r20, r24
 65a:	bd 01       	movw	r22, r26
 65c:	cf 01       	movw	r24, r30
 65e:	08 95       	ret

00000660 <_exit>:
 660:	f8 94       	cli

00000662 <__stop_program>:
 662:	ff cf       	rjmp	.-2      	; 0x662 <__stop_program>
