
User_Story_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000016dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000016dc  00001770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  0080006a  0080006a  0000177a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000177a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000280  00000000  00000000  000017e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ebf  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be6  00000000  00000000  00003927  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a89  00000000  00000000  0000450d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007ec  00000000  00000000  00005f98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d5b  00000000  00000000  00006784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f71  00000000  00000000  000074df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000230  00000000  00000000  00008450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ed       	ldi	r30, 0xDC	; 220
      68:	f6 e1       	ldi	r31, 0x16	; 22
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 09 	call	0x1338	; 0x1338 <main>
      8a:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_SetPinDirection>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <DIO_SetPinDirection+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	89 83       	std	Y+1, r24	; 0x01
      9e:	6a 83       	std	Y+2, r22	; 0x02
      a0:	89 81       	ldd	r24, Y+1	; 0x01
      a2:	88 30       	cpi	r24, 0x08	; 8
      a4:	60 f5       	brcc	.+88     	; 0xfe <DIO_SetPinDirection+0x6c>
      a6:	8a 81       	ldd	r24, Y+2	; 0x02
      a8:	88 23       	and	r24, r24
      aa:	a9 f4       	brne	.+42     	; 0xd6 <DIO_SetPinDirection+0x44>
      ac:	8a e3       	ldi	r24, 0x3A	; 58
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	2a e3       	ldi	r18, 0x3A	; 58
      b2:	30 e0       	ldi	r19, 0x00	; 0
      b4:	f9 01       	movw	r30, r18
      b6:	60 81       	ld	r22, Z
      b8:	29 81       	ldd	r18, Y+1	; 0x01
      ba:	42 2f       	mov	r20, r18
      bc:	50 e0       	ldi	r21, 0x00	; 0
      be:	21 e0       	ldi	r18, 0x01	; 1
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_SetPinDirection+0x36>
      c4:	22 0f       	add	r18, r18
      c6:	33 1f       	adc	r19, r19
      c8:	4a 95       	dec	r20
      ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_SetPinDirection+0x32>
      cc:	20 95       	com	r18
      ce:	26 23       	and	r18, r22
      d0:	fc 01       	movw	r30, r24
      d2:	20 83       	st	Z, r18
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <DIO_SetPinDirection+0x1a4>
      d6:	8a e3       	ldi	r24, 0x3A	; 58
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	2a e3       	ldi	r18, 0x3A	; 58
      dc:	30 e0       	ldi	r19, 0x00	; 0
      de:	f9 01       	movw	r30, r18
      e0:	60 81       	ld	r22, Z
      e2:	29 81       	ldd	r18, Y+1	; 0x01
      e4:	42 2f       	mov	r20, r18
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	21 e0       	ldi	r18, 0x01	; 1
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_SetPinDirection+0x60>
      ee:	22 0f       	add	r18, r18
      f0:	33 1f       	adc	r19, r19
      f2:	4a 95       	dec	r20
      f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_SetPinDirection+0x5c>
      f6:	26 2b       	or	r18, r22
      f8:	fc 01       	movw	r30, r24
      fa:	20 83       	st	Z, r18
      fc:	9c c0       	rjmp	.+312    	; 0x236 <DIO_SetPinDirection+0x1a4>
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	88 30       	cpi	r24, 0x08	; 8
     102:	88 f1       	brcs	.+98     	; 0x166 <DIO_SetPinDirection+0xd4>
     104:	89 81       	ldd	r24, Y+1	; 0x01
     106:	80 31       	cpi	r24, 0x10	; 16
     108:	70 f5       	brcc	.+92     	; 0x166 <DIO_SetPinDirection+0xd4>
     10a:	8a 81       	ldd	r24, Y+2	; 0x02
     10c:	88 23       	and	r24, r24
     10e:	b1 f4       	brne	.+44     	; 0x13c <DIO_SetPinDirection+0xaa>
     110:	87 e3       	ldi	r24, 0x37	; 55
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	27 e3       	ldi	r18, 0x37	; 55
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	f9 01       	movw	r30, r18
     11a:	60 81       	ld	r22, Z
     11c:	29 81       	ldd	r18, Y+1	; 0x01
     11e:	28 50       	subi	r18, 0x08	; 8
     120:	42 2f       	mov	r20, r18
     122:	50 e0       	ldi	r21, 0x00	; 0
     124:	21 e0       	ldi	r18, 0x01	; 1
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPinDirection+0x9c>
     12a:	22 0f       	add	r18, r18
     12c:	33 1f       	adc	r19, r19
     12e:	4a 95       	dec	r20
     130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPinDirection+0x98>
     132:	20 95       	com	r18
     134:	26 23       	and	r18, r22
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18
     13a:	7d c0       	rjmp	.+250    	; 0x236 <DIO_SetPinDirection+0x1a4>
     13c:	87 e3       	ldi	r24, 0x37	; 55
     13e:	90 e0       	ldi	r25, 0x00	; 0
     140:	27 e3       	ldi	r18, 0x37	; 55
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	f9 01       	movw	r30, r18
     146:	60 81       	ld	r22, Z
     148:	29 81       	ldd	r18, Y+1	; 0x01
     14a:	28 50       	subi	r18, 0x08	; 8
     14c:	42 2f       	mov	r20, r18
     14e:	50 e0       	ldi	r21, 0x00	; 0
     150:	21 e0       	ldi	r18, 0x01	; 1
     152:	30 e0       	ldi	r19, 0x00	; 0
     154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPinDirection+0xc8>
     156:	22 0f       	add	r18, r18
     158:	33 1f       	adc	r19, r19
     15a:	4a 95       	dec	r20
     15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPinDirection+0xc4>
     15e:	26 2b       	or	r18, r22
     160:	fc 01       	movw	r30, r24
     162:	20 83       	st	Z, r18
     164:	68 c0       	rjmp	.+208    	; 0x236 <DIO_SetPinDirection+0x1a4>
     166:	89 81       	ldd	r24, Y+1	; 0x01
     168:	80 31       	cpi	r24, 0x10	; 16
     16a:	88 f1       	brcs	.+98     	; 0x1ce <DIO_SetPinDirection+0x13c>
     16c:	89 81       	ldd	r24, Y+1	; 0x01
     16e:	88 31       	cpi	r24, 0x18	; 24
     170:	70 f5       	brcc	.+92     	; 0x1ce <DIO_SetPinDirection+0x13c>
     172:	8a 81       	ldd	r24, Y+2	; 0x02
     174:	88 23       	and	r24, r24
     176:	b1 f4       	brne	.+44     	; 0x1a4 <DIO_SetPinDirection+0x112>
     178:	84 e3       	ldi	r24, 0x34	; 52
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	24 e3       	ldi	r18, 0x34	; 52
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	f9 01       	movw	r30, r18
     182:	60 81       	ld	r22, Z
     184:	29 81       	ldd	r18, Y+1	; 0x01
     186:	20 51       	subi	r18, 0x10	; 16
     188:	42 2f       	mov	r20, r18
     18a:	50 e0       	ldi	r21, 0x00	; 0
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_SetPinDirection+0x104>
     192:	22 0f       	add	r18, r18
     194:	33 1f       	adc	r19, r19
     196:	4a 95       	dec	r20
     198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_SetPinDirection+0x100>
     19a:	20 95       	com	r18
     19c:	26 23       	and	r18, r22
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
     1a2:	49 c0       	rjmp	.+146    	; 0x236 <DIO_SetPinDirection+0x1a4>
     1a4:	84 e3       	ldi	r24, 0x34	; 52
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	24 e3       	ldi	r18, 0x34	; 52
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	f9 01       	movw	r30, r18
     1ae:	60 81       	ld	r22, Z
     1b0:	29 81       	ldd	r18, Y+1	; 0x01
     1b2:	20 51       	subi	r18, 0x10	; 16
     1b4:	42 2f       	mov	r20, r18
     1b6:	50 e0       	ldi	r21, 0x00	; 0
     1b8:	21 e0       	ldi	r18, 0x01	; 1
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_SetPinDirection+0x130>
     1be:	22 0f       	add	r18, r18
     1c0:	33 1f       	adc	r19, r19
     1c2:	4a 95       	dec	r20
     1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_SetPinDirection+0x12c>
     1c6:	26 2b       	or	r18, r22
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 83       	st	Z, r18
     1cc:	34 c0       	rjmp	.+104    	; 0x236 <DIO_SetPinDirection+0x1a4>
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	88 31       	cpi	r24, 0x18	; 24
     1d2:	88 f1       	brcs	.+98     	; 0x236 <DIO_SetPinDirection+0x1a4>
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	80 32       	cpi	r24, 0x20	; 32
     1d8:	70 f5       	brcc	.+92     	; 0x236 <DIO_SetPinDirection+0x1a4>
     1da:	8a 81       	ldd	r24, Y+2	; 0x02
     1dc:	88 23       	and	r24, r24
     1de:	b1 f4       	brne	.+44     	; 0x20c <DIO_SetPinDirection+0x17a>
     1e0:	81 e3       	ldi	r24, 0x31	; 49
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	21 e3       	ldi	r18, 0x31	; 49
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	f9 01       	movw	r30, r18
     1ea:	60 81       	ld	r22, Z
     1ec:	29 81       	ldd	r18, Y+1	; 0x01
     1ee:	28 51       	subi	r18, 0x18	; 24
     1f0:	42 2f       	mov	r20, r18
     1f2:	50 e0       	ldi	r21, 0x00	; 0
     1f4:	21 e0       	ldi	r18, 0x01	; 1
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_SetPinDirection+0x16c>
     1fa:	22 0f       	add	r18, r18
     1fc:	33 1f       	adc	r19, r19
     1fe:	4a 95       	dec	r20
     200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_SetPinDirection+0x168>
     202:	20 95       	com	r18
     204:	26 23       	and	r18, r22
     206:	fc 01       	movw	r30, r24
     208:	20 83       	st	Z, r18
     20a:	15 c0       	rjmp	.+42     	; 0x236 <DIO_SetPinDirection+0x1a4>
     20c:	81 e3       	ldi	r24, 0x31	; 49
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	21 e3       	ldi	r18, 0x31	; 49
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	f9 01       	movw	r30, r18
     216:	60 81       	ld	r22, Z
     218:	29 81       	ldd	r18, Y+1	; 0x01
     21a:	28 51       	subi	r18, 0x18	; 24
     21c:	42 2f       	mov	r20, r18
     21e:	50 e0       	ldi	r21, 0x00	; 0
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_SetPinDirection+0x198>
     226:	22 0f       	add	r18, r18
     228:	33 1f       	adc	r19, r19
     22a:	4a 95       	dec	r20
     22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_SetPinDirection+0x194>
     22e:	26 2b       	or	r18, r22
     230:	fc 01       	movw	r30, r24
     232:	20 83       	st	Z, r18
     234:	00 c0       	rjmp	.+0      	; 0x236 <DIO_SetPinDirection+0x1a4>
     236:	00 00       	nop
     238:	0f 90       	pop	r0
     23a:	0f 90       	pop	r0
     23c:	df 91       	pop	r29
     23e:	cf 91       	pop	r28
     240:	08 95       	ret

00000242 <vListInsertEnd>:
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	00 d0       	rcall	.+0      	; 0x248 <vListInsertEnd+0x6>
     248:	00 d0       	rcall	.+0      	; 0x24a <vListInsertEnd+0x8>
     24a:	00 d0       	rcall	.+0      	; 0x24c <vListInsertEnd+0xa>
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	9c 83       	std	Y+4, r25	; 0x04
     252:	8b 83       	std	Y+3, r24	; 0x03
     254:	7e 83       	std	Y+6, r23	; 0x06
     256:	6d 83       	std	Y+5, r22	; 0x05
     258:	8b 81       	ldd	r24, Y+3	; 0x03
     25a:	9c 81       	ldd	r25, Y+4	; 0x04
     25c:	fc 01       	movw	r30, r24
     25e:	81 81       	ldd	r24, Z+1	; 0x01
     260:	92 81       	ldd	r25, Z+2	; 0x02
     262:	9a 83       	std	Y+2, r25	; 0x02
     264:	89 83       	std	Y+1, r24	; 0x01
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	9a 81       	ldd	r25, Y+2	; 0x02
     26a:	fc 01       	movw	r30, r24
     26c:	22 81       	ldd	r18, Z+2	; 0x02
     26e:	33 81       	ldd	r19, Z+3	; 0x03
     270:	8d 81       	ldd	r24, Y+5	; 0x05
     272:	9e 81       	ldd	r25, Y+6	; 0x06
     274:	fc 01       	movw	r30, r24
     276:	33 83       	std	Z+3, r19	; 0x03
     278:	22 83       	std	Z+2, r18	; 0x02
     27a:	8b 81       	ldd	r24, Y+3	; 0x03
     27c:	9c 81       	ldd	r25, Y+4	; 0x04
     27e:	fc 01       	movw	r30, r24
     280:	21 81       	ldd	r18, Z+1	; 0x01
     282:	32 81       	ldd	r19, Z+2	; 0x02
     284:	8d 81       	ldd	r24, Y+5	; 0x05
     286:	9e 81       	ldd	r25, Y+6	; 0x06
     288:	fc 01       	movw	r30, r24
     28a:	35 83       	std	Z+5, r19	; 0x05
     28c:	24 83       	std	Z+4, r18	; 0x04
     28e:	89 81       	ldd	r24, Y+1	; 0x01
     290:	9a 81       	ldd	r25, Y+2	; 0x02
     292:	fc 01       	movw	r30, r24
     294:	82 81       	ldd	r24, Z+2	; 0x02
     296:	93 81       	ldd	r25, Z+3	; 0x03
     298:	2d 81       	ldd	r18, Y+5	; 0x05
     29a:	3e 81       	ldd	r19, Y+6	; 0x06
     29c:	fc 01       	movw	r30, r24
     29e:	35 83       	std	Z+5, r19	; 0x05
     2a0:	24 83       	std	Z+4, r18	; 0x04
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	9a 81       	ldd	r25, Y+2	; 0x02
     2a6:	2d 81       	ldd	r18, Y+5	; 0x05
     2a8:	3e 81       	ldd	r19, Y+6	; 0x06
     2aa:	fc 01       	movw	r30, r24
     2ac:	33 83       	std	Z+3, r19	; 0x03
     2ae:	22 83       	std	Z+2, r18	; 0x02
     2b0:	8b 81       	ldd	r24, Y+3	; 0x03
     2b2:	9c 81       	ldd	r25, Y+4	; 0x04
     2b4:	2d 81       	ldd	r18, Y+5	; 0x05
     2b6:	3e 81       	ldd	r19, Y+6	; 0x06
     2b8:	fc 01       	movw	r30, r24
     2ba:	32 83       	std	Z+2, r19	; 0x02
     2bc:	21 83       	std	Z+1, r18	; 0x01
     2be:	8d 81       	ldd	r24, Y+5	; 0x05
     2c0:	9e 81       	ldd	r25, Y+6	; 0x06
     2c2:	2b 81       	ldd	r18, Y+3	; 0x03
     2c4:	3c 81       	ldd	r19, Y+4	; 0x04
     2c6:	fc 01       	movw	r30, r24
     2c8:	31 87       	std	Z+9, r19	; 0x09
     2ca:	20 87       	std	Z+8, r18	; 0x08
     2cc:	8b 81       	ldd	r24, Y+3	; 0x03
     2ce:	9c 81       	ldd	r25, Y+4	; 0x04
     2d0:	fc 01       	movw	r30, r24
     2d2:	80 81       	ld	r24, Z
     2d4:	21 e0       	ldi	r18, 0x01	; 1
     2d6:	28 0f       	add	r18, r24
     2d8:	8b 81       	ldd	r24, Y+3	; 0x03
     2da:	9c 81       	ldd	r25, Y+4	; 0x04
     2dc:	fc 01       	movw	r30, r24
     2de:	20 83       	st	Z, r18
     2e0:	00 00       	nop
     2e2:	26 96       	adiw	r28, 0x06	; 6
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <vListRemove>:
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
     2f8:	00 d0       	rcall	.+0      	; 0x2fa <vListRemove+0x6>
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <vListRemove+0x8>
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	9c 83       	std	Y+4, r25	; 0x04
     302:	8b 83       	std	Y+3, r24	; 0x03
     304:	8b 81       	ldd	r24, Y+3	; 0x03
     306:	9c 81       	ldd	r25, Y+4	; 0x04
     308:	fc 01       	movw	r30, r24
     30a:	82 81       	ldd	r24, Z+2	; 0x02
     30c:	93 81       	ldd	r25, Z+3	; 0x03
     30e:	2b 81       	ldd	r18, Y+3	; 0x03
     310:	3c 81       	ldd	r19, Y+4	; 0x04
     312:	f9 01       	movw	r30, r18
     314:	24 81       	ldd	r18, Z+4	; 0x04
     316:	35 81       	ldd	r19, Z+5	; 0x05
     318:	fc 01       	movw	r30, r24
     31a:	35 83       	std	Z+5, r19	; 0x05
     31c:	24 83       	std	Z+4, r18	; 0x04
     31e:	8b 81       	ldd	r24, Y+3	; 0x03
     320:	9c 81       	ldd	r25, Y+4	; 0x04
     322:	fc 01       	movw	r30, r24
     324:	84 81       	ldd	r24, Z+4	; 0x04
     326:	95 81       	ldd	r25, Z+5	; 0x05
     328:	2b 81       	ldd	r18, Y+3	; 0x03
     32a:	3c 81       	ldd	r19, Y+4	; 0x04
     32c:	f9 01       	movw	r30, r18
     32e:	22 81       	ldd	r18, Z+2	; 0x02
     330:	33 81       	ldd	r19, Z+3	; 0x03
     332:	fc 01       	movw	r30, r24
     334:	33 83       	std	Z+3, r19	; 0x03
     336:	22 83       	std	Z+2, r18	; 0x02
     338:	8b 81       	ldd	r24, Y+3	; 0x03
     33a:	9c 81       	ldd	r25, Y+4	; 0x04
     33c:	fc 01       	movw	r30, r24
     33e:	80 85       	ldd	r24, Z+8	; 0x08
     340:	91 85       	ldd	r25, Z+9	; 0x09
     342:	9a 83       	std	Y+2, r25	; 0x02
     344:	89 83       	std	Y+1, r24	; 0x01
     346:	89 81       	ldd	r24, Y+1	; 0x01
     348:	9a 81       	ldd	r25, Y+2	; 0x02
     34a:	fc 01       	movw	r30, r24
     34c:	21 81       	ldd	r18, Z+1	; 0x01
     34e:	32 81       	ldd	r19, Z+2	; 0x02
     350:	8b 81       	ldd	r24, Y+3	; 0x03
     352:	9c 81       	ldd	r25, Y+4	; 0x04
     354:	28 17       	cp	r18, r24
     356:	39 07       	cpc	r19, r25
     358:	51 f4       	brne	.+20     	; 0x36e <vListRemove+0x7a>
     35a:	8b 81       	ldd	r24, Y+3	; 0x03
     35c:	9c 81       	ldd	r25, Y+4	; 0x04
     35e:	fc 01       	movw	r30, r24
     360:	24 81       	ldd	r18, Z+4	; 0x04
     362:	35 81       	ldd	r19, Z+5	; 0x05
     364:	89 81       	ldd	r24, Y+1	; 0x01
     366:	9a 81       	ldd	r25, Y+2	; 0x02
     368:	fc 01       	movw	r30, r24
     36a:	32 83       	std	Z+2, r19	; 0x02
     36c:	21 83       	std	Z+1, r18	; 0x01
     36e:	8b 81       	ldd	r24, Y+3	; 0x03
     370:	9c 81       	ldd	r25, Y+4	; 0x04
     372:	fc 01       	movw	r30, r24
     374:	11 86       	std	Z+9, r1	; 0x09
     376:	10 86       	std	Z+8, r1	; 0x08
     378:	89 81       	ldd	r24, Y+1	; 0x01
     37a:	9a 81       	ldd	r25, Y+2	; 0x02
     37c:	fc 01       	movw	r30, r24
     37e:	80 81       	ld	r24, Z
     380:	2f ef       	ldi	r18, 0xFF	; 255
     382:	28 0f       	add	r18, r24
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	9a 81       	ldd	r25, Y+2	; 0x02
     388:	fc 01       	movw	r30, r24
     38a:	20 83       	st	Z, r18
     38c:	00 00       	nop
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	df 91       	pop	r29
     398:	cf 91       	pop	r28
     39a:	08 95       	ret

0000039c <vPortYieldFromTick>:
     39c:	0f 92       	push	r0
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	0f 92       	push	r0
     3a4:	1f 92       	push	r1
     3a6:	11 24       	eor	r1, r1
     3a8:	2f 92       	push	r2
     3aa:	3f 92       	push	r3
     3ac:	4f 92       	push	r4
     3ae:	5f 92       	push	r5
     3b0:	6f 92       	push	r6
     3b2:	7f 92       	push	r7
     3b4:	8f 92       	push	r8
     3b6:	9f 92       	push	r9
     3b8:	af 92       	push	r10
     3ba:	bf 92       	push	r11
     3bc:	cf 92       	push	r12
     3be:	df 92       	push	r13
     3c0:	ef 92       	push	r14
     3c2:	ff 92       	push	r15
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	2f 93       	push	r18
     3ca:	3f 93       	push	r19
     3cc:	4f 93       	push	r20
     3ce:	5f 93       	push	r21
     3d0:	6f 93       	push	r22
     3d2:	7f 93       	push	r23
     3d4:	8f 93       	push	r24
     3d6:	9f 93       	push	r25
     3d8:	af 93       	push	r26
     3da:	bf 93       	push	r27
     3dc:	cf 93       	push	r28
     3de:	df 93       	push	r29
     3e0:	ef 93       	push	r30
     3e2:	ff 93       	push	r31
     3e4:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <__data_end>
     3e8:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <__data_end+0x1>
     3ec:	0d b6       	in	r0, 0x3d	; 61
     3ee:	0d 92       	st	X+, r0
     3f0:	0e b6       	in	r0, 0x3e	; 62
     3f2:	0d 92       	st	X+, r0
     3f4:	0e 94 2e 02 	call	0x45c	; 0x45c <vTaskIncrementTick>
     3f8:	0e 94 0d 03 	call	0x61a	; 0x61a <vTaskSwitchContext>
     3fc:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <__data_end>
     400:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <__data_end+0x1>
     404:	cd 91       	ld	r28, X+
     406:	cd bf       	out	0x3d, r28	; 61
     408:	dd 91       	ld	r29, X+
     40a:	de bf       	out	0x3e, r29	; 62
     40c:	ff 91       	pop	r31
     40e:	ef 91       	pop	r30
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	bf 91       	pop	r27
     416:	af 91       	pop	r26
     418:	9f 91       	pop	r25
     41a:	8f 91       	pop	r24
     41c:	7f 91       	pop	r23
     41e:	6f 91       	pop	r22
     420:	5f 91       	pop	r21
     422:	4f 91       	pop	r20
     424:	3f 91       	pop	r19
     426:	2f 91       	pop	r18
     428:	1f 91       	pop	r17
     42a:	0f 91       	pop	r16
     42c:	ff 90       	pop	r15
     42e:	ef 90       	pop	r14
     430:	df 90       	pop	r13
     432:	cf 90       	pop	r12
     434:	bf 90       	pop	r11
     436:	af 90       	pop	r10
     438:	9f 90       	pop	r9
     43a:	8f 90       	pop	r8
     43c:	7f 90       	pop	r7
     43e:	6f 90       	pop	r6
     440:	5f 90       	pop	r5
     442:	4f 90       	pop	r4
     444:	3f 90       	pop	r3
     446:	2f 90       	pop	r2
     448:	1f 90       	pop	r1
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	08 95       	ret
	...

00000454 <__vector_7>:
     454:	0e 94 ce 01 	call	0x39c	; 0x39c <vPortYieldFromTick>
     458:	18 95       	reti
	...

0000045c <vTaskIncrementTick>:
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	00 d0       	rcall	.+0      	; 0x462 <vTaskIncrementTick+0x6>
     462:	00 d0       	rcall	.+0      	; 0x464 <vTaskIncrementTick+0x8>
     464:	00 d0       	rcall	.+0      	; 0x466 <vTaskIncrementTick+0xa>
     466:	cd b7       	in	r28, 0x3d	; 61
     468:	de b7       	in	r29, 0x3e	; 62
     46a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <uxSchedulerSuspended>
     46e:	88 23       	and	r24, r24
     470:	09 f0       	breq	.+2      	; 0x474 <vTaskIncrementTick+0x18>
     472:	c3 c0       	rjmp	.+390    	; 0x5fa <vTaskIncrementTick+0x19e>
     474:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <xTickCount>
     478:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <xTickCount+0x1>
     47c:	01 96       	adiw	r24, 0x01	; 1
     47e:	90 93 8c 00 	sts	0x008C, r25	; 0x80008c <xTickCount+0x1>
     482:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <xTickCount>
     486:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <xTickCount>
     48a:	90 91 8c 00 	lds	r25, 0x008C	; 0x80008c <xTickCount+0x1>
     48e:	89 2b       	or	r24, r25
     490:	e9 f5       	brne	.+122    	; 0x50c <vTaskIncrementTick+0xb0>
     492:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <pxDelayedTaskList>
     496:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <pxDelayedTaskList+0x1>
     49a:	9a 83       	std	Y+2, r25	; 0x02
     49c:	89 83       	std	Y+1, r24	; 0x01
     49e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <pxOverflowDelayedTaskList>
     4a2:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <pxOverflowDelayedTaskList+0x1>
     4a6:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <pxDelayedTaskList+0x1>
     4aa:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <pxDelayedTaskList>
     4ae:	89 81       	ldd	r24, Y+1	; 0x01
     4b0:	9a 81       	ldd	r25, Y+2	; 0x02
     4b2:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <pxOverflowDelayedTaskList+0x1>
     4b6:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <pxOverflowDelayedTaskList>
     4ba:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <xNumOfOverflows>
     4be:	8f 5f       	subi	r24, 0xFF	; 255
     4c0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <xNumOfOverflows>
     4c4:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <pxDelayedTaskList>
     4c8:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <pxDelayedTaskList+0x1>
     4cc:	fc 01       	movw	r30, r24
     4ce:	80 81       	ld	r24, Z
     4d0:	88 23       	and	r24, r24
     4d2:	39 f4       	brne	.+14     	; 0x4e2 <vTaskIncrementTick+0x86>
     4d4:	8f ef       	ldi	r24, 0xFF	; 255
     4d6:	9f ef       	ldi	r25, 0xFF	; 255
     4d8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     4dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     4e0:	15 c0       	rjmp	.+42     	; 0x50c <vTaskIncrementTick+0xb0>
     4e2:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <pxDelayedTaskList>
     4e6:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <pxDelayedTaskList+0x1>
     4ea:	fc 01       	movw	r30, r24
     4ec:	85 81       	ldd	r24, Z+5	; 0x05
     4ee:	96 81       	ldd	r25, Z+6	; 0x06
     4f0:	fc 01       	movw	r30, r24
     4f2:	86 81       	ldd	r24, Z+6	; 0x06
     4f4:	97 81       	ldd	r25, Z+7	; 0x07
     4f6:	9c 83       	std	Y+4, r25	; 0x04
     4f8:	8b 83       	std	Y+3, r24	; 0x03
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	9c 81       	ldd	r25, Y+4	; 0x04
     4fe:	fc 01       	movw	r30, r24
     500:	82 81       	ldd	r24, Z+2	; 0x02
     502:	93 81       	ldd	r25, Z+3	; 0x03
     504:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     508:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     50c:	20 91 8b 00 	lds	r18, 0x008B	; 0x80008b <xTickCount>
     510:	30 91 8c 00 	lds	r19, 0x008C	; 0x80008c <xTickCount+0x1>
     514:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     518:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     51c:	28 17       	cp	r18, r24
     51e:	39 07       	cpc	r19, r25
     520:	08 f4       	brcc	.+2      	; 0x524 <vTaskIncrementTick+0xc8>
     522:	71 c0       	rjmp	.+226    	; 0x606 <vTaskIncrementTick+0x1aa>
     524:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <pxDelayedTaskList>
     528:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <pxDelayedTaskList+0x1>
     52c:	fc 01       	movw	r30, r24
     52e:	80 81       	ld	r24, Z
     530:	88 23       	and	r24, r24
     532:	39 f4       	brne	.+14     	; 0x542 <vTaskIncrementTick+0xe6>
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	9f ef       	ldi	r25, 0xFF	; 255
     538:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     53c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     540:	62 c0       	rjmp	.+196    	; 0x606 <vTaskIncrementTick+0x1aa>
     542:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <pxDelayedTaskList>
     546:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <pxDelayedTaskList+0x1>
     54a:	fc 01       	movw	r30, r24
     54c:	85 81       	ldd	r24, Z+5	; 0x05
     54e:	96 81       	ldd	r25, Z+6	; 0x06
     550:	fc 01       	movw	r30, r24
     552:	86 81       	ldd	r24, Z+6	; 0x06
     554:	97 81       	ldd	r25, Z+7	; 0x07
     556:	9c 83       	std	Y+4, r25	; 0x04
     558:	8b 83       	std	Y+3, r24	; 0x03
     55a:	8b 81       	ldd	r24, Y+3	; 0x03
     55c:	9c 81       	ldd	r25, Y+4	; 0x04
     55e:	fc 01       	movw	r30, r24
     560:	82 81       	ldd	r24, Z+2	; 0x02
     562:	93 81       	ldd	r25, Z+3	; 0x03
     564:	9e 83       	std	Y+6, r25	; 0x06
     566:	8d 83       	std	Y+5, r24	; 0x05
     568:	20 91 8b 00 	lds	r18, 0x008B	; 0x80008b <xTickCount>
     56c:	30 91 8c 00 	lds	r19, 0x008C	; 0x80008c <xTickCount+0x1>
     570:	8d 81       	ldd	r24, Y+5	; 0x05
     572:	9e 81       	ldd	r25, Y+6	; 0x06
     574:	28 17       	cp	r18, r24
     576:	39 07       	cpc	r19, r25
     578:	38 f4       	brcc	.+14     	; 0x588 <vTaskIncrementTick+0x12c>
     57a:	8d 81       	ldd	r24, Y+5	; 0x05
     57c:	9e 81       	ldd	r25, Y+6	; 0x06
     57e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     582:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     586:	3f c0       	rjmp	.+126    	; 0x606 <vTaskIncrementTick+0x1aa>
     588:	8b 81       	ldd	r24, Y+3	; 0x03
     58a:	9c 81       	ldd	r25, Y+4	; 0x04
     58c:	02 96       	adiw	r24, 0x02	; 2
     58e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <vListRemove>
     592:	8b 81       	ldd	r24, Y+3	; 0x03
     594:	9c 81       	ldd	r25, Y+4	; 0x04
     596:	fc 01       	movw	r30, r24
     598:	84 89       	ldd	r24, Z+20	; 0x14
     59a:	95 89       	ldd	r25, Z+21	; 0x15
     59c:	89 2b       	or	r24, r25
     59e:	29 f0       	breq	.+10     	; 0x5aa <vTaskIncrementTick+0x14e>
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	9c 81       	ldd	r25, Y+4	; 0x04
     5a4:	0c 96       	adiw	r24, 0x0c	; 12
     5a6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <vListRemove>
     5aa:	8b 81       	ldd	r24, Y+3	; 0x03
     5ac:	9c 81       	ldd	r25, Y+4	; 0x04
     5ae:	fc 01       	movw	r30, r24
     5b0:	96 89       	ldd	r25, Z+22	; 0x16
     5b2:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <uxTopReadyPriority>
     5b6:	89 17       	cp	r24, r25
     5b8:	30 f4       	brcc	.+12     	; 0x5c6 <vTaskIncrementTick+0x16a>
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	9c 81       	ldd	r25, Y+4	; 0x04
     5be:	fc 01       	movw	r30, r24
     5c0:	86 89       	ldd	r24, Z+22	; 0x16
     5c2:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <uxTopReadyPriority>
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ca:	ac 01       	movw	r20, r24
     5cc:	4e 5f       	subi	r20, 0xFE	; 254
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	8b 81       	ldd	r24, Y+3	; 0x03
     5d2:	9c 81       	ldd	r25, Y+4	; 0x04
     5d4:	fc 01       	movw	r30, r24
     5d6:	86 89       	ldd	r24, Z+22	; 0x16
     5d8:	28 2f       	mov	r18, r24
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	c9 01       	movw	r24, r18
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	82 0f       	add	r24, r18
     5ec:	93 1f       	adc	r25, r19
     5ee:	84 59       	subi	r24, 0x94	; 148
     5f0:	9f 4f       	sbci	r25, 0xFF	; 255
     5f2:	ba 01       	movw	r22, r20
     5f4:	0e 94 21 01 	call	0x242	; 0x242 <vListInsertEnd>
     5f8:	95 cf       	rjmp	.-214    	; 0x524 <vTaskIncrementTick+0xc8>
     5fa:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <uxMissedTicks>
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <uxMissedTicks>
     604:	00 c0       	rjmp	.+0      	; 0x606 <vTaskIncrementTick+0x1aa>
     606:	00 00       	nop
     608:	26 96       	adiw	r28, 0x06	; 6
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	08 95       	ret

0000061a <vTaskSwitchContext>:
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	00 d0       	rcall	.+0      	; 0x620 <vTaskSwitchContext+0x6>
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <uxSchedulerSuspended>
     628:	88 23       	and	r24, r24
     62a:	49 f0       	breq	.+18     	; 0x63e <vTaskSwitchContext+0x24>
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <xMissedYield>
     632:	5a c0       	rjmp	.+180    	; 0x6e8 <vTaskSwitchContext+0xce>
     634:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <uxTopReadyPriority>
     638:	81 50       	subi	r24, 0x01	; 1
     63a:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <uxTopReadyPriority>
     63e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <uxTopReadyPriority>
     642:	28 2f       	mov	r18, r24
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	c9 01       	movw	r24, r18
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	88 0f       	add	r24, r24
     64e:	99 1f       	adc	r25, r25
     650:	88 0f       	add	r24, r24
     652:	99 1f       	adc	r25, r25
     654:	82 0f       	add	r24, r18
     656:	93 1f       	adc	r25, r19
     658:	84 59       	subi	r24, 0x94	; 148
     65a:	9f 4f       	sbci	r25, 0xFF	; 255
     65c:	fc 01       	movw	r30, r24
     65e:	80 81       	ld	r24, Z
     660:	88 23       	and	r24, r24
     662:	41 f3       	breq	.-48     	; 0x634 <vTaskSwitchContext+0x1a>
     664:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <uxTopReadyPriority>
     668:	28 2f       	mov	r18, r24
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	c9 01       	movw	r24, r18
     66e:	88 0f       	add	r24, r24
     670:	99 1f       	adc	r25, r25
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	82 0f       	add	r24, r18
     67c:	93 1f       	adc	r25, r19
     67e:	84 59       	subi	r24, 0x94	; 148
     680:	9f 4f       	sbci	r25, 0xFF	; 255
     682:	9a 83       	std	Y+2, r25	; 0x02
     684:	89 83       	std	Y+1, r24	; 0x01
     686:	89 81       	ldd	r24, Y+1	; 0x01
     688:	9a 81       	ldd	r25, Y+2	; 0x02
     68a:	fc 01       	movw	r30, r24
     68c:	81 81       	ldd	r24, Z+1	; 0x01
     68e:	92 81       	ldd	r25, Z+2	; 0x02
     690:	fc 01       	movw	r30, r24
     692:	22 81       	ldd	r18, Z+2	; 0x02
     694:	33 81       	ldd	r19, Z+3	; 0x03
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	9a 81       	ldd	r25, Y+2	; 0x02
     69a:	fc 01       	movw	r30, r24
     69c:	32 83       	std	Z+2, r19	; 0x02
     69e:	21 83       	std	Z+1, r18	; 0x01
     6a0:	89 81       	ldd	r24, Y+1	; 0x01
     6a2:	9a 81       	ldd	r25, Y+2	; 0x02
     6a4:	fc 01       	movw	r30, r24
     6a6:	21 81       	ldd	r18, Z+1	; 0x01
     6a8:	32 81       	ldd	r19, Z+2	; 0x02
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	03 96       	adiw	r24, 0x03	; 3
     6b0:	28 17       	cp	r18, r24
     6b2:	39 07       	cpc	r19, r25
     6b4:	69 f4       	brne	.+26     	; 0x6d0 <vTaskSwitchContext+0xb6>
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	fc 01       	movw	r30, r24
     6bc:	81 81       	ldd	r24, Z+1	; 0x01
     6be:	92 81       	ldd	r25, Z+2	; 0x02
     6c0:	fc 01       	movw	r30, r24
     6c2:	22 81       	ldd	r18, Z+2	; 0x02
     6c4:	33 81       	ldd	r19, Z+3	; 0x03
     6c6:	89 81       	ldd	r24, Y+1	; 0x01
     6c8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ca:	fc 01       	movw	r30, r24
     6cc:	32 83       	std	Z+2, r19	; 0x02
     6ce:	21 83       	std	Z+1, r18	; 0x01
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	9a 81       	ldd	r25, Y+2	; 0x02
     6d4:	fc 01       	movw	r30, r24
     6d6:	81 81       	ldd	r24, Z+1	; 0x01
     6d8:	92 81       	ldd	r25, Z+2	; 0x02
     6da:	fc 01       	movw	r30, r24
     6dc:	86 81       	ldd	r24, Z+6	; 0x06
     6de:	97 81       	ldd	r25, Z+7	; 0x07
     6e0:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x1>
     6e4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
     6e8:	00 00       	nop
     6ea:	0f 90       	pop	r0
     6ec:	0f 90       	pop	r0
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	08 95       	ret

000006f4 <LCD_init>:
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
     6f8:	cd b7       	in	r28, 0x3d	; 61
     6fa:	de b7       	in	r29, 0x3e	; 62
     6fc:	8a e3       	ldi	r24, 0x3A	; 58
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	2a e3       	ldi	r18, 0x3A	; 58
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	f9 01       	movw	r30, r18
     706:	20 81       	ld	r18, Z
     708:	2e 60       	ori	r18, 0x0E	; 14
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
     70e:	8a e3       	ldi	r24, 0x3A	; 58
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	2a e3       	ldi	r18, 0x3A	; 58
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	f9 01       	movw	r30, r18
     718:	20 81       	ld	r18, Z
     71a:	20 6f       	ori	r18, 0xF0	; 240
     71c:	fc 01       	movw	r30, r24
     71e:	20 83       	st	Z, r18
     720:	83 e3       	ldi	r24, 0x33	; 51
     722:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_sendCommand>
     726:	82 e3       	ldi	r24, 0x32	; 50
     728:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_sendCommand>
     72c:	88 e2       	ldi	r24, 0x28	; 40
     72e:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_sendCommand>
     732:	8e e0       	ldi	r24, 0x0E	; 14
     734:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_sendCommand>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_sendCommand>
     73e:	86 e0       	ldi	r24, 0x06	; 6
     740:	0e 94 a6 03 	call	0x74c	; 0x74c <LCD_sendCommand>
     744:	00 00       	nop
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <LCD_sendCommand>:
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	c7 54       	subi	r28, 0x47	; 71
     75a:	d1 09       	sbc	r29, r1
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	9e 01       	movw	r18, r28
     768:	29 5b       	subi	r18, 0xB9	; 185
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	f9 01       	movw	r30, r18
     76e:	80 83       	st	Z, r24
     770:	8b e3       	ldi	r24, 0x3B	; 59
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	2b e3       	ldi	r18, 0x3B	; 59
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	f9 01       	movw	r30, r18
     77a:	20 81       	ld	r18, Z
     77c:	2d 7f       	andi	r18, 0xFD	; 253
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
     782:	8b e3       	ldi	r24, 0x3B	; 59
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	2b e3       	ldi	r18, 0x3B	; 59
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	2b 7f       	andi	r18, 0xFB	; 251
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	a0 e8       	ldi	r26, 0x80	; 128
     79a:	bf e3       	ldi	r27, 0x3F	; 63
     79c:	89 83       	std	Y+1, r24	; 0x01
     79e:	9a 83       	std	Y+2, r25	; 0x02
     7a0:	ab 83       	std	Y+3, r26	; 0x03
     7a2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7a4:	20 e0       	ldi	r18, 0x00	; 0
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	4a e7       	ldi	r20, 0x7A	; 122
     7aa:	53 e4       	ldi	r21, 0x43	; 67
     7ac:	69 81       	ldd	r22, Y+1	; 0x01
     7ae:	7a 81       	ldd	r23, Y+2	; 0x02
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	9c 81       	ldd	r25, Y+4	; 0x04
     7b4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     7b8:	dc 01       	movw	r26, r24
     7ba:	cb 01       	movw	r24, r22
     7bc:	9e 01       	movw	r18, r28
     7be:	23 5c       	subi	r18, 0xC3	; 195
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	f9 01       	movw	r30, r18
     7c4:	80 83       	st	Z, r24
     7c6:	91 83       	std	Z+1, r25	; 0x01
     7c8:	a2 83       	std	Z+2, r26	; 0x02
     7ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e8       	ldi	r20, 0x80	; 128
     7d2:	5f e3       	ldi	r21, 0x3F	; 63
     7d4:	ce 01       	movw	r24, r28
     7d6:	cd 96       	adiw	r24, 0x3d	; 61
     7d8:	fc 01       	movw	r30, r24
     7da:	60 81       	ld	r22, Z
     7dc:	71 81       	ldd	r23, Z+1	; 0x01
     7de:	82 81       	ldd	r24, Z+2	; 0x02
     7e0:	93 81       	ldd	r25, Z+3	; 0x03
     7e2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__cmpsf2>
     7e6:	88 23       	and	r24, r24
     7e8:	4c f4       	brge	.+18     	; 0x7fc <LCD_sendCommand+0xb0>
		__ticks = 1;
     7ea:	ce 01       	movw	r24, r28
     7ec:	8f 5b       	subi	r24, 0xBF	; 191
     7ee:	9f 4f       	sbci	r25, 0xFF	; 255
     7f0:	21 e0       	ldi	r18, 0x01	; 1
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	fc 01       	movw	r30, r24
     7f6:	31 83       	std	Z+1, r19	; 0x01
     7f8:	20 83       	st	Z, r18
     7fa:	67 c0       	rjmp	.+206    	; 0x8ca <__stack+0x6b>
	else if (__tmp > 65535)
     7fc:	20 e0       	ldi	r18, 0x00	; 0
     7fe:	3f ef       	ldi	r19, 0xFF	; 255
     800:	4f e7       	ldi	r20, 0x7F	; 127
     802:	57 e4       	ldi	r21, 0x47	; 71
     804:	ce 01       	movw	r24, r28
     806:	cd 96       	adiw	r24, 0x3d	; 61
     808:	fc 01       	movw	r30, r24
     80a:	60 81       	ld	r22, Z
     80c:	71 81       	ldd	r23, Z+1	; 0x01
     80e:	82 81       	ldd	r24, Z+2	; 0x02
     810:	93 81       	ldd	r25, Z+3	; 0x03
     812:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__gesf2>
     816:	18 16       	cp	r1, r24
     818:	0c f0       	brlt	.+2      	; 0x81c <LCD_sendCommand+0xd0>
     81a:	46 c0       	rjmp	.+140    	; 0x8a8 <__stack+0x49>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	40 e2       	ldi	r20, 0x20	; 32
     822:	51 e4       	ldi	r21, 0x41	; 65
     824:	69 81       	ldd	r22, Y+1	; 0x01
     826:	7a 81       	ldd	r23, Y+2	; 0x02
     828:	8b 81       	ldd	r24, Y+3	; 0x03
     82a:	9c 81       	ldd	r25, Y+4	; 0x04
     82c:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	8e 01       	movw	r16, r28
     836:	0f 5b       	subi	r16, 0xBF	; 191
     838:	1f 4f       	sbci	r17, 0xFF	; 255
     83a:	bc 01       	movw	r22, r24
     83c:	cd 01       	movw	r24, r26
     83e:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     842:	dc 01       	movw	r26, r24
     844:	cb 01       	movw	r24, r22
     846:	f8 01       	movw	r30, r16
     848:	91 83       	std	Z+1, r25	; 0x01
     84a:	80 83       	st	Z, r24
     84c:	24 c0       	rjmp	.+72     	; 0x896 <__stack+0x37>
     84e:	ce 01       	movw	r24, r28
     850:	8d 5b       	subi	r24, 0xBD	; 189
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	29 e1       	ldi	r18, 0x19	; 25
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	fc 01       	movw	r30, r24
     85a:	31 83       	std	Z+1, r19	; 0x01
     85c:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     85e:	ce 01       	movw	r24, r28
     860:	8d 5b       	subi	r24, 0xBD	; 189
     862:	9f 4f       	sbci	r25, 0xFF	; 255
     864:	fc 01       	movw	r30, r24
     866:	80 81       	ld	r24, Z
     868:	91 81       	ldd	r25, Z+1	; 0x01
     86a:	01 97       	sbiw	r24, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <__stack+0xb>
     86e:	9e 01       	movw	r18, r28
     870:	2d 5b       	subi	r18, 0xBD	; 189
     872:	3f 4f       	sbci	r19, 0xFF	; 255
     874:	f9 01       	movw	r30, r18
     876:	91 83       	std	Z+1, r25	; 0x01
     878:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     87a:	ce 01       	movw	r24, r28
     87c:	8f 5b       	subi	r24, 0xBF	; 191
     87e:	9f 4f       	sbci	r25, 0xFF	; 255
     880:	9e 01       	movw	r18, r28
     882:	2f 5b       	subi	r18, 0xBF	; 191
     884:	3f 4f       	sbci	r19, 0xFF	; 255
     886:	f9 01       	movw	r30, r18
     888:	20 81       	ld	r18, Z
     88a:	31 81       	ldd	r19, Z+1	; 0x01
     88c:	21 50       	subi	r18, 0x01	; 1
     88e:	31 09       	sbc	r19, r1
     890:	fc 01       	movw	r30, r24
     892:	31 83       	std	Z+1, r19	; 0x01
     894:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     896:	ce 01       	movw	r24, r28
     898:	8f 5b       	subi	r24, 0xBF	; 191
     89a:	9f 4f       	sbci	r25, 0xFF	; 255
     89c:	fc 01       	movw	r30, r24
     89e:	80 81       	ld	r24, Z
     8a0:	91 81       	ldd	r25, Z+1	; 0x01
     8a2:	89 2b       	or	r24, r25
     8a4:	a1 f6       	brne	.-88     	; 0x84e <LCD_sendCommand+0x102>
     8a6:	2b c0       	rjmp	.+86     	; 0x8fe <__stack+0x9f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8a8:	8e 01       	movw	r16, r28
     8aa:	0f 5b       	subi	r16, 0xBF	; 191
     8ac:	1f 4f       	sbci	r17, 0xFF	; 255
     8ae:	ce 01       	movw	r24, r28
     8b0:	cd 96       	adiw	r24, 0x3d	; 61
     8b2:	fc 01       	movw	r30, r24
     8b4:	60 81       	ld	r22, Z
     8b6:	71 81       	ldd	r23, Z+1	; 0x01
     8b8:	82 81       	ldd	r24, Z+2	; 0x02
     8ba:	93 81       	ldd	r25, Z+3	; 0x03
     8bc:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     8c0:	dc 01       	movw	r26, r24
     8c2:	cb 01       	movw	r24, r22
     8c4:	f8 01       	movw	r30, r16
     8c6:	91 83       	std	Z+1, r25	; 0x01
     8c8:	80 83       	st	Z, r24
     8ca:	ce 01       	movw	r24, r28
     8cc:	8b 5b       	subi	r24, 0xBB	; 187
     8ce:	9f 4f       	sbci	r25, 0xFF	; 255
     8d0:	9e 01       	movw	r18, r28
     8d2:	2f 5b       	subi	r18, 0xBF	; 191
     8d4:	3f 4f       	sbci	r19, 0xFF	; 255
     8d6:	f9 01       	movw	r30, r18
     8d8:	20 81       	ld	r18, Z
     8da:	31 81       	ldd	r19, Z+1	; 0x01
     8dc:	fc 01       	movw	r30, r24
     8de:	31 83       	std	Z+1, r19	; 0x01
     8e0:	20 83       	st	Z, r18
     8e2:	ce 01       	movw	r24, r28
     8e4:	8b 5b       	subi	r24, 0xBB	; 187
     8e6:	9f 4f       	sbci	r25, 0xFF	; 255
     8e8:	fc 01       	movw	r30, r24
     8ea:	80 81       	ld	r24, Z
     8ec:	91 81       	ldd	r25, Z+1	; 0x01
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	f1 f7       	brne	.-4      	; 0x8ee <__stack+0x8f>
     8f2:	9e 01       	movw	r18, r28
     8f4:	2b 5b       	subi	r18, 0xBB	; 187
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	f9 01       	movw	r30, r18
     8fa:	91 83       	std	Z+1, r25	; 0x01
     8fc:	80 83       	st	Z, r24
     8fe:	8b e3       	ldi	r24, 0x3B	; 59
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	2b e3       	ldi	r18, 0x3B	; 59
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	f9 01       	movw	r30, r18
     908:	20 81       	ld	r18, Z
     90a:	42 2f       	mov	r20, r18
     90c:	4f 70       	andi	r20, 0x0F	; 15
     90e:	9e 01       	movw	r18, r28
     910:	29 5b       	subi	r18, 0xB9	; 185
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	f9 01       	movw	r30, r18
     916:	20 81       	ld	r18, Z
     918:	20 7f       	andi	r18, 0xF0	; 240
     91a:	24 2b       	or	r18, r20
     91c:	fc 01       	movw	r30, r24
     91e:	20 83       	st	Z, r18
     920:	8b e3       	ldi	r24, 0x3B	; 59
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	2b e3       	ldi	r18, 0x3B	; 59
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	f9 01       	movw	r30, r18
     92a:	20 81       	ld	r18, Z
     92c:	28 60       	ori	r18, 0x08	; 8
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	a0 e8       	ldi	r26, 0x80	; 128
     938:	bf e3       	ldi	r27, 0x3F	; 63
     93a:	8d 83       	std	Y+5, r24	; 0x05
     93c:	9e 83       	std	Y+6, r25	; 0x06
     93e:	af 83       	std	Y+7, r26	; 0x07
     940:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     942:	20 e0       	ldi	r18, 0x00	; 0
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	4a e7       	ldi	r20, 0x7A	; 122
     948:	53 e4       	ldi	r21, 0x43	; 67
     94a:	6d 81       	ldd	r22, Y+5	; 0x05
     94c:	7e 81       	ldd	r23, Y+6	; 0x06
     94e:	8f 81       	ldd	r24, Y+7	; 0x07
     950:	98 85       	ldd	r25, Y+8	; 0x08
     952:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	8b ab       	std	Y+51, r24	; 0x33
     95c:	9c ab       	std	Y+52, r25	; 0x34
     95e:	ad ab       	std	Y+53, r26	; 0x35
     960:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e8       	ldi	r20, 0x80	; 128
     968:	5f e3       	ldi	r21, 0x3F	; 63
     96a:	6b a9       	ldd	r22, Y+51	; 0x33
     96c:	7c a9       	ldd	r23, Y+52	; 0x34
     96e:	8d a9       	ldd	r24, Y+53	; 0x35
     970:	9e a9       	ldd	r25, Y+54	; 0x36
     972:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__cmpsf2>
     976:	88 23       	and	r24, r24
     978:	2c f4       	brge	.+10     	; 0x984 <__stack+0x125>
		__ticks = 1;
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	98 af       	std	Y+56, r25	; 0x38
     980:	8f ab       	std	Y+55, r24	; 0x37
     982:	3f c0       	rjmp	.+126    	; 0xa02 <__stack+0x1a3>
	else if (__tmp > 65535)
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	3f ef       	ldi	r19, 0xFF	; 255
     988:	4f e7       	ldi	r20, 0x7F	; 127
     98a:	57 e4       	ldi	r21, 0x47	; 71
     98c:	6b a9       	ldd	r22, Y+51	; 0x33
     98e:	7c a9       	ldd	r23, Y+52	; 0x34
     990:	8d a9       	ldd	r24, Y+53	; 0x35
     992:	9e a9       	ldd	r25, Y+54	; 0x36
     994:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__gesf2>
     998:	18 16       	cp	r1, r24
     99a:	4c f5       	brge	.+82     	; 0x9ee <__stack+0x18f>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	40 e2       	ldi	r20, 0x20	; 32
     9a2:	51 e4       	ldi	r21, 0x41	; 65
     9a4:	6d 81       	ldd	r22, Y+5	; 0x05
     9a6:	7e 81       	ldd	r23, Y+6	; 0x06
     9a8:	8f 81       	ldd	r24, Y+7	; 0x07
     9aa:	98 85       	ldd	r25, Y+8	; 0x08
     9ac:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     9b0:	dc 01       	movw	r26, r24
     9b2:	cb 01       	movw	r24, r22
     9b4:	bc 01       	movw	r22, r24
     9b6:	cd 01       	movw	r24, r26
     9b8:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     9bc:	dc 01       	movw	r26, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	98 af       	std	Y+56, r25	; 0x38
     9c2:	8f ab       	std	Y+55, r24	; 0x37
     9c4:	0f c0       	rjmp	.+30     	; 0x9e4 <__stack+0x185>
     9c6:	89 e1       	ldi	r24, 0x19	; 25
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	9a af       	std	Y+58, r25	; 0x3a
     9cc:	89 af       	std	Y+57, r24	; 0x39
     9ce:	89 ad       	ldd	r24, Y+57	; 0x39
     9d0:	9a ad       	ldd	r25, Y+58	; 0x3a
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	f1 f7       	brne	.-4      	; 0x9d2 <__stack+0x173>
     9d6:	9a af       	std	Y+58, r25	; 0x3a
     9d8:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9da:	8f a9       	ldd	r24, Y+55	; 0x37
     9dc:	98 ad       	ldd	r25, Y+56	; 0x38
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	98 af       	std	Y+56, r25	; 0x38
     9e2:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9e4:	8f a9       	ldd	r24, Y+55	; 0x37
     9e6:	98 ad       	ldd	r25, Y+56	; 0x38
     9e8:	89 2b       	or	r24, r25
     9ea:	69 f7       	brne	.-38     	; 0x9c6 <__stack+0x167>
     9ec:	14 c0       	rjmp	.+40     	; 0xa16 <__stack+0x1b7>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9ee:	6b a9       	ldd	r22, Y+51	; 0x33
     9f0:	7c a9       	ldd	r23, Y+52	; 0x34
     9f2:	8d a9       	ldd	r24, Y+53	; 0x35
     9f4:	9e a9       	ldd	r25, Y+54	; 0x36
     9f6:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     9fa:	dc 01       	movw	r26, r24
     9fc:	cb 01       	movw	r24, r22
     9fe:	98 af       	std	Y+56, r25	; 0x38
     a00:	8f ab       	std	Y+55, r24	; 0x37
     a02:	8f a9       	ldd	r24, Y+55	; 0x37
     a04:	98 ad       	ldd	r25, Y+56	; 0x38
     a06:	9c af       	std	Y+60, r25	; 0x3c
     a08:	8b af       	std	Y+59, r24	; 0x3b
     a0a:	8b ad       	ldd	r24, Y+59	; 0x3b
     a0c:	9c ad       	ldd	r25, Y+60	; 0x3c
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <__stack+0x1af>
     a12:	9c af       	std	Y+60, r25	; 0x3c
     a14:	8b af       	std	Y+59, r24	; 0x3b
     a16:	8b e3       	ldi	r24, 0x3B	; 59
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	2b e3       	ldi	r18, 0x3B	; 59
     a1c:	30 e0       	ldi	r19, 0x00	; 0
     a1e:	f9 01       	movw	r30, r18
     a20:	20 81       	ld	r18, Z
     a22:	27 7f       	andi	r18, 0xF7	; 247
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	a0 e8       	ldi	r26, 0x80	; 128
     a2e:	bf e3       	ldi	r27, 0x3F	; 63
     a30:	89 87       	std	Y+9, r24	; 0x09
     a32:	9a 87       	std	Y+10, r25	; 0x0a
     a34:	ab 87       	std	Y+11, r26	; 0x0b
     a36:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	4a e7       	ldi	r20, 0x7A	; 122
     a3e:	53 e4       	ldi	r21, 0x43	; 67
     a40:	69 85       	ldd	r22, Y+9	; 0x09
     a42:	7a 85       	ldd	r23, Y+10	; 0x0a
     a44:	8b 85       	ldd	r24, Y+11	; 0x0b
     a46:	9c 85       	ldd	r25, Y+12	; 0x0c
     a48:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     a4c:	dc 01       	movw	r26, r24
     a4e:	cb 01       	movw	r24, r22
     a50:	89 a7       	std	Y+41, r24	; 0x29
     a52:	9a a7       	std	Y+42, r25	; 0x2a
     a54:	ab a7       	std	Y+43, r26	; 0x2b
     a56:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e8       	ldi	r20, 0x80	; 128
     a5e:	5f e3       	ldi	r21, 0x3F	; 63
     a60:	69 a5       	ldd	r22, Y+41	; 0x29
     a62:	7a a5       	ldd	r23, Y+42	; 0x2a
     a64:	8b a5       	ldd	r24, Y+43	; 0x2b
     a66:	9c a5       	ldd	r25, Y+44	; 0x2c
     a68:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__cmpsf2>
     a6c:	88 23       	and	r24, r24
     a6e:	2c f4       	brge	.+10     	; 0xa7a <__stack+0x21b>
		__ticks = 1;
     a70:	81 e0       	ldi	r24, 0x01	; 1
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	9e a7       	std	Y+46, r25	; 0x2e
     a76:	8d a7       	std	Y+45, r24	; 0x2d
     a78:	3f c0       	rjmp	.+126    	; 0xaf8 <__stack+0x299>
	else if (__tmp > 65535)
     a7a:	20 e0       	ldi	r18, 0x00	; 0
     a7c:	3f ef       	ldi	r19, 0xFF	; 255
     a7e:	4f e7       	ldi	r20, 0x7F	; 127
     a80:	57 e4       	ldi	r21, 0x47	; 71
     a82:	69 a5       	ldd	r22, Y+41	; 0x29
     a84:	7a a5       	ldd	r23, Y+42	; 0x2a
     a86:	8b a5       	ldd	r24, Y+43	; 0x2b
     a88:	9c a5       	ldd	r25, Y+44	; 0x2c
     a8a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__gesf2>
     a8e:	18 16       	cp	r1, r24
     a90:	4c f5       	brge	.+82     	; 0xae4 <__stack+0x285>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	40 e2       	ldi	r20, 0x20	; 32
     a98:	51 e4       	ldi	r21, 0x41	; 65
     a9a:	69 85       	ldd	r22, Y+9	; 0x09
     a9c:	7a 85       	ldd	r23, Y+10	; 0x0a
     a9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     aa0:	9c 85       	ldd	r25, Y+12	; 0x0c
     aa2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     aa6:	dc 01       	movw	r26, r24
     aa8:	cb 01       	movw	r24, r22
     aaa:	bc 01       	movw	r22, r24
     aac:	cd 01       	movw	r24, r26
     aae:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     ab2:	dc 01       	movw	r26, r24
     ab4:	cb 01       	movw	r24, r22
     ab6:	9e a7       	std	Y+46, r25	; 0x2e
     ab8:	8d a7       	std	Y+45, r24	; 0x2d
     aba:	0f c0       	rjmp	.+30     	; 0xada <__stack+0x27b>
     abc:	89 e1       	ldi	r24, 0x19	; 25
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	98 ab       	std	Y+48, r25	; 0x30
     ac2:	8f a7       	std	Y+47, r24	; 0x2f
     ac4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ac6:	98 a9       	ldd	r25, Y+48	; 0x30
     ac8:	01 97       	sbiw	r24, 0x01	; 1
     aca:	f1 f7       	brne	.-4      	; 0xac8 <__stack+0x269>
     acc:	98 ab       	std	Y+48, r25	; 0x30
     ace:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ad0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ad2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ad4:	01 97       	sbiw	r24, 0x01	; 1
     ad6:	9e a7       	std	Y+46, r25	; 0x2e
     ad8:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ada:	8d a5       	ldd	r24, Y+45	; 0x2d
     adc:	9e a5       	ldd	r25, Y+46	; 0x2e
     ade:	89 2b       	or	r24, r25
     ae0:	69 f7       	brne	.-38     	; 0xabc <__stack+0x25d>
     ae2:	14 c0       	rjmp	.+40     	; 0xb0c <__stack+0x2ad>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ae4:	69 a5       	ldd	r22, Y+41	; 0x29
     ae6:	7a a5       	ldd	r23, Y+42	; 0x2a
     ae8:	8b a5       	ldd	r24, Y+43	; 0x2b
     aea:	9c a5       	ldd	r25, Y+44	; 0x2c
     aec:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     af0:	dc 01       	movw	r26, r24
     af2:	cb 01       	movw	r24, r22
     af4:	9e a7       	std	Y+46, r25	; 0x2e
     af6:	8d a7       	std	Y+45, r24	; 0x2d
     af8:	8d a5       	ldd	r24, Y+45	; 0x2d
     afa:	9e a5       	ldd	r25, Y+46	; 0x2e
     afc:	9a ab       	std	Y+50, r25	; 0x32
     afe:	89 ab       	std	Y+49, r24	; 0x31
     b00:	89 a9       	ldd	r24, Y+49	; 0x31
     b02:	9a a9       	ldd	r25, Y+50	; 0x32
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	f1 f7       	brne	.-4      	; 0xb04 <__stack+0x2a5>
     b08:	9a ab       	std	Y+50, r25	; 0x32
     b0a:	89 ab       	std	Y+49, r24	; 0x31
     b0c:	8b e3       	ldi	r24, 0x3B	; 59
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	2b e3       	ldi	r18, 0x3B	; 59
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	f9 01       	movw	r30, r18
     b16:	20 81       	ld	r18, Z
     b18:	42 2f       	mov	r20, r18
     b1a:	4f 70       	andi	r20, 0x0F	; 15
     b1c:	9e 01       	movw	r18, r28
     b1e:	29 5b       	subi	r18, 0xB9	; 185
     b20:	3f 4f       	sbci	r19, 0xFF	; 255
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	22 2f       	mov	r18, r18
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	22 95       	swap	r18
     b2c:	32 95       	swap	r19
     b2e:	30 7f       	andi	r19, 0xF0	; 240
     b30:	32 27       	eor	r19, r18
     b32:	20 7f       	andi	r18, 0xF0	; 240
     b34:	32 27       	eor	r19, r18
     b36:	24 2b       	or	r18, r20
     b38:	fc 01       	movw	r30, r24
     b3a:	20 83       	st	Z, r18
     b3c:	8b e3       	ldi	r24, 0x3B	; 59
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	2b e3       	ldi	r18, 0x3B	; 59
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	f9 01       	movw	r30, r18
     b46:	20 81       	ld	r18, Z
     b48:	28 60       	ori	r18, 0x08	; 8
     b4a:	fc 01       	movw	r30, r24
     b4c:	20 83       	st	Z, r18
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	a0 e8       	ldi	r26, 0x80	; 128
     b54:	bf e3       	ldi	r27, 0x3F	; 63
     b56:	8d 87       	std	Y+13, r24	; 0x0d
     b58:	9e 87       	std	Y+14, r25	; 0x0e
     b5a:	af 87       	std	Y+15, r26	; 0x0f
     b5c:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	4a e7       	ldi	r20, 0x7A	; 122
     b64:	53 e4       	ldi	r21, 0x43	; 67
     b66:	6d 85       	ldd	r22, Y+13	; 0x0d
     b68:	7e 85       	ldd	r23, Y+14	; 0x0e
     b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b6c:	98 89       	ldd	r25, Y+16	; 0x10
     b6e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     b72:	dc 01       	movw	r26, r24
     b74:	cb 01       	movw	r24, r22
     b76:	8f 8f       	std	Y+31, r24	; 0x1f
     b78:	98 a3       	std	Y+32, r25	; 0x20
     b7a:	a9 a3       	std	Y+33, r26	; 0x21
     b7c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e8       	ldi	r20, 0x80	; 128
     b84:	5f e3       	ldi	r21, 0x3F	; 63
     b86:	6f 8d       	ldd	r22, Y+31	; 0x1f
     b88:	78 a1       	ldd	r23, Y+32	; 0x20
     b8a:	89 a1       	ldd	r24, Y+33	; 0x21
     b8c:	9a a1       	ldd	r25, Y+34	; 0x22
     b8e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__cmpsf2>
     b92:	88 23       	and	r24, r24
     b94:	2c f4       	brge	.+10     	; 0xba0 <__stack+0x341>
		__ticks = 1;
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	9c a3       	std	Y+36, r25	; 0x24
     b9c:	8b a3       	std	Y+35, r24	; 0x23
     b9e:	3f c0       	rjmp	.+126    	; 0xc1e <__stack+0x3bf>
	else if (__tmp > 65535)
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	4f e7       	ldi	r20, 0x7F	; 127
     ba6:	57 e4       	ldi	r21, 0x47	; 71
     ba8:	6f 8d       	ldd	r22, Y+31	; 0x1f
     baa:	78 a1       	ldd	r23, Y+32	; 0x20
     bac:	89 a1       	ldd	r24, Y+33	; 0x21
     bae:	9a a1       	ldd	r25, Y+34	; 0x22
     bb0:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__gesf2>
     bb4:	18 16       	cp	r1, r24
     bb6:	4c f5       	brge	.+82     	; 0xc0a <__stack+0x3ab>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e2       	ldi	r20, 0x20	; 32
     bbe:	51 e4       	ldi	r21, 0x41	; 65
     bc0:	6d 85       	ldd	r22, Y+13	; 0x0d
     bc2:	7e 85       	ldd	r23, Y+14	; 0x0e
     bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc6:	98 89       	ldd	r25, Y+16	; 0x10
     bc8:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	bc 01       	movw	r22, r24
     bd2:	cd 01       	movw	r24, r26
     bd4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	9c a3       	std	Y+36, r25	; 0x24
     bde:	8b a3       	std	Y+35, r24	; 0x23
     be0:	0f c0       	rjmp	.+30     	; 0xc00 <__stack+0x3a1>
     be2:	89 e1       	ldi	r24, 0x19	; 25
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	9e a3       	std	Y+38, r25	; 0x26
     be8:	8d a3       	std	Y+37, r24	; 0x25
     bea:	8d a1       	ldd	r24, Y+37	; 0x25
     bec:	9e a1       	ldd	r25, Y+38	; 0x26
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	f1 f7       	brne	.-4      	; 0xbee <__stack+0x38f>
     bf2:	9e a3       	std	Y+38, r25	; 0x26
     bf4:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bf6:	8b a1       	ldd	r24, Y+35	; 0x23
     bf8:	9c a1       	ldd	r25, Y+36	; 0x24
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	9c a3       	std	Y+36, r25	; 0x24
     bfe:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c00:	8b a1       	ldd	r24, Y+35	; 0x23
     c02:	9c a1       	ldd	r25, Y+36	; 0x24
     c04:	89 2b       	or	r24, r25
     c06:	69 f7       	brne	.-38     	; 0xbe2 <__stack+0x383>
     c08:	14 c0       	rjmp	.+40     	; 0xc32 <__stack+0x3d3>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c0a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     c0c:	78 a1       	ldd	r23, Y+32	; 0x20
     c0e:	89 a1       	ldd	r24, Y+33	; 0x21
     c10:	9a a1       	ldd	r25, Y+34	; 0x22
     c12:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     c16:	dc 01       	movw	r26, r24
     c18:	cb 01       	movw	r24, r22
     c1a:	9c a3       	std	Y+36, r25	; 0x24
     c1c:	8b a3       	std	Y+35, r24	; 0x23
     c1e:	8b a1       	ldd	r24, Y+35	; 0x23
     c20:	9c a1       	ldd	r25, Y+36	; 0x24
     c22:	98 a7       	std	Y+40, r25	; 0x28
     c24:	8f a3       	std	Y+39, r24	; 0x27
     c26:	8f a1       	ldd	r24, Y+39	; 0x27
     c28:	98 a5       	ldd	r25, Y+40	; 0x28
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <__stack+0x3cb>
     c2e:	98 a7       	std	Y+40, r25	; 0x28
     c30:	8f a3       	std	Y+39, r24	; 0x27
     c32:	8b e3       	ldi	r24, 0x3B	; 59
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	2b e3       	ldi	r18, 0x3B	; 59
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	f9 01       	movw	r30, r18
     c3c:	20 81       	ld	r18, Z
     c3e:	27 7f       	andi	r18, 0xF7	; 247
     c40:	fc 01       	movw	r30, r24
     c42:	20 83       	st	Z, r18
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a0 e8       	ldi	r26, 0x80	; 128
     c4a:	bf e3       	ldi	r27, 0x3F	; 63
     c4c:	89 8b       	std	Y+17, r24	; 0x11
     c4e:	9a 8b       	std	Y+18, r25	; 0x12
     c50:	ab 8b       	std	Y+19, r26	; 0x13
     c52:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	4a e7       	ldi	r20, 0x7A	; 122
     c5a:	53 e4       	ldi	r21, 0x43	; 67
     c5c:	69 89       	ldd	r22, Y+17	; 0x11
     c5e:	7a 89       	ldd	r23, Y+18	; 0x12
     c60:	8b 89       	ldd	r24, Y+19	; 0x13
     c62:	9c 89       	ldd	r25, Y+20	; 0x14
     c64:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	8d 8b       	std	Y+21, r24	; 0x15
     c6e:	9e 8b       	std	Y+22, r25	; 0x16
     c70:	af 8b       	std	Y+23, r26	; 0x17
     c72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e8       	ldi	r20, 0x80	; 128
     c7a:	5f e3       	ldi	r21, 0x3F	; 63
     c7c:	6d 89       	ldd	r22, Y+21	; 0x15
     c7e:	7e 89       	ldd	r23, Y+22	; 0x16
     c80:	8f 89       	ldd	r24, Y+23	; 0x17
     c82:	98 8d       	ldd	r25, Y+24	; 0x18
     c84:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__cmpsf2>
     c88:	88 23       	and	r24, r24
     c8a:	2c f4       	brge	.+10     	; 0xc96 <__stack+0x437>
		__ticks = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9a 8f       	std	Y+26, r25	; 0x1a
     c92:	89 8f       	std	Y+25, r24	; 0x19
     c94:	3f c0       	rjmp	.+126    	; 0xd14 <__stack+0x4b5>
	else if (__tmp > 65535)
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	3f ef       	ldi	r19, 0xFF	; 255
     c9a:	4f e7       	ldi	r20, 0x7F	; 127
     c9c:	57 e4       	ldi	r21, 0x47	; 71
     c9e:	6d 89       	ldd	r22, Y+21	; 0x15
     ca0:	7e 89       	ldd	r23, Y+22	; 0x16
     ca2:	8f 89       	ldd	r24, Y+23	; 0x17
     ca4:	98 8d       	ldd	r25, Y+24	; 0x18
     ca6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__gesf2>
     caa:	18 16       	cp	r1, r24
     cac:	4c f5       	brge	.+82     	; 0xd00 <__stack+0x4a1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	40 e2       	ldi	r20, 0x20	; 32
     cb4:	51 e4       	ldi	r21, 0x41	; 65
     cb6:	69 89       	ldd	r22, Y+17	; 0x11
     cb8:	7a 89       	ldd	r23, Y+18	; 0x12
     cba:	8b 89       	ldd	r24, Y+19	; 0x13
     cbc:	9c 89       	ldd	r25, Y+20	; 0x14
     cbe:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	bc 01       	movw	r22, r24
     cc8:	cd 01       	movw	r24, r26
     cca:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	9a 8f       	std	Y+26, r25	; 0x1a
     cd4:	89 8f       	std	Y+25, r24	; 0x19
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <__stack+0x497>
     cd8:	89 e1       	ldi	r24, 0x19	; 25
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	9c 8f       	std	Y+28, r25	; 0x1c
     cde:	8b 8f       	std	Y+27, r24	; 0x1b
     ce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ce2:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <__stack+0x485>
     ce8:	9c 8f       	std	Y+28, r25	; 0x1c
     cea:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cec:	89 8d       	ldd	r24, Y+25	; 0x19
     cee:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	9a 8f       	std	Y+26, r25	; 0x1a
     cf4:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf6:	89 8d       	ldd	r24, Y+25	; 0x19
     cf8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cfa:	89 2b       	or	r24, r25
     cfc:	69 f7       	brne	.-38     	; 0xcd8 <__stack+0x479>
     cfe:	14 c0       	rjmp	.+40     	; 0xd28 <__stack+0x4c9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d00:	6d 89       	ldd	r22, Y+21	; 0x15
     d02:	7e 89       	ldd	r23, Y+22	; 0x16
     d04:	8f 89       	ldd	r24, Y+23	; 0x17
     d06:	98 8d       	ldd	r25, Y+24	; 0x18
     d08:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	9a 8f       	std	Y+26, r25	; 0x1a
     d12:	89 8f       	std	Y+25, r24	; 0x19
     d14:	89 8d       	ldd	r24, Y+25	; 0x19
     d16:	9a 8d       	ldd	r25, Y+26	; 0x1a
     d18:	9e 8f       	std	Y+30, r25	; 0x1e
     d1a:	8d 8f       	std	Y+29, r24	; 0x1d
     d1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <__stack+0x4c1>
     d24:	9e 8f       	std	Y+30, r25	; 0x1e
     d26:	8d 8f       	std	Y+29, r24	; 0x1d
     d28:	00 00       	nop
     d2a:	c9 5b       	subi	r28, 0xB9	; 185
     d2c:	df 4f       	sbci	r29, 0xFF	; 255
     d2e:	0f b6       	in	r0, 0x3f	; 63
     d30:	f8 94       	cli
     d32:	de bf       	out	0x3e, r29	; 62
     d34:	0f be       	out	0x3f, r0	; 63
     d36:	cd bf       	out	0x3d, r28	; 61
     d38:	df 91       	pop	r29
     d3a:	cf 91       	pop	r28
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	08 95       	ret

00000d42 <LCD_displayCharacter>:
     d42:	0f 93       	push	r16
     d44:	1f 93       	push	r17
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	c7 54       	subi	r28, 0x47	; 71
     d50:	d1 09       	sbc	r29, r1
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	9e 01       	movw	r18, r28
     d5e:	29 5b       	subi	r18, 0xB9	; 185
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	f9 01       	movw	r30, r18
     d64:	80 83       	st	Z, r24
     d66:	8b e3       	ldi	r24, 0x3B	; 59
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	2b e3       	ldi	r18, 0x3B	; 59
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	f9 01       	movw	r30, r18
     d70:	20 81       	ld	r18, Z
     d72:	22 60       	ori	r18, 0x02	; 2
     d74:	fc 01       	movw	r30, r24
     d76:	20 83       	st	Z, r18
     d78:	8b e3       	ldi	r24, 0x3B	; 59
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	2b e3       	ldi	r18, 0x3B	; 59
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	f9 01       	movw	r30, r18
     d82:	20 81       	ld	r18, Z
     d84:	2b 7f       	andi	r18, 0xFB	; 251
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	a0 e8       	ldi	r26, 0x80	; 128
     d90:	bf e3       	ldi	r27, 0x3F	; 63
     d92:	89 83       	std	Y+1, r24	; 0x01
     d94:	9a 83       	std	Y+2, r25	; 0x02
     d96:	ab 83       	std	Y+3, r26	; 0x03
     d98:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	4a e7       	ldi	r20, 0x7A	; 122
     da0:	53 e4       	ldi	r21, 0x43	; 67
     da2:	69 81       	ldd	r22, Y+1	; 0x01
     da4:	7a 81       	ldd	r23, Y+2	; 0x02
     da6:	8b 81       	ldd	r24, Y+3	; 0x03
     da8:	9c 81       	ldd	r25, Y+4	; 0x04
     daa:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	9e 01       	movw	r18, r28
     db4:	23 5c       	subi	r18, 0xC3	; 195
     db6:	3f 4f       	sbci	r19, 0xFF	; 255
     db8:	f9 01       	movw	r30, r18
     dba:	80 83       	st	Z, r24
     dbc:	91 83       	std	Z+1, r25	; 0x01
     dbe:	a2 83       	std	Z+2, r26	; 0x02
     dc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e8       	ldi	r20, 0x80	; 128
     dc8:	5f e3       	ldi	r21, 0x3F	; 63
     dca:	ce 01       	movw	r24, r28
     dcc:	cd 96       	adiw	r24, 0x3d	; 61
     dce:	fc 01       	movw	r30, r24
     dd0:	60 81       	ld	r22, Z
     dd2:	71 81       	ldd	r23, Z+1	; 0x01
     dd4:	82 81       	ldd	r24, Z+2	; 0x02
     dd6:	93 81       	ldd	r25, Z+3	; 0x03
     dd8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__cmpsf2>
     ddc:	88 23       	and	r24, r24
     dde:	4c f4       	brge	.+18     	; 0xdf2 <LCD_displayCharacter+0xb0>
		__ticks = 1;
     de0:	ce 01       	movw	r24, r28
     de2:	8f 5b       	subi	r24, 0xBF	; 191
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	21 e0       	ldi	r18, 0x01	; 1
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	fc 01       	movw	r30, r24
     dec:	31 83       	std	Z+1, r19	; 0x01
     dee:	20 83       	st	Z, r18
     df0:	67 c0       	rjmp	.+206    	; 0xec0 <LCD_displayCharacter+0x17e>
	else if (__tmp > 65535)
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	3f ef       	ldi	r19, 0xFF	; 255
     df6:	4f e7       	ldi	r20, 0x7F	; 127
     df8:	57 e4       	ldi	r21, 0x47	; 71
     dfa:	ce 01       	movw	r24, r28
     dfc:	cd 96       	adiw	r24, 0x3d	; 61
     dfe:	fc 01       	movw	r30, r24
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__gesf2>
     e0c:	18 16       	cp	r1, r24
     e0e:	0c f0       	brlt	.+2      	; 0xe12 <LCD_displayCharacter+0xd0>
     e10:	46 c0       	rjmp	.+140    	; 0xe9e <LCD_displayCharacter+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e2       	ldi	r20, 0x20	; 32
     e18:	51 e4       	ldi	r21, 0x41	; 65
     e1a:	69 81       	ldd	r22, Y+1	; 0x01
     e1c:	7a 81       	ldd	r23, Y+2	; 0x02
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     e26:	dc 01       	movw	r26, r24
     e28:	cb 01       	movw	r24, r22
     e2a:	8e 01       	movw	r16, r28
     e2c:	0f 5b       	subi	r16, 0xBF	; 191
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	bc 01       	movw	r22, r24
     e32:	cd 01       	movw	r24, r26
     e34:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	f8 01       	movw	r30, r16
     e3e:	91 83       	std	Z+1, r25	; 0x01
     e40:	80 83       	st	Z, r24
     e42:	24 c0       	rjmp	.+72     	; 0xe8c <LCD_displayCharacter+0x14a>
     e44:	ce 01       	movw	r24, r28
     e46:	8d 5b       	subi	r24, 0xBD	; 189
     e48:	9f 4f       	sbci	r25, 0xFF	; 255
     e4a:	29 e1       	ldi	r18, 0x19	; 25
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	fc 01       	movw	r30, r24
     e50:	31 83       	std	Z+1, r19	; 0x01
     e52:	20 83       	st	Z, r18
     e54:	ce 01       	movw	r24, r28
     e56:	8d 5b       	subi	r24, 0xBD	; 189
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	fc 01       	movw	r30, r24
     e5c:	80 81       	ld	r24, Z
     e5e:	91 81       	ldd	r25, Z+1	; 0x01
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <LCD_displayCharacter+0x11e>
     e64:	9e 01       	movw	r18, r28
     e66:	2d 5b       	subi	r18, 0xBD	; 189
     e68:	3f 4f       	sbci	r19, 0xFF	; 255
     e6a:	f9 01       	movw	r30, r18
     e6c:	91 83       	std	Z+1, r25	; 0x01
     e6e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e70:	ce 01       	movw	r24, r28
     e72:	8f 5b       	subi	r24, 0xBF	; 191
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	9e 01       	movw	r18, r28
     e78:	2f 5b       	subi	r18, 0xBF	; 191
     e7a:	3f 4f       	sbci	r19, 0xFF	; 255
     e7c:	f9 01       	movw	r30, r18
     e7e:	20 81       	ld	r18, Z
     e80:	31 81       	ldd	r19, Z+1	; 0x01
     e82:	21 50       	subi	r18, 0x01	; 1
     e84:	31 09       	sbc	r19, r1
     e86:	fc 01       	movw	r30, r24
     e88:	31 83       	std	Z+1, r19	; 0x01
     e8a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	ce 01       	movw	r24, r28
     e8e:	8f 5b       	subi	r24, 0xBF	; 191
     e90:	9f 4f       	sbci	r25, 0xFF	; 255
     e92:	fc 01       	movw	r30, r24
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	89 2b       	or	r24, r25
     e9a:	a1 f6       	brne	.-88     	; 0xe44 <LCD_displayCharacter+0x102>
     e9c:	2b c0       	rjmp	.+86     	; 0xef4 <LCD_displayCharacter+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9e:	8e 01       	movw	r16, r28
     ea0:	0f 5b       	subi	r16, 0xBF	; 191
     ea2:	1f 4f       	sbci	r17, 0xFF	; 255
     ea4:	ce 01       	movw	r24, r28
     ea6:	cd 96       	adiw	r24, 0x3d	; 61
     ea8:	fc 01       	movw	r30, r24
     eaa:	60 81       	ld	r22, Z
     eac:	71 81       	ldd	r23, Z+1	; 0x01
     eae:	82 81       	ldd	r24, Z+2	; 0x02
     eb0:	93 81       	ldd	r25, Z+3	; 0x03
     eb2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	f8 01       	movw	r30, r16
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	80 83       	st	Z, r24
     ec0:	ce 01       	movw	r24, r28
     ec2:	8b 5b       	subi	r24, 0xBB	; 187
     ec4:	9f 4f       	sbci	r25, 0xFF	; 255
     ec6:	9e 01       	movw	r18, r28
     ec8:	2f 5b       	subi	r18, 0xBF	; 191
     eca:	3f 4f       	sbci	r19, 0xFF	; 255
     ecc:	f9 01       	movw	r30, r18
     ece:	20 81       	ld	r18, Z
     ed0:	31 81       	ldd	r19, Z+1	; 0x01
     ed2:	fc 01       	movw	r30, r24
     ed4:	31 83       	std	Z+1, r19	; 0x01
     ed6:	20 83       	st	Z, r18
     ed8:	ce 01       	movw	r24, r28
     eda:	8b 5b       	subi	r24, 0xBB	; 187
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	fc 01       	movw	r30, r24
     ee0:	80 81       	ld	r24, Z
     ee2:	91 81       	ldd	r25, Z+1	; 0x01
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <LCD_displayCharacter+0x1a2>
     ee8:	9e 01       	movw	r18, r28
     eea:	2b 5b       	subi	r18, 0xBB	; 187
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	f9 01       	movw	r30, r18
     ef0:	91 83       	std	Z+1, r25	; 0x01
     ef2:	80 83       	st	Z, r24
     ef4:	8b e3       	ldi	r24, 0x3B	; 59
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	2b e3       	ldi	r18, 0x3B	; 59
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	f9 01       	movw	r30, r18
     efe:	20 81       	ld	r18, Z
     f00:	42 2f       	mov	r20, r18
     f02:	4f 70       	andi	r20, 0x0F	; 15
     f04:	9e 01       	movw	r18, r28
     f06:	29 5b       	subi	r18, 0xB9	; 185
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	f9 01       	movw	r30, r18
     f0c:	20 81       	ld	r18, Z
     f0e:	20 7f       	andi	r18, 0xF0	; 240
     f10:	24 2b       	or	r18, r20
     f12:	fc 01       	movw	r30, r24
     f14:	20 83       	st	Z, r18
     f16:	8b e3       	ldi	r24, 0x3B	; 59
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	2b e3       	ldi	r18, 0x3B	; 59
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	f9 01       	movw	r30, r18
     f20:	20 81       	ld	r18, Z
     f22:	28 60       	ori	r18, 0x08	; 8
     f24:	fc 01       	movw	r30, r24
     f26:	20 83       	st	Z, r18
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	b0 e4       	ldi	r27, 0x40	; 64
     f30:	8d 83       	std	Y+5, r24	; 0x05
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	af 83       	std	Y+7, r26	; 0x07
     f36:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a e7       	ldi	r20, 0x7A	; 122
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	6d 81       	ldd	r22, Y+5	; 0x05
     f42:	7e 81       	ldd	r23, Y+6	; 0x06
     f44:	8f 81       	ldd	r24, Y+7	; 0x07
     f46:	98 85       	ldd	r25, Y+8	; 0x08
     f48:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	8b ab       	std	Y+51, r24	; 0x33
     f52:	9c ab       	std	Y+52, r25	; 0x34
     f54:	ad ab       	std	Y+53, r26	; 0x35
     f56:	be ab       	std	Y+54, r27	; 0x36
	if (__tmp < 1.0)
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e8       	ldi	r20, 0x80	; 128
     f5e:	5f e3       	ldi	r21, 0x3F	; 63
     f60:	6b a9       	ldd	r22, Y+51	; 0x33
     f62:	7c a9       	ldd	r23, Y+52	; 0x34
     f64:	8d a9       	ldd	r24, Y+53	; 0x35
     f66:	9e a9       	ldd	r25, Y+54	; 0x36
     f68:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__cmpsf2>
     f6c:	88 23       	and	r24, r24
     f6e:	2c f4       	brge	.+10     	; 0xf7a <LCD_displayCharacter+0x238>
		__ticks = 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	98 af       	std	Y+56, r25	; 0x38
     f76:	8f ab       	std	Y+55, r24	; 0x37
     f78:	3f c0       	rjmp	.+126    	; 0xff8 <LCD_displayCharacter+0x2b6>
	else if (__tmp > 65535)
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	3f ef       	ldi	r19, 0xFF	; 255
     f7e:	4f e7       	ldi	r20, 0x7F	; 127
     f80:	57 e4       	ldi	r21, 0x47	; 71
     f82:	6b a9       	ldd	r22, Y+51	; 0x33
     f84:	7c a9       	ldd	r23, Y+52	; 0x34
     f86:	8d a9       	ldd	r24, Y+53	; 0x35
     f88:	9e a9       	ldd	r25, Y+54	; 0x36
     f8a:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__gesf2>
     f8e:	18 16       	cp	r1, r24
     f90:	4c f5       	brge	.+82     	; 0xfe4 <LCD_displayCharacter+0x2a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	6d 81       	ldd	r22, Y+5	; 0x05
     f9c:	7e 81       	ldd	r23, Y+6	; 0x06
     f9e:	8f 81       	ldd	r24, Y+7	; 0x07
     fa0:	98 85       	ldd	r25, Y+8	; 0x08
     fa2:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	98 af       	std	Y+56, r25	; 0x38
     fb8:	8f ab       	std	Y+55, r24	; 0x37
     fba:	0f c0       	rjmp	.+30     	; 0xfda <LCD_displayCharacter+0x298>
     fbc:	89 e1       	ldi	r24, 0x19	; 25
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9a af       	std	Y+58, r25	; 0x3a
     fc2:	89 af       	std	Y+57, r24	; 0x39
     fc4:	89 ad       	ldd	r24, Y+57	; 0x39
     fc6:	9a ad       	ldd	r25, Y+58	; 0x3a
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <LCD_displayCharacter+0x286>
     fcc:	9a af       	std	Y+58, r25	; 0x3a
     fce:	89 af       	std	Y+57, r24	; 0x39
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd0:	8f a9       	ldd	r24, Y+55	; 0x37
     fd2:	98 ad       	ldd	r25, Y+56	; 0x38
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	98 af       	std	Y+56, r25	; 0x38
     fd8:	8f ab       	std	Y+55, r24	; 0x37
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fda:	8f a9       	ldd	r24, Y+55	; 0x37
     fdc:	98 ad       	ldd	r25, Y+56	; 0x38
     fde:	89 2b       	or	r24, r25
     fe0:	69 f7       	brne	.-38     	; 0xfbc <LCD_displayCharacter+0x27a>
     fe2:	14 c0       	rjmp	.+40     	; 0x100c <LCD_displayCharacter+0x2ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe4:	6b a9       	ldd	r22, Y+51	; 0x33
     fe6:	7c a9       	ldd	r23, Y+52	; 0x34
     fe8:	8d a9       	ldd	r24, Y+53	; 0x35
     fea:	9e a9       	ldd	r25, Y+54	; 0x36
     fec:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	98 af       	std	Y+56, r25	; 0x38
     ff6:	8f ab       	std	Y+55, r24	; 0x37
     ff8:	8f a9       	ldd	r24, Y+55	; 0x37
     ffa:	98 ad       	ldd	r25, Y+56	; 0x38
     ffc:	9c af       	std	Y+60, r25	; 0x3c
     ffe:	8b af       	std	Y+59, r24	; 0x3b
    1000:	8b ad       	ldd	r24, Y+59	; 0x3b
    1002:	9c ad       	ldd	r25, Y+60	; 0x3c
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <LCD_displayCharacter+0x2c2>
    1008:	9c af       	std	Y+60, r25	; 0x3c
    100a:	8b af       	std	Y+59, r24	; 0x3b
    100c:	8b e3       	ldi	r24, 0x3B	; 59
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	2b e3       	ldi	r18, 0x3B	; 59
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	f9 01       	movw	r30, r18
    1016:	20 81       	ld	r18, Z
    1018:	27 7f       	andi	r18, 0xF7	; 247
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	a0 e0       	ldi	r26, 0x00	; 0
    1024:	b0 e4       	ldi	r27, 0x40	; 64
    1026:	89 87       	std	Y+9, r24	; 0x09
    1028:	9a 87       	std	Y+10, r25	; 0x0a
    102a:	ab 87       	std	Y+11, r26	; 0x0b
    102c:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	4a e7       	ldi	r20, 0x7A	; 122
    1034:	53 e4       	ldi	r21, 0x43	; 67
    1036:	69 85       	ldd	r22, Y+9	; 0x09
    1038:	7a 85       	ldd	r23, Y+10	; 0x0a
    103a:	8b 85       	ldd	r24, Y+11	; 0x0b
    103c:	9c 85       	ldd	r25, Y+12	; 0x0c
    103e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	89 a7       	std	Y+41, r24	; 0x29
    1048:	9a a7       	std	Y+42, r25	; 0x2a
    104a:	ab a7       	std	Y+43, r26	; 0x2b
    104c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e8       	ldi	r20, 0x80	; 128
    1054:	5f e3       	ldi	r21, 0x3F	; 63
    1056:	69 a5       	ldd	r22, Y+41	; 0x29
    1058:	7a a5       	ldd	r23, Y+42	; 0x2a
    105a:	8b a5       	ldd	r24, Y+43	; 0x2b
    105c:	9c a5       	ldd	r25, Y+44	; 0x2c
    105e:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__cmpsf2>
    1062:	88 23       	and	r24, r24
    1064:	2c f4       	brge	.+10     	; 0x1070 <LCD_displayCharacter+0x32e>
		__ticks = 1;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	9e a7       	std	Y+46, r25	; 0x2e
    106c:	8d a7       	std	Y+45, r24	; 0x2d
    106e:	3f c0       	rjmp	.+126    	; 0x10ee <LCD_displayCharacter+0x3ac>
	else if (__tmp > 65535)
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	3f ef       	ldi	r19, 0xFF	; 255
    1074:	4f e7       	ldi	r20, 0x7F	; 127
    1076:	57 e4       	ldi	r21, 0x47	; 71
    1078:	69 a5       	ldd	r22, Y+41	; 0x29
    107a:	7a a5       	ldd	r23, Y+42	; 0x2a
    107c:	8b a5       	ldd	r24, Y+43	; 0x2b
    107e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1080:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__gesf2>
    1084:	18 16       	cp	r1, r24
    1086:	4c f5       	brge	.+82     	; 0x10da <LCD_displayCharacter+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e2       	ldi	r20, 0x20	; 32
    108e:	51 e4       	ldi	r21, 0x41	; 65
    1090:	69 85       	ldd	r22, Y+9	; 0x09
    1092:	7a 85       	ldd	r23, Y+10	; 0x0a
    1094:	8b 85       	ldd	r24, Y+11	; 0x0b
    1096:	9c 85       	ldd	r25, Y+12	; 0x0c
    1098:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
    109c:	dc 01       	movw	r26, r24
    109e:	cb 01       	movw	r24, r22
    10a0:	bc 01       	movw	r22, r24
    10a2:	cd 01       	movw	r24, r26
    10a4:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	9e a7       	std	Y+46, r25	; 0x2e
    10ae:	8d a7       	std	Y+45, r24	; 0x2d
    10b0:	0f c0       	rjmp	.+30     	; 0x10d0 <LCD_displayCharacter+0x38e>
    10b2:	89 e1       	ldi	r24, 0x19	; 25
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	98 ab       	std	Y+48, r25	; 0x30
    10b8:	8f a7       	std	Y+47, r24	; 0x2f
    10ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    10bc:	98 a9       	ldd	r25, Y+48	; 0x30
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	f1 f7       	brne	.-4      	; 0x10be <LCD_displayCharacter+0x37c>
    10c2:	98 ab       	std	Y+48, r25	; 0x30
    10c4:	8f a7       	std	Y+47, r24	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    10c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	9e a7       	std	Y+46, r25	; 0x2e
    10ce:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    10d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    10d4:	89 2b       	or	r24, r25
    10d6:	69 f7       	brne	.-38     	; 0x10b2 <LCD_displayCharacter+0x370>
    10d8:	14 c0       	rjmp	.+40     	; 0x1102 <LCD_displayCharacter+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10da:	69 a5       	ldd	r22, Y+41	; 0x29
    10dc:	7a a5       	ldd	r23, Y+42	; 0x2a
    10de:	8b a5       	ldd	r24, Y+43	; 0x2b
    10e0:	9c a5       	ldd	r25, Y+44	; 0x2c
    10e2:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
    10e6:	dc 01       	movw	r26, r24
    10e8:	cb 01       	movw	r24, r22
    10ea:	9e a7       	std	Y+46, r25	; 0x2e
    10ec:	8d a7       	std	Y+45, r24	; 0x2d
    10ee:	8d a5       	ldd	r24, Y+45	; 0x2d
    10f0:	9e a5       	ldd	r25, Y+46	; 0x2e
    10f2:	9a ab       	std	Y+50, r25	; 0x32
    10f4:	89 ab       	std	Y+49, r24	; 0x31
    10f6:	89 a9       	ldd	r24, Y+49	; 0x31
    10f8:	9a a9       	ldd	r25, Y+50	; 0x32
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <LCD_displayCharacter+0x3b8>
    10fe:	9a ab       	std	Y+50, r25	; 0x32
    1100:	89 ab       	std	Y+49, r24	; 0x31
    1102:	8b e3       	ldi	r24, 0x3B	; 59
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	2b e3       	ldi	r18, 0x3B	; 59
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	42 2f       	mov	r20, r18
    1110:	4f 70       	andi	r20, 0x0F	; 15
    1112:	9e 01       	movw	r18, r28
    1114:	29 5b       	subi	r18, 0xB9	; 185
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	f9 01       	movw	r30, r18
    111a:	20 81       	ld	r18, Z
    111c:	22 2f       	mov	r18, r18
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	22 95       	swap	r18
    1122:	32 95       	swap	r19
    1124:	30 7f       	andi	r19, 0xF0	; 240
    1126:	32 27       	eor	r19, r18
    1128:	20 7f       	andi	r18, 0xF0	; 240
    112a:	32 27       	eor	r19, r18
    112c:	24 2b       	or	r18, r20
    112e:	fc 01       	movw	r30, r24
    1130:	20 83       	st	Z, r18
    1132:	8b e3       	ldi	r24, 0x3B	; 59
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	2b e3       	ldi	r18, 0x3B	; 59
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	f9 01       	movw	r30, r18
    113c:	20 81       	ld	r18, Z
    113e:	28 60       	ori	r18, 0x08	; 8
    1140:	fc 01       	movw	r30, r24
    1142:	20 83       	st	Z, r18
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	a0 e0       	ldi	r26, 0x00	; 0
    114a:	b0 e4       	ldi	r27, 0x40	; 64
    114c:	8d 87       	std	Y+13, r24	; 0x0d
    114e:	9e 87       	std	Y+14, r25	; 0x0e
    1150:	af 87       	std	Y+15, r26	; 0x0f
    1152:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a e7       	ldi	r20, 0x7A	; 122
    115a:	53 e4       	ldi	r21, 0x43	; 67
    115c:	6d 85       	ldd	r22, Y+13	; 0x0d
    115e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1160:	8f 85       	ldd	r24, Y+15	; 0x0f
    1162:	98 89       	ldd	r25, Y+16	; 0x10
    1164:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
    1168:	dc 01       	movw	r26, r24
    116a:	cb 01       	movw	r24, r22
    116c:	8f 8f       	std	Y+31, r24	; 0x1f
    116e:	98 a3       	std	Y+32, r25	; 0x20
    1170:	a9 a3       	std	Y+33, r26	; 0x21
    1172:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e8       	ldi	r20, 0x80	; 128
    117a:	5f e3       	ldi	r21, 0x3F	; 63
    117c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    117e:	78 a1       	ldd	r23, Y+32	; 0x20
    1180:	89 a1       	ldd	r24, Y+33	; 0x21
    1182:	9a a1       	ldd	r25, Y+34	; 0x22
    1184:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__cmpsf2>
    1188:	88 23       	and	r24, r24
    118a:	2c f4       	brge	.+10     	; 0x1196 <LCD_displayCharacter+0x454>
		__ticks = 1;
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	9c a3       	std	Y+36, r25	; 0x24
    1192:	8b a3       	std	Y+35, r24	; 0x23
    1194:	3f c0       	rjmp	.+126    	; 0x1214 <LCD_displayCharacter+0x4d2>
	else if (__tmp > 65535)
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    11a0:	78 a1       	ldd	r23, Y+32	; 0x20
    11a2:	89 a1       	ldd	r24, Y+33	; 0x21
    11a4:	9a a1       	ldd	r25, Y+34	; 0x22
    11a6:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__gesf2>
    11aa:	18 16       	cp	r1, r24
    11ac:	4c f5       	brge	.+82     	; 0x1200 <LCD_displayCharacter+0x4be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	6d 85       	ldd	r22, Y+13	; 0x0d
    11b8:	7e 85       	ldd	r23, Y+14	; 0x0e
    11ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    11bc:	98 89       	ldd	r25, Y+16	; 0x10
    11be:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
    11c2:	dc 01       	movw	r26, r24
    11c4:	cb 01       	movw	r24, r22
    11c6:	bc 01       	movw	r22, r24
    11c8:	cd 01       	movw	r24, r26
    11ca:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
    11ce:	dc 01       	movw	r26, r24
    11d0:	cb 01       	movw	r24, r22
    11d2:	9c a3       	std	Y+36, r25	; 0x24
    11d4:	8b a3       	std	Y+35, r24	; 0x23
    11d6:	0f c0       	rjmp	.+30     	; 0x11f6 <LCD_displayCharacter+0x4b4>
    11d8:	89 e1       	ldi	r24, 0x19	; 25
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9e a3       	std	Y+38, r25	; 0x26
    11de:	8d a3       	std	Y+37, r24	; 0x25
    11e0:	8d a1       	ldd	r24, Y+37	; 0x25
    11e2:	9e a1       	ldd	r25, Y+38	; 0x26
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <LCD_displayCharacter+0x4a2>
    11e8:	9e a3       	std	Y+38, r25	; 0x26
    11ea:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ec:	8b a1       	ldd	r24, Y+35	; 0x23
    11ee:	9c a1       	ldd	r25, Y+36	; 0x24
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9c a3       	std	Y+36, r25	; 0x24
    11f4:	8b a3       	std	Y+35, r24	; 0x23
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11f6:	8b a1       	ldd	r24, Y+35	; 0x23
    11f8:	9c a1       	ldd	r25, Y+36	; 0x24
    11fa:	89 2b       	or	r24, r25
    11fc:	69 f7       	brne	.-38     	; 0x11d8 <LCD_displayCharacter+0x496>
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <LCD_displayCharacter+0x4e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1200:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1202:	78 a1       	ldd	r23, Y+32	; 0x20
    1204:	89 a1       	ldd	r24, Y+33	; 0x21
    1206:	9a a1       	ldd	r25, Y+34	; 0x22
    1208:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
    120c:	dc 01       	movw	r26, r24
    120e:	cb 01       	movw	r24, r22
    1210:	9c a3       	std	Y+36, r25	; 0x24
    1212:	8b a3       	std	Y+35, r24	; 0x23
    1214:	8b a1       	ldd	r24, Y+35	; 0x23
    1216:	9c a1       	ldd	r25, Y+36	; 0x24
    1218:	98 a7       	std	Y+40, r25	; 0x28
    121a:	8f a3       	std	Y+39, r24	; 0x27
    121c:	8f a1       	ldd	r24, Y+39	; 0x27
    121e:	98 a5       	ldd	r25, Y+40	; 0x28
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <LCD_displayCharacter+0x4de>
    1224:	98 a7       	std	Y+40, r25	; 0x28
    1226:	8f a3       	std	Y+39, r24	; 0x27
    1228:	8b e3       	ldi	r24, 0x3B	; 59
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	2b e3       	ldi	r18, 0x3B	; 59
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	f9 01       	movw	r30, r18
    1232:	20 81       	ld	r18, Z
    1234:	27 7f       	andi	r18, 0xF7	; 247
    1236:	fc 01       	movw	r30, r24
    1238:	20 83       	st	Z, r18
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a0 e0       	ldi	r26, 0x00	; 0
    1240:	b0 e4       	ldi	r27, 0x40	; 64
    1242:	89 8b       	std	Y+17, r24	; 0x11
    1244:	9a 8b       	std	Y+18, r25	; 0x12
    1246:	ab 8b       	std	Y+19, r26	; 0x13
    1248:	bc 8b       	std	Y+20, r27	; 0x14

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	4a e7       	ldi	r20, 0x7A	; 122
    1250:	53 e4       	ldi	r21, 0x43	; 67
    1252:	69 89       	ldd	r22, Y+17	; 0x11
    1254:	7a 89       	ldd	r23, Y+18	; 0x12
    1256:	8b 89       	ldd	r24, Y+19	; 0x13
    1258:	9c 89       	ldd	r25, Y+20	; 0x14
    125a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	8d 8b       	std	Y+21, r24	; 0x15
    1264:	9e 8b       	std	Y+22, r25	; 0x16
    1266:	af 8b       	std	Y+23, r26	; 0x17
    1268:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e8       	ldi	r20, 0x80	; 128
    1270:	5f e3       	ldi	r21, 0x3F	; 63
    1272:	6d 89       	ldd	r22, Y+21	; 0x15
    1274:	7e 89       	ldd	r23, Y+22	; 0x16
    1276:	8f 89       	ldd	r24, Y+23	; 0x17
    1278:	98 8d       	ldd	r25, Y+24	; 0x18
    127a:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__cmpsf2>
    127e:	88 23       	and	r24, r24
    1280:	2c f4       	brge	.+10     	; 0x128c <LCD_displayCharacter+0x54a>
		__ticks = 1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	9a 8f       	std	Y+26, r25	; 0x1a
    1288:	89 8f       	std	Y+25, r24	; 0x19
    128a:	3f c0       	rjmp	.+126    	; 0x130a <LCD_displayCharacter+0x5c8>
	else if (__tmp > 65535)
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	3f ef       	ldi	r19, 0xFF	; 255
    1290:	4f e7       	ldi	r20, 0x7F	; 127
    1292:	57 e4       	ldi	r21, 0x47	; 71
    1294:	6d 89       	ldd	r22, Y+21	; 0x15
    1296:	7e 89       	ldd	r23, Y+22	; 0x16
    1298:	8f 89       	ldd	r24, Y+23	; 0x17
    129a:	98 8d       	ldd	r25, Y+24	; 0x18
    129c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <__gesf2>
    12a0:	18 16       	cp	r1, r24
    12a2:	4c f5       	brge	.+82     	; 0x12f6 <LCD_displayCharacter+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a4:	20 e0       	ldi	r18, 0x00	; 0
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e2       	ldi	r20, 0x20	; 32
    12aa:	51 e4       	ldi	r21, 0x41	; 65
    12ac:	69 89       	ldd	r22, Y+17	; 0x11
    12ae:	7a 89       	ldd	r23, Y+18	; 0x12
    12b0:	8b 89       	ldd	r24, Y+19	; 0x13
    12b2:	9c 89       	ldd	r25, Y+20	; 0x14
    12b4:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <__mulsf3>
    12b8:	dc 01       	movw	r26, r24
    12ba:	cb 01       	movw	r24, r22
    12bc:	bc 01       	movw	r22, r24
    12be:	cd 01       	movw	r24, r26
    12c0:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	9a 8f       	std	Y+26, r25	; 0x1a
    12ca:	89 8f       	std	Y+25, r24	; 0x19
    12cc:	0f c0       	rjmp	.+30     	; 0x12ec <LCD_displayCharacter+0x5aa>
    12ce:	89 e1       	ldi	r24, 0x19	; 25
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	9c 8f       	std	Y+28, r25	; 0x1c
    12d4:	8b 8f       	std	Y+27, r24	; 0x1b
    12d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	f1 f7       	brne	.-4      	; 0x12da <LCD_displayCharacter+0x598>
    12de:	9c 8f       	std	Y+28, r25	; 0x1c
    12e0:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e2:	89 8d       	ldd	r24, Y+25	; 0x19
    12e4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	9a 8f       	std	Y+26, r25	; 0x1a
    12ea:	89 8f       	std	Y+25, r24	; 0x19
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ec:	89 8d       	ldd	r24, Y+25	; 0x19
    12ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    12f0:	89 2b       	or	r24, r25
    12f2:	69 f7       	brne	.-38     	; 0x12ce <LCD_displayCharacter+0x58c>
    12f4:	14 c0       	rjmp	.+40     	; 0x131e <LCD_displayCharacter+0x5dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f6:	6d 89       	ldd	r22, Y+21	; 0x15
    12f8:	7e 89       	ldd	r23, Y+22	; 0x16
    12fa:	8f 89       	ldd	r24, Y+23	; 0x17
    12fc:	98 8d       	ldd	r25, Y+24	; 0x18
    12fe:	0e 94 56 0a 	call	0x14ac	; 0x14ac <__fixunssfsi>
    1302:	dc 01       	movw	r26, r24
    1304:	cb 01       	movw	r24, r22
    1306:	9a 8f       	std	Y+26, r25	; 0x1a
    1308:	89 8f       	std	Y+25, r24	; 0x19
    130a:	89 8d       	ldd	r24, Y+25	; 0x19
    130c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    130e:	9e 8f       	std	Y+30, r25	; 0x1e
    1310:	8d 8f       	std	Y+29, r24	; 0x1d
    1312:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1314:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <LCD_displayCharacter+0x5d4>
    131a:	9e 8f       	std	Y+30, r25	; 0x1e
    131c:	8d 8f       	std	Y+29, r24	; 0x1d
    131e:	00 00       	nop
    1320:	c9 5b       	subi	r28, 0xB9	; 185
    1322:	df 4f       	sbci	r29, 0xFF	; 255
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	08 95       	ret

00001338 <main>:
#include "includes/spi.h"
#include "includes/LCD.h"

/****************************MASTER*************************/
int main(void)
{
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	00 d0       	rcall	.+0      	; 0x133e <main+0x6>
    133e:	1f 92       	push	r1
    1340:	cd b7       	in	r28, 0x3d	; 61
    1342:	de b7       	in	r29, 0x3e	; 62
	SPI_initMaster();/*INIT master */
    1344:	0e 94 bc 09 	call	0x1378	; 0x1378 <SPI_initMaster>
	UART_Inti();/*INIT FUN FOR UART */
    1348:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <UART_Inti>
    LCD_init(); /* INIT LCD */
    134c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <LCD_init>
	DIO_SetPinDirection(BUTTON0,INPUT);
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	84 e1       	ldi	r24, 0x14	; 20
    1354:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	DIO_SetPinDirection(BUTTON1,INPUT);
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	8a e0       	ldi	r24, 0x0A	; 10
    135c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
	uint8 PREV_BTN1 = 0;
    1360:	19 82       	std	Y+1, r1	; 0x01
	uint8 PREV_BTN0 = 0;
    1362:	1a 82       	std	Y+2, r1	; 0x02
		{
			UART_Transmit('1');
			PREV_BTN0 = 1 ;
		}
		#endif
		data = UART_Reseive();
    1364:	0e 94 38 0a 	call	0x1470	; 0x1470 <UART_Reseive>
    1368:	8b 83       	std	Y+3, r24	; 0x03
		LCD_displayCharacter(data);
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	0e 94 a1 06 	call	0xd42	; 0xd42 <LCD_displayCharacter>
		SPI_sendByte(data);		
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <SPI_sendByte>
	}
    1376:	f6 cf       	rjmp	.-20     	; 0x1364 <main+0x2c>

00001378 <SPI_initMaster>:
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	8c e0       	ldi	r24, 0x0C	; 12
    1384:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	8d e0       	ldi	r24, 0x0D	; 13
    138c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
    1390:	60 e0       	ldi	r22, 0x00	; 0
    1392:	8e e0       	ldi	r24, 0x0E	; 14
    1394:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
    1398:	61 e0       	ldi	r22, 0x01	; 1
    139a:	8f e0       	ldi	r24, 0x0F	; 15
    139c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_SetPinDirection>
    13a0:	8d e2       	ldi	r24, 0x2D	; 45
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	20 e5       	ldi	r18, 0x50	; 80
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18
    13aa:	00 00       	nop
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <SPI_sendByte>:
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	1f 92       	push	r1
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	89 83       	std	Y+1, r24	; 0x01
    13be:	8f e2       	ldi	r24, 0x2F	; 47
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	29 81       	ldd	r18, Y+1	; 0x01
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18
    13c8:	00 00       	nop
    13ca:	8e e2       	ldi	r24, 0x2E	; 46
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	fc 01       	movw	r30, r24
    13d0:	80 81       	ld	r24, Z
    13d2:	88 23       	and	r24, r24
    13d4:	d4 f7       	brge	.-12     	; 0x13ca <SPI_sendByte+0x18>
    13d6:	00 00       	nop
    13d8:	0f 90       	pop	r0
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <UART_Inti>:
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
    13e8:	28 97       	sbiw	r28, 0x08	; 8
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	28 e0       	ldi	r18, 0x08	; 8
    13f6:	e2 e6       	ldi	r30, 0x62	; 98
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	ce 01       	movw	r24, r28
    13fc:	01 96       	adiw	r24, 0x01	; 1
    13fe:	dc 01       	movw	r26, r24
    1400:	01 90       	ld	r0, Z+
    1402:	0d 92       	st	X+, r0
    1404:	2a 95       	dec	r18
    1406:	e1 f7       	brne	.-8      	; 0x1400 <UART_Inti+0x20>
    1408:	8a e2       	ldi	r24, 0x2A	; 42
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	2a e2       	ldi	r18, 0x2A	; 42
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	f9 01       	movw	r30, r18
    1412:	20 81       	ld	r18, Z
    1414:	28 61       	ori	r18, 0x18	; 24
    1416:	fc 01       	movw	r30, r24
    1418:	20 83       	st	Z, r18
    141a:	8f 81       	ldd	r24, Y+7	; 0x07
    141c:	88 30       	cpi	r24, 0x08	; 8
    141e:	49 f4       	brne	.+18     	; 0x1432 <UART_Inti+0x52>
    1420:	80 e4       	ldi	r24, 0x40	; 64
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	20 e4       	ldi	r18, 0x40	; 64
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	f9 01       	movw	r30, r18
    142a:	20 81       	ld	r18, Z
    142c:	26 68       	ori	r18, 0x86	; 134
    142e:	fc 01       	movw	r30, r24
    1430:	20 83       	st	Z, r18
    1432:	88 85       	ldd	r24, Y+8	; 0x08
    1434:	88 23       	and	r24, r24
    1436:	49 f0       	breq	.+18     	; 0x144a <UART_Inti+0x6a>
    1438:	8b e2       	ldi	r24, 0x2B	; 43
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	2b e2       	ldi	r18, 0x2B	; 43
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	f9 01       	movw	r30, r18
    1442:	20 81       	ld	r18, Z
    1444:	22 60       	ori	r18, 0x02	; 2
    1446:	fc 01       	movw	r30, r24
    1448:	20 83       	st	Z, r18
    144a:	80 e4       	ldi	r24, 0x40	; 64
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	fc 01       	movw	r30, r24
    1450:	10 82       	st	Z, r1
    1452:	89 e2       	ldi	r24, 0x29	; 41
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	2f ec       	ldi	r18, 0xCF	; 207
    1458:	fc 01       	movw	r30, r24
    145a:	20 83       	st	Z, r18
    145c:	00 00       	nop
    145e:	28 96       	adiw	r28, 0x08	; 8
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	df 91       	pop	r29
    146c:	cf 91       	pop	r28
    146e:	08 95       	ret

00001470 <UART_Reseive>:
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	00 00       	nop
    147a:	8b e2       	ldi	r24, 0x2B	; 43
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	fc 01       	movw	r30, r24
    1480:	80 81       	ld	r24, Z
    1482:	88 1f       	adc	r24, r24
    1484:	88 27       	eor	r24, r24
    1486:	88 1f       	adc	r24, r24
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	81 70       	andi	r24, 0x01	; 1
    148e:	99 27       	eor	r25, r25
    1490:	89 2b       	or	r24, r25
    1492:	99 f3       	breq	.-26     	; 0x147a <UART_Reseive+0xa>
    1494:	8c e2       	ldi	r24, 0x2C	; 44
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	fc 01       	movw	r30, r24
    149a:	80 81       	ld	r24, Z
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	08 95       	ret

000014a2 <__cmpsf2>:
    14a2:	0e 94 85 0a 	call	0x150a	; 0x150a <__fp_cmp>
    14a6:	08 f4       	brcc	.+2      	; 0x14aa <__cmpsf2+0x8>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	08 95       	ret

000014ac <__fixunssfsi>:
    14ac:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__fp_splitA>
    14b0:	88 f0       	brcs	.+34     	; 0x14d4 <__fixunssfsi+0x28>
    14b2:	9f 57       	subi	r25, 0x7F	; 127
    14b4:	98 f0       	brcs	.+38     	; 0x14dc <__fixunssfsi+0x30>
    14b6:	b9 2f       	mov	r27, r25
    14b8:	99 27       	eor	r25, r25
    14ba:	b7 51       	subi	r27, 0x17	; 23
    14bc:	b0 f0       	brcs	.+44     	; 0x14ea <__fixunssfsi+0x3e>
    14be:	e1 f0       	breq	.+56     	; 0x14f8 <__fixunssfsi+0x4c>
    14c0:	66 0f       	add	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	88 1f       	adc	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	1a f0       	brmi	.+6      	; 0x14d0 <__fixunssfsi+0x24>
    14ca:	ba 95       	dec	r27
    14cc:	c9 f7       	brne	.-14     	; 0x14c0 <__fixunssfsi+0x14>
    14ce:	14 c0       	rjmp	.+40     	; 0x14f8 <__fixunssfsi+0x4c>
    14d0:	b1 30       	cpi	r27, 0x01	; 1
    14d2:	91 f0       	breq	.+36     	; 0x14f8 <__fixunssfsi+0x4c>
    14d4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <__fp_zero>
    14d8:	b1 e0       	ldi	r27, 0x01	; 1
    14da:	08 95       	ret
    14dc:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <__fp_zero>
    14e0:	67 2f       	mov	r22, r23
    14e2:	78 2f       	mov	r23, r24
    14e4:	88 27       	eor	r24, r24
    14e6:	b8 5f       	subi	r27, 0xF8	; 248
    14e8:	39 f0       	breq	.+14     	; 0x14f8 <__fixunssfsi+0x4c>
    14ea:	b9 3f       	cpi	r27, 0xF9	; 249
    14ec:	cc f3       	brlt	.-14     	; 0x14e0 <__fixunssfsi+0x34>
    14ee:	86 95       	lsr	r24
    14f0:	77 95       	ror	r23
    14f2:	67 95       	ror	r22
    14f4:	b3 95       	inc	r27
    14f6:	d9 f7       	brne	.-10     	; 0x14ee <__fixunssfsi+0x42>
    14f8:	3e f4       	brtc	.+14     	; 0x1508 <__fixunssfsi+0x5c>
    14fa:	90 95       	com	r25
    14fc:	80 95       	com	r24
    14fe:	70 95       	com	r23
    1500:	61 95       	neg	r22
    1502:	7f 4f       	sbci	r23, 0xFF	; 255
    1504:	8f 4f       	sbci	r24, 0xFF	; 255
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	08 95       	ret

0000150a <__fp_cmp>:
    150a:	99 0f       	add	r25, r25
    150c:	00 08       	sbc	r0, r0
    150e:	55 0f       	add	r21, r21
    1510:	aa 0b       	sbc	r26, r26
    1512:	e0 e8       	ldi	r30, 0x80	; 128
    1514:	fe ef       	ldi	r31, 0xFE	; 254
    1516:	16 16       	cp	r1, r22
    1518:	17 06       	cpc	r1, r23
    151a:	e8 07       	cpc	r30, r24
    151c:	f9 07       	cpc	r31, r25
    151e:	c0 f0       	brcs	.+48     	; 0x1550 <__fp_cmp+0x46>
    1520:	12 16       	cp	r1, r18
    1522:	13 06       	cpc	r1, r19
    1524:	e4 07       	cpc	r30, r20
    1526:	f5 07       	cpc	r31, r21
    1528:	98 f0       	brcs	.+38     	; 0x1550 <__fp_cmp+0x46>
    152a:	62 1b       	sub	r22, r18
    152c:	73 0b       	sbc	r23, r19
    152e:	84 0b       	sbc	r24, r20
    1530:	95 0b       	sbc	r25, r21
    1532:	39 f4       	brne	.+14     	; 0x1542 <__fp_cmp+0x38>
    1534:	0a 26       	eor	r0, r26
    1536:	61 f0       	breq	.+24     	; 0x1550 <__fp_cmp+0x46>
    1538:	23 2b       	or	r18, r19
    153a:	24 2b       	or	r18, r20
    153c:	25 2b       	or	r18, r21
    153e:	21 f4       	brne	.+8      	; 0x1548 <__fp_cmp+0x3e>
    1540:	08 95       	ret
    1542:	0a 26       	eor	r0, r26
    1544:	09 f4       	brne	.+2      	; 0x1548 <__fp_cmp+0x3e>
    1546:	a1 40       	sbci	r26, 0x01	; 1
    1548:	a6 95       	lsr	r26
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	81 1d       	adc	r24, r1
    154e:	81 1d       	adc	r24, r1
    1550:	08 95       	ret

00001552 <__fp_split3>:
    1552:	57 fd       	sbrc	r21, 7
    1554:	90 58       	subi	r25, 0x80	; 128
    1556:	44 0f       	add	r20, r20
    1558:	55 1f       	adc	r21, r21
    155a:	59 f0       	breq	.+22     	; 0x1572 <__fp_splitA+0x10>
    155c:	5f 3f       	cpi	r21, 0xFF	; 255
    155e:	71 f0       	breq	.+28     	; 0x157c <__fp_splitA+0x1a>
    1560:	47 95       	ror	r20

00001562 <__fp_splitA>:
    1562:	88 0f       	add	r24, r24
    1564:	97 fb       	bst	r25, 7
    1566:	99 1f       	adc	r25, r25
    1568:	61 f0       	breq	.+24     	; 0x1582 <__fp_splitA+0x20>
    156a:	9f 3f       	cpi	r25, 0xFF	; 255
    156c:	79 f0       	breq	.+30     	; 0x158c <__fp_splitA+0x2a>
    156e:	87 95       	ror	r24
    1570:	08 95       	ret
    1572:	12 16       	cp	r1, r18
    1574:	13 06       	cpc	r1, r19
    1576:	14 06       	cpc	r1, r20
    1578:	55 1f       	adc	r21, r21
    157a:	f2 cf       	rjmp	.-28     	; 0x1560 <__fp_split3+0xe>
    157c:	46 95       	lsr	r20
    157e:	f1 df       	rcall	.-30     	; 0x1562 <__fp_splitA>
    1580:	08 c0       	rjmp	.+16     	; 0x1592 <__fp_splitA+0x30>
    1582:	16 16       	cp	r1, r22
    1584:	17 06       	cpc	r1, r23
    1586:	18 06       	cpc	r1, r24
    1588:	99 1f       	adc	r25, r25
    158a:	f1 cf       	rjmp	.-30     	; 0x156e <__fp_splitA+0xc>
    158c:	86 95       	lsr	r24
    158e:	71 05       	cpc	r23, r1
    1590:	61 05       	cpc	r22, r1
    1592:	08 94       	sec
    1594:	08 95       	ret

00001596 <__fp_zero>:
    1596:	e8 94       	clt

00001598 <__fp_szero>:
    1598:	bb 27       	eor	r27, r27
    159a:	66 27       	eor	r22, r22
    159c:	77 27       	eor	r23, r23
    159e:	cb 01       	movw	r24, r22
    15a0:	97 f9       	bld	r25, 7
    15a2:	08 95       	ret

000015a4 <__gesf2>:
    15a4:	0e 94 85 0a 	call	0x150a	; 0x150a <__fp_cmp>
    15a8:	08 f4       	brcc	.+2      	; 0x15ac <__gesf2+0x8>
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	08 95       	ret

000015ae <__mulsf3>:
    15ae:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <__mulsf3x>
    15b2:	0c 94 5b 0b 	jmp	0x16b6	; 0x16b6 <__fp_round>
    15b6:	0e 94 4d 0b 	call	0x169a	; 0x169a <__fp_pscA>
    15ba:	38 f0       	brcs	.+14     	; 0x15ca <__mulsf3+0x1c>
    15bc:	0e 94 54 0b 	call	0x16a8	; 0x16a8 <__fp_pscB>
    15c0:	20 f0       	brcs	.+8      	; 0x15ca <__mulsf3+0x1c>
    15c2:	95 23       	and	r25, r21
    15c4:	11 f0       	breq	.+4      	; 0x15ca <__mulsf3+0x1c>
    15c6:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__fp_inf>
    15ca:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__fp_nan>
    15ce:	11 24       	eor	r1, r1
    15d0:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__fp_szero>

000015d4 <__mulsf3x>:
    15d4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <__fp_split3>
    15d8:	70 f3       	brcs	.-36     	; 0x15b6 <__mulsf3+0x8>

000015da <__mulsf3_pse>:
    15da:	95 9f       	mul	r25, r21
    15dc:	c1 f3       	breq	.-16     	; 0x15ce <__mulsf3+0x20>
    15de:	95 0f       	add	r25, r21
    15e0:	50 e0       	ldi	r21, 0x00	; 0
    15e2:	55 1f       	adc	r21, r21
    15e4:	62 9f       	mul	r22, r18
    15e6:	f0 01       	movw	r30, r0
    15e8:	72 9f       	mul	r23, r18
    15ea:	bb 27       	eor	r27, r27
    15ec:	f0 0d       	add	r31, r0
    15ee:	b1 1d       	adc	r27, r1
    15f0:	63 9f       	mul	r22, r19
    15f2:	aa 27       	eor	r26, r26
    15f4:	f0 0d       	add	r31, r0
    15f6:	b1 1d       	adc	r27, r1
    15f8:	aa 1f       	adc	r26, r26
    15fa:	64 9f       	mul	r22, r20
    15fc:	66 27       	eor	r22, r22
    15fe:	b0 0d       	add	r27, r0
    1600:	a1 1d       	adc	r26, r1
    1602:	66 1f       	adc	r22, r22
    1604:	82 9f       	mul	r24, r18
    1606:	22 27       	eor	r18, r18
    1608:	b0 0d       	add	r27, r0
    160a:	a1 1d       	adc	r26, r1
    160c:	62 1f       	adc	r22, r18
    160e:	73 9f       	mul	r23, r19
    1610:	b0 0d       	add	r27, r0
    1612:	a1 1d       	adc	r26, r1
    1614:	62 1f       	adc	r22, r18
    1616:	83 9f       	mul	r24, r19
    1618:	a0 0d       	add	r26, r0
    161a:	61 1d       	adc	r22, r1
    161c:	22 1f       	adc	r18, r18
    161e:	74 9f       	mul	r23, r20
    1620:	33 27       	eor	r19, r19
    1622:	a0 0d       	add	r26, r0
    1624:	61 1d       	adc	r22, r1
    1626:	23 1f       	adc	r18, r19
    1628:	84 9f       	mul	r24, r20
    162a:	60 0d       	add	r22, r0
    162c:	21 1d       	adc	r18, r1
    162e:	82 2f       	mov	r24, r18
    1630:	76 2f       	mov	r23, r22
    1632:	6a 2f       	mov	r22, r26
    1634:	11 24       	eor	r1, r1
    1636:	9f 57       	subi	r25, 0x7F	; 127
    1638:	50 40       	sbci	r21, 0x00	; 0
    163a:	9a f0       	brmi	.+38     	; 0x1662 <__mulsf3_pse+0x88>
    163c:	f1 f0       	breq	.+60     	; 0x167a <__mulsf3_pse+0xa0>
    163e:	88 23       	and	r24, r24
    1640:	4a f0       	brmi	.+18     	; 0x1654 <__mulsf3_pse+0x7a>
    1642:	ee 0f       	add	r30, r30
    1644:	ff 1f       	adc	r31, r31
    1646:	bb 1f       	adc	r27, r27
    1648:	66 1f       	adc	r22, r22
    164a:	77 1f       	adc	r23, r23
    164c:	88 1f       	adc	r24, r24
    164e:	91 50       	subi	r25, 0x01	; 1
    1650:	50 40       	sbci	r21, 0x00	; 0
    1652:	a9 f7       	brne	.-22     	; 0x163e <__mulsf3_pse+0x64>
    1654:	9e 3f       	cpi	r25, 0xFE	; 254
    1656:	51 05       	cpc	r21, r1
    1658:	80 f0       	brcs	.+32     	; 0x167a <__mulsf3_pse+0xa0>
    165a:	0c 94 44 0b 	jmp	0x1688	; 0x1688 <__fp_inf>
    165e:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__fp_szero>
    1662:	5f 3f       	cpi	r21, 0xFF	; 255
    1664:	e4 f3       	brlt	.-8      	; 0x165e <__mulsf3_pse+0x84>
    1666:	98 3e       	cpi	r25, 0xE8	; 232
    1668:	d4 f3       	brlt	.-12     	; 0x165e <__mulsf3_pse+0x84>
    166a:	86 95       	lsr	r24
    166c:	77 95       	ror	r23
    166e:	67 95       	ror	r22
    1670:	b7 95       	ror	r27
    1672:	f7 95       	ror	r31
    1674:	e7 95       	ror	r30
    1676:	9f 5f       	subi	r25, 0xFF	; 255
    1678:	c1 f7       	brne	.-16     	; 0x166a <__mulsf3_pse+0x90>
    167a:	fe 2b       	or	r31, r30
    167c:	88 0f       	add	r24, r24
    167e:	91 1d       	adc	r25, r1
    1680:	96 95       	lsr	r25
    1682:	87 95       	ror	r24
    1684:	97 f9       	bld	r25, 7
    1686:	08 95       	ret

00001688 <__fp_inf>:
    1688:	97 f9       	bld	r25, 7
    168a:	9f 67       	ori	r25, 0x7F	; 127
    168c:	80 e8       	ldi	r24, 0x80	; 128
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	08 95       	ret

00001694 <__fp_nan>:
    1694:	9f ef       	ldi	r25, 0xFF	; 255
    1696:	80 ec       	ldi	r24, 0xC0	; 192
    1698:	08 95       	ret

0000169a <__fp_pscA>:
    169a:	00 24       	eor	r0, r0
    169c:	0a 94       	dec	r0
    169e:	16 16       	cp	r1, r22
    16a0:	17 06       	cpc	r1, r23
    16a2:	18 06       	cpc	r1, r24
    16a4:	09 06       	cpc	r0, r25
    16a6:	08 95       	ret

000016a8 <__fp_pscB>:
    16a8:	00 24       	eor	r0, r0
    16aa:	0a 94       	dec	r0
    16ac:	12 16       	cp	r1, r18
    16ae:	13 06       	cpc	r1, r19
    16b0:	14 06       	cpc	r1, r20
    16b2:	05 06       	cpc	r0, r21
    16b4:	08 95       	ret

000016b6 <__fp_round>:
    16b6:	09 2e       	mov	r0, r25
    16b8:	03 94       	inc	r0
    16ba:	00 0c       	add	r0, r0
    16bc:	11 f4       	brne	.+4      	; 0x16c2 <__fp_round+0xc>
    16be:	88 23       	and	r24, r24
    16c0:	52 f0       	brmi	.+20     	; 0x16d6 <__fp_round+0x20>
    16c2:	bb 0f       	add	r27, r27
    16c4:	40 f4       	brcc	.+16     	; 0x16d6 <__fp_round+0x20>
    16c6:	bf 2b       	or	r27, r31
    16c8:	11 f4       	brne	.+4      	; 0x16ce <__fp_round+0x18>
    16ca:	60 ff       	sbrs	r22, 0
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <__fp_round+0x20>
    16ce:	6f 5f       	subi	r22, 0xFF	; 255
    16d0:	7f 4f       	sbci	r23, 0xFF	; 255
    16d2:	8f 4f       	sbci	r24, 0xFF	; 255
    16d4:	9f 4f       	sbci	r25, 0xFF	; 255
    16d6:	08 95       	ret

000016d8 <_exit>:
    16d8:	f8 94       	cli

000016da <__stop_program>:
    16da:	ff cf       	rjmp	.-2      	; 0x16da <__stop_program>
