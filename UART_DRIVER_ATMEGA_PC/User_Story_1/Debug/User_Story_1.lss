
User_Story_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000038c  00000400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085e  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ad  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000516  00000000  00000000  00001407  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00001920  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003eb  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000232  00000000  00000000  00001e47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002079  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 19 01 	call	0x232	; 0x232 <main>
  7a:	0c 94 c4 01 	jmp	0x388	; 0x388 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDirection>:
/* Parameters : uint8 , uint8 */
/* I/p : uint8 , uint8 */
/* O/p : N/A */
/* Return : void */
/* Function that initialize direction for pin at any port from 0 to 39 pins in 4 ports input or output   */
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	00 d0       	rcall	.+0      	; 0x88 <DIO_SetPinDirection+0x6>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	6a 83       	std	Y+2, r22	; 0x02
	
	if( (PinNum >= 0U) && (PinNum <= 7U) ){
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	60 f5       	brcc	.+88     	; 0xee <DIO_SetPinDirection+0x6c>
		if(PinDirection == 0U){
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	88 23       	and	r24, r24
  9a:	a9 f4       	brne	.+42     	; 0xc6 <DIO_SetPinDirection+0x44>
			Clear_Bit(DDRA,PinNum);
  9c:	8a e3       	ldi	r24, 0x3A	; 58
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	2a e3       	ldi	r18, 0x3A	; 58
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	60 81       	ld	r22, Z
  a8:	29 81       	ldd	r18, Y+1	; 0x01
  aa:	42 2f       	mov	r20, r18
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_SetPinDirection+0x36>
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	4a 95       	dec	r20
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_SetPinDirection+0x32>
  bc:	20 95       	com	r18
  be:	26 23       	and	r18, r22
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
  c4:	b0 c0       	rjmp	.+352    	; 0x226 <DIO_SetPinDirection+0x1a4>
	if( (PinNum >= 0U) && (PinNum <= 7U) ){
		if(PinDirection == 0U){
			Clear_Bit(DDRA,PinNum);
		}
		else{
			Set_Bit(DDRA,PinNum);
  c6:	8a e3       	ldi	r24, 0x3A	; 58
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2a e3       	ldi	r18, 0x3A	; 58
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	60 81       	ld	r22, Z
  d2:	29 81       	ldd	r18, Y+1	; 0x01
  d4:	42 2f       	mov	r20, r18
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_SetPinDirection+0x60>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	4a 95       	dec	r20
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_SetPinDirection+0x5c>
  e6:	26 2b       	or	r18, r22
  e8:	fc 01       	movw	r30, r24
  ea:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
  ec:	9c c0       	rjmp	.+312    	; 0x226 <DIO_SetPinDirection+0x1a4>
		}
		else{
			Set_Bit(DDRA,PinNum);
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	88 30       	cpi	r24, 0x08	; 8
  f2:	88 f1       	brcs	.+98     	; 0x156 <DIO_SetPinDirection+0xd4>
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	80 31       	cpi	r24, 0x10	; 16
  f8:	70 f5       	brcc	.+92     	; 0x156 <DIO_SetPinDirection+0xd4>
		if(PinDirection == 0U){
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	88 23       	and	r24, r24
  fe:	b1 f4       	brne	.+44     	; 0x12c <DIO_SetPinDirection+0xaa>
			Clear_Bit(DDRB,PinNum-8U);
 100:	87 e3       	ldi	r24, 0x37	; 55
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	27 e3       	ldi	r18, 0x37	; 55
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	60 81       	ld	r22, Z
 10c:	29 81       	ldd	r18, Y+1	; 0x01
 10e:	28 50       	subi	r18, 0x08	; 8
 110:	42 2f       	mov	r20, r18
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_SetPinDirection+0x9c>
 11a:	22 0f       	add	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	4a 95       	dec	r20
 120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_SetPinDirection+0x98>
 122:	20 95       	com	r18
 124:	26 23       	and	r18, r22
 126:	fc 01       	movw	r30, r24
 128:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRA,PinNum);
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
		if(PinDirection == 0U){
 12a:	7d c0       	rjmp	.+250    	; 0x226 <DIO_SetPinDirection+0x1a4>
			Clear_Bit(DDRB,PinNum-8U);
		}
		else{
			Set_Bit(DDRB,PinNum-8U);
 12c:	87 e3       	ldi	r24, 0x37	; 55
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	27 e3       	ldi	r18, 0x37	; 55
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	f9 01       	movw	r30, r18
 136:	60 81       	ld	r22, Z
 138:	29 81       	ldd	r18, Y+1	; 0x01
 13a:	28 50       	subi	r18, 0x08	; 8
 13c:	42 2f       	mov	r20, r18
 13e:	50 e0       	ldi	r21, 0x00	; 0
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_SetPinDirection+0xc8>
 146:	22 0f       	add	r18, r18
 148:	33 1f       	adc	r19, r19
 14a:	4a 95       	dec	r20
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_SetPinDirection+0xc4>
 14e:	26 2b       	or	r18, r22
 150:	fc 01       	movw	r30, r24
 152:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRA,PinNum);
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
		if(PinDirection == 0U){
 154:	68 c0       	rjmp	.+208    	; 0x226 <DIO_SetPinDirection+0x1a4>
		}
		else{
			Set_Bit(DDRB,PinNum-8U);
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	80 31       	cpi	r24, 0x10	; 16
 15a:	88 f1       	brcs	.+98     	; 0x1be <DIO_SetPinDirection+0x13c>
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	88 31       	cpi	r24, 0x18	; 24
 160:	70 f5       	brcc	.+92     	; 0x1be <DIO_SetPinDirection+0x13c>
		if(PinDirection == 0U){
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	88 23       	and	r24, r24
 166:	b1 f4       	brne	.+44     	; 0x194 <DIO_SetPinDirection+0x112>
			Clear_Bit(DDRC,PinNum-16);
 168:	84 e3       	ldi	r24, 0x34	; 52
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	24 e3       	ldi	r18, 0x34	; 52
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	60 81       	ld	r22, Z
 174:	29 81       	ldd	r18, Y+1	; 0x01
 176:	20 51       	subi	r18, 0x10	; 16
 178:	42 2f       	mov	r20, r18
 17a:	50 e0       	ldi	r21, 0x00	; 0
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_SetPinDirection+0x104>
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	4a 95       	dec	r20
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_SetPinDirection+0x100>
 18a:	20 95       	com	r18
 18c:	26 23       	and	r18, r22
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRB,PinNum-8U);
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
		if(PinDirection == 0U){
 192:	49 c0       	rjmp	.+146    	; 0x226 <DIO_SetPinDirection+0x1a4>
			Clear_Bit(DDRC,PinNum-16);
		}
		else{
			Set_Bit(DDRC,PinNum-16);
 194:	84 e3       	ldi	r24, 0x34	; 52
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	24 e3       	ldi	r18, 0x34	; 52
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	f9 01       	movw	r30, r18
 19e:	60 81       	ld	r22, Z
 1a0:	29 81       	ldd	r18, Y+1	; 0x01
 1a2:	20 51       	subi	r18, 0x10	; 16
 1a4:	42 2f       	mov	r20, r18
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPinDirection+0x130>
 1ae:	22 0f       	add	r18, r18
 1b0:	33 1f       	adc	r19, r19
 1b2:	4a 95       	dec	r20
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPinDirection+0x12c>
 1b6:	26 2b       	or	r18, r22
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRB,PinNum-8U);
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
		if(PinDirection == 0U){
 1bc:	34 c0       	rjmp	.+104    	; 0x226 <DIO_SetPinDirection+0x1a4>
		}
		else{
			Set_Bit(DDRC,PinNum-16);
		}
	}
	else if( (PinNum >= 24U) && (PinNum <= 31U) ){
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	88 31       	cpi	r24, 0x18	; 24
 1c2:	88 f1       	brcs	.+98     	; 0x226 <DIO_SetPinDirection+0x1a4>
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	80 32       	cpi	r24, 0x20	; 32
 1c8:	70 f5       	brcc	.+92     	; 0x226 <DIO_SetPinDirection+0x1a4>
		if(PinDirection == 0U){
 1ca:	8a 81       	ldd	r24, Y+2	; 0x02
 1cc:	88 23       	and	r24, r24
 1ce:	b1 f4       	brne	.+44     	; 0x1fc <DIO_SetPinDirection+0x17a>
			Clear_Bit(DDRD,PinNum-24);
 1d0:	81 e3       	ldi	r24, 0x31	; 49
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	21 e3       	ldi	r18, 0x31	; 49
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	f9 01       	movw	r30, r18
 1da:	60 81       	ld	r22, Z
 1dc:	29 81       	ldd	r18, Y+1	; 0x01
 1de:	28 51       	subi	r18, 0x18	; 24
 1e0:	42 2f       	mov	r20, r18
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_SetPinDirection+0x16c>
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	4a 95       	dec	r20
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_SetPinDirection+0x168>
 1f2:	20 95       	com	r18
 1f4:	26 23       	and	r18, r22
 1f6:	fc 01       	movw	r30, r24
 1f8:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
 1fa:	15 c0       	rjmp	.+42     	; 0x226 <DIO_SetPinDirection+0x1a4>
	else if( (PinNum >= 24U) && (PinNum <= 31U) ){
		if(PinDirection == 0U){
			Clear_Bit(DDRD,PinNum-24);
		}
		else{
			Set_Bit(DDRD,PinNum-24);
 1fc:	81 e3       	ldi	r24, 0x31	; 49
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	21 e3       	ldi	r18, 0x31	; 49
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	f9 01       	movw	r30, r18
 206:	60 81       	ld	r22, Z
 208:	29 81       	ldd	r18, Y+1	; 0x01
 20a:	28 51       	subi	r18, 0x18	; 24
 20c:	42 2f       	mov	r20, r18
 20e:	50 e0       	ldi	r21, 0x00	; 0
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_SetPinDirection+0x198>
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	4a 95       	dec	r20
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_SetPinDirection+0x194>
 21e:	26 2b       	or	r18, r22
 220:	fc 01       	movw	r30, r24
 222:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
 224:	00 c0       	rjmp	.+0      	; 0x226 <DIO_SetPinDirection+0x1a4>
 226:	00 00       	nop
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <main>:
#include "includes/BitwiseOperations.h"
#include "includes/uart.h"


int main(void)
{
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	00 d0       	rcall	.+0      	; 0x238 <main+0x6>
 238:	00 d0       	rcall	.+0      	; 0x23a <main+0x8>
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(BUTTON0,INPUT);
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	84 e1       	ldi	r24, 0x14	; 20
 242:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(BUTTON1,INPUT);
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	8a e0       	ldi	r24, 0x0A	; 10
 24a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	DIO_SetPinDirection(11,OUTPUT);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	8b e0       	ldi	r24, 0x0B	; 11
 252:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDirection>
	uint8 data ;
	uint8 array[4] = {'A','T','\r','\n'};
 256:	81 e4       	ldi	r24, 0x41	; 65
 258:	89 83       	std	Y+1, r24	; 0x01
 25a:	84 e5       	ldi	r24, 0x54	; 84
 25c:	8a 83       	std	Y+2, r24	; 0x02
 25e:	8d e0       	ldi	r24, 0x0D	; 13
 260:	8b 83       	std	Y+3, r24	; 0x03
 262:	8a e0       	ldi	r24, 0x0A	; 10
 264:	8c 83       	std	Y+4, r24	; 0x04
	UART_Inti();/*INIT FUN FOR UART */
 266:	0e 94 3c 01 	call	0x278	; 0x278 <UART_Inti>
	while(1)
	{
		UART_Send_String(array,4);
 26a:	64 e0       	ldi	r22, 0x04	; 4
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	ce 01       	movw	r24, r28
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Send_String>
		}
		else if(data == '3')
		{
	     DIO_WritePin(11,HIGH);
		}*/
	}
 276:	f9 cf       	rjmp	.-14     	; 0x26a <main+0x38>

00000278 <UART_Inti>:
{
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(Get_Bit(UCSRA,RXC)==ZERO){};
    return UDR;	/* return from this fun the sent value by uart which is stored in UDR register */
}
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	28 97       	sbiw	r28, 0x08	; 8
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	28 e0       	ldi	r18, 0x08	; 8
 28e:	e0 e6       	ldi	r30, 0x60	; 96
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	ce 01       	movw	r24, r28
 294:	01 96       	adiw	r24, 0x01	; 1
 296:	dc 01       	movw	r26, r24
 298:	01 90       	ld	r0, Z+
 29a:	0d 92       	st	X+, r0
 29c:	2a 95       	dec	r18
 29e:	e1 f7       	brne	.-8      	; 0x298 <UART_Inti+0x20>
 2a0:	8a e2       	ldi	r24, 0x2A	; 42
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	2a e2       	ldi	r18, 0x2A	; 42
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	20 81       	ld	r18, Z
 2ac:	28 61       	ori	r18, 0x18	; 24
 2ae:	fc 01       	movw	r30, r24
 2b0:	20 83       	st	Z, r18
 2b2:	8f 81       	ldd	r24, Y+7	; 0x07
 2b4:	88 30       	cpi	r24, 0x08	; 8
 2b6:	49 f4       	brne	.+18     	; 0x2ca <UART_Inti+0x52>
 2b8:	80 e4       	ldi	r24, 0x40	; 64
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	20 e4       	ldi	r18, 0x40	; 64
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	20 81       	ld	r18, Z
 2c4:	26 68       	ori	r18, 0x86	; 134
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
 2ca:	88 85       	ldd	r24, Y+8	; 0x08
 2cc:	88 23       	and	r24, r24
 2ce:	49 f0       	breq	.+18     	; 0x2e2 <UART_Inti+0x6a>
 2d0:	8b e2       	ldi	r24, 0x2B	; 43
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	2b e2       	ldi	r18, 0x2B	; 43
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	f9 01       	movw	r30, r18
 2da:	20 81       	ld	r18, Z
 2dc:	22 60       	ori	r18, 0x02	; 2
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
 2e2:	80 e4       	ldi	r24, 0x40	; 64
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	fc 01       	movw	r30, r24
 2e8:	10 82       	st	Z, r1
 2ea:	89 e2       	ldi	r24, 0x29	; 41
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	2f ec       	ldi	r18, 0xCF	; 207
 2f0:	fc 01       	movw	r30, r24
 2f2:	20 83       	st	Z, r18
 2f4:	00 00       	nop
 2f6:	28 96       	adiw	r28, 0x08	; 8
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	f8 94       	cli
 2fc:	de bf       	out	0x3e, r29	; 62
 2fe:	0f be       	out	0x3f, r0	; 63
 300:	cd bf       	out	0x3d, r28	; 61
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	08 95       	ret

00000308 <UART_Transmit>:
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	1f 92       	push	r1
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	89 83       	std	Y+1, r24	; 0x01
 314:	00 00       	nop
 316:	8b e2       	ldi	r24, 0x2B	; 43
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	fc 01       	movw	r30, r24
 31c:	80 81       	ld	r24, Z
 31e:	88 2f       	mov	r24, r24
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	80 72       	andi	r24, 0x20	; 32
 324:	99 27       	eor	r25, r25
 326:	89 2b       	or	r24, r25
 328:	b1 f3       	breq	.-20     	; 0x316 <UART_Transmit+0xe>
 32a:	8c e2       	ldi	r24, 0x2C	; 44
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	29 81       	ldd	r18, Y+1	; 0x01
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
 334:	00 00       	nop
 336:	0f 90       	pop	r0
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	08 95       	ret

0000033e <UART_Send_String>:
/* I/p :pointer & size  */
/* O/p : N/A */
/* Return : N/A */
/* Function that send array of characters*/
void UART_Send_String(uint8* ptr,uint8 size)
{
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	00 d0       	rcall	.+0      	; 0x344 <UART_Send_String+0x6>
 344:	00 d0       	rcall	.+0      	; 0x346 <UART_Send_String+0x8>
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	9b 83       	std	Y+3, r25	; 0x03
 34c:	8a 83       	std	Y+2, r24	; 0x02
 34e:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<size;i++)
 350:	19 82       	std	Y+1, r1	; 0x01
 352:	0e c0       	rjmp	.+28     	; 0x370 <UART_Send_String+0x32>
	{
		UART_Transmit(*(ptr+i));
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	88 2f       	mov	r24, r24
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	2a 81       	ldd	r18, Y+2	; 0x02
 35c:	3b 81       	ldd	r19, Y+3	; 0x03
 35e:	82 0f       	add	r24, r18
 360:	93 1f       	adc	r25, r19
 362:	fc 01       	movw	r30, r24
 364:	80 81       	ld	r24, Z
 366:	0e 94 84 01 	call	0x308	; 0x308 <UART_Transmit>
/* Return : N/A */
/* Function that send array of characters*/
void UART_Send_String(uint8* ptr,uint8 size)
{
	uint8 i;
	for(i=0;i<size;i++)
 36a:	89 81       	ldd	r24, Y+1	; 0x01
 36c:	8f 5f       	subi	r24, 0xFF	; 255
 36e:	89 83       	std	Y+1, r24	; 0x01
 370:	99 81       	ldd	r25, Y+1	; 0x01
 372:	8c 81       	ldd	r24, Y+4	; 0x04
 374:	98 17       	cp	r25, r24
 376:	70 f3       	brcs	.-36     	; 0x354 <UART_Send_String+0x16>
	{
		UART_Transmit(*(ptr+i));
	}
	
	
 378:	00 00       	nop
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	df 91       	pop	r29
 384:	cf 91       	pop	r28
 386:	08 95       	ret

00000388 <_exit>:
 388:	f8 94       	cli

0000038a <__stop_program>:
 38a:	ff cf       	rjmp	.-2      	; 0x38a <__stop_program>
