
MOOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000740  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000770  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e0  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000735  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005eb  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004c7  00000000  00000000  00002499  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 58 01 	jmp	0x2b0	; 0x2b0 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 40 01 	call	0x280	; 0x280 <main>
  74:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
	}
	else{
		
	}
	
}
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	e8 f4       	brcc	.+58     	; 0xba <DIO_WritePin+0x3e>
  80:	61 11       	cpse	r22, r1
  82:	0e c0       	rjmp	.+28     	; 0xa0 <DIO_WritePin+0x24>
  84:	4b b3       	in	r20, 0x1b	; 27
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	b9 01       	movw	r22, r18
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_WritePin+0x16>
  8e:	66 0f       	add	r22, r22
  90:	77 1f       	adc	r23, r23
  92:	8a 95       	dec	r24
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_WritePin+0x12>
  96:	cb 01       	movw	r24, r22
  98:	80 95       	com	r24
  9a:	84 23       	and	r24, r20
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	08 95       	ret
  a0:	4b b3       	in	r20, 0x1b	; 27
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	b9 01       	movw	r22, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_WritePin+0x32>
  aa:	66 0f       	add	r22, r22
  ac:	77 1f       	adc	r23, r23
  ae:	8a 95       	dec	r24
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_WritePin+0x2e>
  b2:	cb 01       	movw	r24, r22
  b4:	84 2b       	or	r24, r20
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	08 95       	ret
  ba:	98 ef       	ldi	r25, 0xF8	; 248
  bc:	98 0f       	add	r25, r24
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	e8 f4       	brcc	.+58     	; 0xfc <DIO_WritePin+0x80>
  c2:	61 11       	cpse	r22, r1
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <DIO_WritePin+0x66>
  c6:	48 b3       	in	r20, 0x18	; 24
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_WritePin+0x58>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	9a 95       	dec	r25
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_WritePin+0x54>
  d8:	cb 01       	movw	r24, r22
  da:	80 95       	com	r24
  dc:	84 23       	and	r24, r20
  de:	88 bb       	out	0x18, r24	; 24
  e0:	08 95       	ret
  e2:	48 b3       	in	r20, 0x18	; 24
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	b9 01       	movw	r22, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_WritePin+0x74>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	9a 95       	dec	r25
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_WritePin+0x70>
  f4:	cb 01       	movw	r24, r22
  f6:	84 2b       	or	r24, r20
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	08 95       	ret
  fc:	90 ef       	ldi	r25, 0xF0	; 240
  fe:	98 0f       	add	r25, r24
 100:	98 30       	cpi	r25, 0x08	; 8
 102:	e8 f4       	brcc	.+58     	; 0x13e <DIO_WritePin+0xc2>
 104:	61 11       	cpse	r22, r1
 106:	0e c0       	rjmp	.+28     	; 0x124 <DIO_WritePin+0xa8>
 108:	45 b3       	in	r20, 0x15	; 21
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_WritePin+0x9a>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	9a 95       	dec	r25
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_WritePin+0x96>
 11a:	cb 01       	movw	r24, r22
 11c:	80 95       	com	r24
 11e:	84 23       	and	r24, r20
 120:	85 bb       	out	0x15, r24	; 21
 122:	08 95       	ret
 124:	45 b3       	in	r20, 0x15	; 21
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_WritePin+0xb6>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	9a 95       	dec	r25
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_WritePin+0xb2>
 136:	cb 01       	movw	r24, r22
 138:	84 2b       	or	r24, r20
 13a:	85 bb       	out	0x15, r24	; 21
 13c:	08 95       	ret
 13e:	88 51       	subi	r24, 0x18	; 24
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	e0 f4       	brcc	.+56     	; 0x17c <DIO_WritePin+0x100>
 144:	61 11       	cpse	r22, r1
 146:	0e c0       	rjmp	.+28     	; 0x164 <DIO_WritePin+0xe8>
 148:	42 b3       	in	r20, 0x12	; 18
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_WritePin+0xda>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_WritePin+0xd6>
 15a:	cb 01       	movw	r24, r22
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	82 bb       	out	0x12, r24	; 18
 162:	08 95       	ret
 164:	42 b3       	in	r20, 0x12	; 18
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_WritePin+0xf6>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_WritePin+0xf2>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	08 95       	ret

0000017e <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	
	if( (PinNum >= 0U) && (PinNum <= 7U) ){
 17e:	88 30       	cpi	r24, 0x08	; 8
 180:	e8 f4       	brcc	.+58     	; 0x1bc <DIO_SetPinDirection+0x3e>
		if(PinDirection == 0U){
 182:	61 11       	cpse	r22, r1
 184:	0e c0       	rjmp	.+28     	; 0x1a2 <DIO_SetPinDirection+0x24>
			Clear_Bit(DDRA,PinNum);
 186:	4a b3       	in	r20, 0x1a	; 26
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	b9 01       	movw	r22, r18
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_SetPinDirection+0x16>
 190:	66 0f       	add	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	8a 95       	dec	r24
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_SetPinDirection+0x12>
 198:	cb 01       	movw	r24, r22
 19a:	80 95       	com	r24
 19c:	84 23       	and	r24, r20
 19e:	8a bb       	out	0x1a, r24	; 26
 1a0:	08 95       	ret
		}
		else{
			Set_Bit(DDRA,PinNum);
 1a2:	4a b3       	in	r20, 0x1a	; 26
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	b9 01       	movw	r22, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinDirection+0x32>
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinDirection+0x2e>
 1b4:	cb 01       	movw	r24, r22
 1b6:	84 2b       	or	r24, r20
 1b8:	8a bb       	out	0x1a, r24	; 26
 1ba:	08 95       	ret
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
 1bc:	98 ef       	ldi	r25, 0xF8	; 248
 1be:	98 0f       	add	r25, r24
 1c0:	98 30       	cpi	r25, 0x08	; 8
 1c2:	e8 f4       	brcc	.+58     	; 0x1fe <DIO_SetPinDirection+0x80>
		if(PinDirection == 0U){
 1c4:	61 11       	cpse	r22, r1
 1c6:	0e c0       	rjmp	.+28     	; 0x1e4 <DIO_SetPinDirection+0x66>
			Clear_Bit(DDRB,PinNum-8U);
 1c8:	47 b3       	in	r20, 0x17	; 23
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_SetPinDirection+0x58>
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	9a 95       	dec	r25
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_SetPinDirection+0x54>
 1da:	cb 01       	movw	r24, r22
 1dc:	80 95       	com	r24
 1de:	84 23       	and	r24, r20
 1e0:	87 bb       	out	0x17, r24	; 23
 1e2:	08 95       	ret
		}
		else{
			Set_Bit(DDRB,PinNum-8U);
 1e4:	47 b3       	in	r20, 0x17	; 23
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	b9 01       	movw	r22, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_SetPinDirection+0x74>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	9a 95       	dec	r25
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_SetPinDirection+0x70>
 1f6:	cb 01       	movw	r24, r22
 1f8:	84 2b       	or	r24, r20
 1fa:	87 bb       	out	0x17, r24	; 23
 1fc:	08 95       	ret
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
 1fe:	90 ef       	ldi	r25, 0xF0	; 240
 200:	98 0f       	add	r25, r24
 202:	98 30       	cpi	r25, 0x08	; 8
 204:	e8 f4       	brcc	.+58     	; 0x240 <DIO_SetPinDirection+0xc2>
		if(PinDirection == 0U){
 206:	61 11       	cpse	r22, r1
 208:	0e c0       	rjmp	.+28     	; 0x226 <DIO_SetPinDirection+0xa8>
			Clear_Bit(DDRC,PinNum-16);
 20a:	44 b3       	in	r20, 0x14	; 20
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	b9 01       	movw	r22, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_SetPinDirection+0x9a>
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	9a 95       	dec	r25
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_SetPinDirection+0x96>
 21c:	cb 01       	movw	r24, r22
 21e:	80 95       	com	r24
 220:	84 23       	and	r24, r20
 222:	84 bb       	out	0x14, r24	; 20
 224:	08 95       	ret
		}
		else{
			Set_Bit(DDRC,PinNum-16);
 226:	44 b3       	in	r20, 0x14	; 20
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	b9 01       	movw	r22, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPinDirection+0xb6>
 230:	66 0f       	add	r22, r22
 232:	77 1f       	adc	r23, r23
 234:	9a 95       	dec	r25
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPinDirection+0xb2>
 238:	cb 01       	movw	r24, r22
 23a:	84 2b       	or	r24, r20
 23c:	84 bb       	out	0x14, r24	; 20
 23e:	08 95       	ret
		}
	}
	else if( (PinNum >= 24U) && (PinNum <= 31U) ){
 240:	88 51       	subi	r24, 0x18	; 24
 242:	88 30       	cpi	r24, 0x08	; 8
 244:	e0 f4       	brcc	.+56     	; 0x27e <DIO_SetPinDirection+0x100>
		if(PinDirection == 0U){
 246:	61 11       	cpse	r22, r1
 248:	0e c0       	rjmp	.+28     	; 0x266 <DIO_SetPinDirection+0xe8>
			Clear_Bit(DDRD,PinNum-24);
 24a:	41 b3       	in	r20, 0x11	; 17
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_SetPinDirection+0xda>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_SetPinDirection+0xd6>
 25c:	cb 01       	movw	r24, r22
 25e:	80 95       	com	r24
 260:	84 23       	and	r24, r20
 262:	81 bb       	out	0x11, r24	; 17
 264:	08 95       	ret
		}
		else{
			Set_Bit(DDRD,PinNum-24);
 266:	41 b3       	in	r20, 0x11	; 17
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinDirection+0xf6>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinDirection+0xf2>
 278:	cb 01       	movw	r24, r22
 27a:	84 2b       	or	r24, r20
 27c:	81 bb       	out	0x11, r24	; 17
 27e:	08 95       	ret

00000280 <main>:
#include "includes/_TIMER_.h"
#include <util/delay.h>

int main(void)
{
  pwm1_init();
 280:	0e 94 7e 01 	call	0x2fc	; 0x2fc <pwm1_init>

while (1)
	{
		  uint8 i ;
		  for(i=0 ; i<100 ;i+=10)
 284:	c0 e0       	ldi	r28, 0x00	; 0
		  {
			  SELECT_DUTY(i);
 286:	6c 2f       	mov	r22, r28
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__floatunsisf>
 292:	0e 94 b6 01 	call	0x36c	; 0x36c <SELECT_DUTY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 296:	2f eb       	ldi	r18, 0xBF	; 191
 298:	87 e2       	ldi	r24, 0x27	; 39
 29a:	99 e0       	ldi	r25, 0x09	; 9
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x1c>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x26>
 2a6:	00 00       	nop
  pwm1_init();

while (1)
	{
		  uint8 i ;
		  for(i=0 ; i<100 ;i+=10)
 2a8:	c6 5f       	subi	r28, 0xF6	; 246
 2aa:	c4 36       	cpi	r28, 0x64	; 100
 2ac:	61 f7       	brne	.-40     	; 0x286 <main+0x6>
 2ae:	ea cf       	rjmp	.-44     	; 0x284 <main+0x4>

000002b0 <__vector_10>:
/* Return : void */
/* Function that initialize EXTERNAL INT2 */
void ISR_INT2_Init(void)
{
	Set_Bit(MCUCSR,ISC2);
	Set_Bit(GICR,INT2);
 2b0:	1f 92       	push	r1
 2b2:	0f 92       	push	r0
 2b4:	0f b6       	in	r0, 0x3f	; 63
 2b6:	0f 92       	push	r0
 2b8:	11 24       	eor	r1, r1
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <g_tick>
 2c2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <g_tick+0x1>
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <g_tick+0x1>
 2cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <g_tick>
 2d0:	9f 91       	pop	r25
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_3>:
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <pwm1_init>:
/* O/p : N/A */
/* Return : void */
/* Function that initialize pwm at fast mode 14 */	
void pwm1_init()
{
	TCNT1H = NUMBER_ZERO;
 2fc:	1d bc       	out	0x2d, r1	; 45
	TCNT1L = NUMBER_ZERO;
 2fe:	1c bc       	out	0x2c, r1	; 44
	
	ICR1H = (TOP_VALUE>>8); /* TOP REGISTER FOR MAX VALUE HIGH */
 300:	8f e0       	ldi	r24, 0x0F	; 15
 302:	87 bd       	out	0x27, r24	; 39
	ICR1L = TOP_VALUE;/* TOP REGISTER FOR MAX VALUE LOW */
 304:	80 ea       	ldi	r24, 0xA0	; 160
 306:	86 bd       	out	0x26, r24	; 38
	
	/*COMPARE REGISTER AS FAST PWM IN TIMER 1 TABLE MODE 14 INITIALIZE WITH ZERO AND CHANGED IN 
	SELECT_DUTY(uint8 duty) FUNCTION */
	OCR1AL=NUMBER_ZERO;
 308:	1a bc       	out	0x2a, r1	; 42
	OCR1AH=NUMBER_ZERO;
	OCR1BH=NUMBER_ZERO;
 30a:	19 bc       	out	0x29, r1	; 41
	OCR1BL=NUMBER_ZERO;
 30c:	18 bc       	out	0x28, r1	; 40

	DIO_SetPinDirection(OC1B,OUTPUT);/*ENABLE  PWM Pins as Out (OCR1B) NUMBER 28 FOR MOTOR A */
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	8c e1       	ldi	r24, 0x1C	; 28
 312:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	DIO_SetPinDirection(OC1A,OUTPUT);/* ENABLE PWM Pins as Out (OCR1A) NUMBER 29 FOR MOTOR B  */
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	8d e1       	ldi	r24, 0x1D	; 29
 31a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	
	/*MOTOR 1 AND 2 DIRECTION PINS AS OUTPUT */
	DIO_SetPinDirection(MOTOR1_DIR_A1,OUTPUT);
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	8a e1       	ldi	r24, 0x1A	; 26
 322:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR1_DIR_B1,OUTPUT);
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	8b e1       	ldi	r24, 0x1B	; 27
 32a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR2_DIR_A2,OUTPUT);
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	8e e1       	ldi	r24, 0x1E	; 30
 332:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR2_DIR_B2,OUTPUT);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	8f e1       	ldi	r24, 0x1F	; 31
 33a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	
	#if(DIRECTION == BACKWORD)
	DIO_WritePin(MOTOR1_DIR_A1,HIGH);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	8a e1       	ldi	r24, 0x1A	; 26
 342:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	DIO_WritePin(MOTOR1_DIR_B1,LOW);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	8b e1       	ldi	r24, 0x1B	; 27
 34a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	DIO_WritePin(MOTOR2_DIR_A2,HIGH);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	8e e1       	ldi	r24, 0x1E	; 30
 352:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	DIO_WritePin(MOTOR2_DIR_B2,LOW);
 356:	60 e0       	ldi	r22, 0x00	; 0
 358:	8f e1       	ldi	r24, 0x1F	; 31
 35a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	DIO_WritePin(MOTOR2_DIR_B2,LOW);
	#endif
	/*TIMER 1 FAST PWM REGISTERS FOR MODE 14 AND PRESCALER 256 AND NON INVERTING MODE */
	Set_Bit(TCCR1A,COM1A1);/*NON INVERTING FAST PWM */
	Set_Bit(TCCR1A,COM1B1);/*NON INVERTING FAST PWM */
	Set_Bit(TCCR1A,WGM11);/*MODE 14 FAST PWM ICE1 */
 35e:	8f b5       	in	r24, 0x2f	; 47
 360:	82 6a       	ori	r24, 0xA2	; 162
 362:	8f bd       	out	0x2f, r24	; 47
	Set_Bit(TCCR1B,WGM12);/*MODE 14 FAST PWM ICE1 */
	Set_Bit(TCCR1B,WGM13);/*MODE 14 FAST PWM ICE1 */
	Set_Bit(TCCR1B,CS12);/*SELECT PRESCALER = 256*/
 364:	8e b5       	in	r24, 0x2e	; 46
 366:	8c 61       	ori	r24, 0x1C	; 28
 368:	8e bd       	out	0x2e, r24	; 46
 36a:	08 95       	ret

0000036c <SELECT_DUTY>:
	/*uint16 compare = (duty*TOP_VALUE)/100;*/
	/*OCR1AH=(compare>>8); 
	OCR1AL=(compare);
	OCR1BH=(compare>>8);
	OCR1BL=(compare);*/
	uint16 compare = (uint16)((duty/100)*(TOP_VALUE+1));
 36c:	20 e0       	ldi	r18, 0x00	; 0
 36e:	30 e0       	ldi	r19, 0x00	; 0
 370:	48 ec       	ldi	r20, 0xC8	; 200
 372:	52 e4       	ldi	r21, 0x42	; 66
 374:	0e 94 c8 01 	call	0x390	; 0x390 <__divsf3>
 378:	20 e0       	ldi	r18, 0x00	; 0
 37a:	30 e1       	ldi	r19, 0x10	; 16
 37c:	4a e7       	ldi	r20, 0x7A	; 122
 37e:	55 e4       	ldi	r21, 0x45	; 69
 380:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__mulsf3>
 384:	0e 94 3a 02 	call	0x474	; 0x474 <__fixunssfsi>
	OCR1AH = compare >> 8 ;
	OCR1AL = compare ;
 388:	6a bd       	out	0x2a, r22	; 42
	OCR1BH = compare >> 8 ;
 38a:	79 bd       	out	0x29, r23	; 41
	OCR1BL = compare ;
 38c:	68 bd       	out	0x28, r22	; 40
 38e:	08 95       	ret

00000390 <__divsf3>:
 390:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__divsf3x>
 394:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_round>
 398:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_pscB>
 39c:	58 f0       	brcs	.+22     	; 0x3b4 <__divsf3+0x24>
 39e:	0e 94 af 02 	call	0x55e	; 0x55e <__fp_pscA>
 3a2:	40 f0       	brcs	.+16     	; 0x3b4 <__divsf3+0x24>
 3a4:	29 f4       	brne	.+10     	; 0x3b0 <__divsf3+0x20>
 3a6:	5f 3f       	cpi	r21, 0xFF	; 255
 3a8:	29 f0       	breq	.+10     	; 0x3b4 <__divsf3+0x24>
 3aa:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_inf>
 3ae:	51 11       	cpse	r21, r1
 3b0:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_szero>
 3b4:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_nan>

000003b8 <__divsf3x>:
 3b8:	0e 94 ce 02 	call	0x59c	; 0x59c <__fp_split3>
 3bc:	68 f3       	brcs	.-38     	; 0x398 <__divsf3+0x8>

000003be <__divsf3_pse>:
 3be:	99 23       	and	r25, r25
 3c0:	b1 f3       	breq	.-20     	; 0x3ae <__divsf3+0x1e>
 3c2:	55 23       	and	r21, r21
 3c4:	91 f3       	breq	.-28     	; 0x3aa <__divsf3+0x1a>
 3c6:	95 1b       	sub	r25, r21
 3c8:	55 0b       	sbc	r21, r21
 3ca:	bb 27       	eor	r27, r27
 3cc:	aa 27       	eor	r26, r26
 3ce:	62 17       	cp	r22, r18
 3d0:	73 07       	cpc	r23, r19
 3d2:	84 07       	cpc	r24, r20
 3d4:	38 f0       	brcs	.+14     	; 0x3e4 <__divsf3_pse+0x26>
 3d6:	9f 5f       	subi	r25, 0xFF	; 255
 3d8:	5f 4f       	sbci	r21, 0xFF	; 255
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
 3de:	44 1f       	adc	r20, r20
 3e0:	aa 1f       	adc	r26, r26
 3e2:	a9 f3       	breq	.-22     	; 0x3ce <__divsf3_pse+0x10>
 3e4:	35 d0       	rcall	.+106    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3e6:	0e 2e       	mov	r0, r30
 3e8:	3a f0       	brmi	.+14     	; 0x3f8 <__divsf3_pse+0x3a>
 3ea:	e0 e8       	ldi	r30, 0x80	; 128
 3ec:	32 d0       	rcall	.+100    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3ee:	91 50       	subi	r25, 0x01	; 1
 3f0:	50 40       	sbci	r21, 0x00	; 0
 3f2:	e6 95       	lsr	r30
 3f4:	00 1c       	adc	r0, r0
 3f6:	ca f7       	brpl	.-14     	; 0x3ea <__divsf3_pse+0x2c>
 3f8:	2b d0       	rcall	.+86     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3fa:	fe 2f       	mov	r31, r30
 3fc:	29 d0       	rcall	.+82     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	88 1f       	adc	r24, r24
 404:	bb 1f       	adc	r27, r27
 406:	26 17       	cp	r18, r22
 408:	37 07       	cpc	r19, r23
 40a:	48 07       	cpc	r20, r24
 40c:	ab 07       	cpc	r26, r27
 40e:	b0 e8       	ldi	r27, 0x80	; 128
 410:	09 f0       	breq	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	bb 0b       	sbc	r27, r27
 414:	80 2d       	mov	r24, r0
 416:	bf 01       	movw	r22, r30
 418:	ff 27       	eor	r31, r31
 41a:	93 58       	subi	r25, 0x83	; 131
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	3a f0       	brmi	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	9e 3f       	cpi	r25, 0xFE	; 254
 422:	51 05       	cpc	r21, r1
 424:	78 f0       	brcs	.+30     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
 426:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_inf>
 42a:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_szero>
 42e:	5f 3f       	cpi	r21, 0xFF	; 255
 430:	e4 f3       	brlt	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 432:	98 3e       	cpi	r25, 0xE8	; 232
 434:	d4 f3       	brlt	.-12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 436:	86 95       	lsr	r24
 438:	77 95       	ror	r23
 43a:	67 95       	ror	r22
 43c:	b7 95       	ror	r27
 43e:	f7 95       	ror	r31
 440:	9f 5f       	subi	r25, 0xFF	; 255
 442:	c9 f7       	brne	.-14     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
 444:	88 0f       	add	r24, r24
 446:	91 1d       	adc	r25, r1
 448:	96 95       	lsr	r25
 44a:	87 95       	ror	r24
 44c:	97 f9       	bld	r25, 7
 44e:	08 95       	ret
 450:	e1 e0       	ldi	r30, 0x01	; 1
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	88 1f       	adc	r24, r24
 458:	bb 1f       	adc	r27, r27
 45a:	62 17       	cp	r22, r18
 45c:	73 07       	cpc	r23, r19
 45e:	84 07       	cpc	r24, r20
 460:	ba 07       	cpc	r27, r26
 462:	20 f0       	brcs	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 464:	62 1b       	sub	r22, r18
 466:	73 0b       	sbc	r23, r19
 468:	84 0b       	sbc	r24, r20
 46a:	ba 0b       	sbc	r27, r26
 46c:	ee 1f       	adc	r30, r30
 46e:	88 f7       	brcc	.-30     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 470:	e0 95       	com	r30
 472:	08 95       	ret

00000474 <__fixunssfsi>:
 474:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__fp_splitA>
 478:	88 f0       	brcs	.+34     	; 0x49c <__fixunssfsi+0x28>
 47a:	9f 57       	subi	r25, 0x7F	; 127
 47c:	98 f0       	brcs	.+38     	; 0x4a4 <__fixunssfsi+0x30>
 47e:	b9 2f       	mov	r27, r25
 480:	99 27       	eor	r25, r25
 482:	b7 51       	subi	r27, 0x17	; 23
 484:	b0 f0       	brcs	.+44     	; 0x4b2 <__fixunssfsi+0x3e>
 486:	e1 f0       	breq	.+56     	; 0x4c0 <__fixunssfsi+0x4c>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	1a f0       	brmi	.+6      	; 0x498 <__fixunssfsi+0x24>
 492:	ba 95       	dec	r27
 494:	c9 f7       	brne	.-14     	; 0x488 <__fixunssfsi+0x14>
 496:	14 c0       	rjmp	.+40     	; 0x4c0 <__fixunssfsi+0x4c>
 498:	b1 30       	cpi	r27, 0x01	; 1
 49a:	91 f0       	breq	.+36     	; 0x4c0 <__fixunssfsi+0x4c>
 49c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__fp_zero>
 4a0:	b1 e0       	ldi	r27, 0x01	; 1
 4a2:	08 95       	ret
 4a4:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__fp_zero>
 4a8:	67 2f       	mov	r22, r23
 4aa:	78 2f       	mov	r23, r24
 4ac:	88 27       	eor	r24, r24
 4ae:	b8 5f       	subi	r27, 0xF8	; 248
 4b0:	39 f0       	breq	.+14     	; 0x4c0 <__fixunssfsi+0x4c>
 4b2:	b9 3f       	cpi	r27, 0xF9	; 249
 4b4:	cc f3       	brlt	.-14     	; 0x4a8 <__fixunssfsi+0x34>
 4b6:	86 95       	lsr	r24
 4b8:	77 95       	ror	r23
 4ba:	67 95       	ror	r22
 4bc:	b3 95       	inc	r27
 4be:	d9 f7       	brne	.-10     	; 0x4b6 <__fixunssfsi+0x42>
 4c0:	3e f4       	brtc	.+14     	; 0x4d0 <__fixunssfsi+0x5c>
 4c2:	90 95       	com	r25
 4c4:	80 95       	com	r24
 4c6:	70 95       	com	r23
 4c8:	61 95       	neg	r22
 4ca:	7f 4f       	sbci	r23, 0xFF	; 255
 4cc:	8f 4f       	sbci	r24, 0xFF	; 255
 4ce:	9f 4f       	sbci	r25, 0xFF	; 255
 4d0:	08 95       	ret

000004d2 <__floatunsisf>:
 4d2:	e8 94       	clt
 4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <__floatsisf+0x12>

000004d6 <__floatsisf>:
 4d6:	97 fb       	bst	r25, 7
 4d8:	3e f4       	brtc	.+14     	; 0x4e8 <__floatsisf+0x12>
 4da:	90 95       	com	r25
 4dc:	80 95       	com	r24
 4de:	70 95       	com	r23
 4e0:	61 95       	neg	r22
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	8f 4f       	sbci	r24, 0xFF	; 255
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	99 23       	and	r25, r25
 4ea:	a9 f0       	breq	.+42     	; 0x516 <__floatsisf+0x40>
 4ec:	f9 2f       	mov	r31, r25
 4ee:	96 e9       	ldi	r25, 0x96	; 150
 4f0:	bb 27       	eor	r27, r27
 4f2:	93 95       	inc	r25
 4f4:	f6 95       	lsr	r31
 4f6:	87 95       	ror	r24
 4f8:	77 95       	ror	r23
 4fa:	67 95       	ror	r22
 4fc:	b7 95       	ror	r27
 4fe:	f1 11       	cpse	r31, r1
 500:	f8 cf       	rjmp	.-16     	; 0x4f2 <__floatsisf+0x1c>
 502:	fa f4       	brpl	.+62     	; 0x542 <__floatsisf+0x6c>
 504:	bb 0f       	add	r27, r27
 506:	11 f4       	brne	.+4      	; 0x50c <__floatsisf+0x36>
 508:	60 ff       	sbrs	r22, 0
 50a:	1b c0       	rjmp	.+54     	; 0x542 <__floatsisf+0x6c>
 50c:	6f 5f       	subi	r22, 0xFF	; 255
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	8f 4f       	sbci	r24, 0xFF	; 255
 512:	9f 4f       	sbci	r25, 0xFF	; 255
 514:	16 c0       	rjmp	.+44     	; 0x542 <__floatsisf+0x6c>
 516:	88 23       	and	r24, r24
 518:	11 f0       	breq	.+4      	; 0x51e <__floatsisf+0x48>
 51a:	96 e9       	ldi	r25, 0x96	; 150
 51c:	11 c0       	rjmp	.+34     	; 0x540 <__floatsisf+0x6a>
 51e:	77 23       	and	r23, r23
 520:	21 f0       	breq	.+8      	; 0x52a <__floatsisf+0x54>
 522:	9e e8       	ldi	r25, 0x8E	; 142
 524:	87 2f       	mov	r24, r23
 526:	76 2f       	mov	r23, r22
 528:	05 c0       	rjmp	.+10     	; 0x534 <__floatsisf+0x5e>
 52a:	66 23       	and	r22, r22
 52c:	71 f0       	breq	.+28     	; 0x54a <__floatsisf+0x74>
 52e:	96 e8       	ldi	r25, 0x86	; 134
 530:	86 2f       	mov	r24, r22
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	60 e0       	ldi	r22, 0x00	; 0
 536:	2a f0       	brmi	.+10     	; 0x542 <__floatsisf+0x6c>
 538:	9a 95       	dec	r25
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	88 1f       	adc	r24, r24
 540:	da f7       	brpl	.-10     	; 0x538 <__floatsisf+0x62>
 542:	88 0f       	add	r24, r24
 544:	96 95       	lsr	r25
 546:	87 95       	ror	r24
 548:	97 f9       	bld	r25, 7
 54a:	08 95       	ret

0000054c <__fp_inf>:
 54c:	97 f9       	bld	r25, 7
 54e:	9f 67       	ori	r25, 0x7F	; 127
 550:	80 e8       	ldi	r24, 0x80	; 128
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	60 e0       	ldi	r22, 0x00	; 0
 556:	08 95       	ret

00000558 <__fp_nan>:
 558:	9f ef       	ldi	r25, 0xFF	; 255
 55a:	80 ec       	ldi	r24, 0xC0	; 192
 55c:	08 95       	ret

0000055e <__fp_pscA>:
 55e:	00 24       	eor	r0, r0
 560:	0a 94       	dec	r0
 562:	16 16       	cp	r1, r22
 564:	17 06       	cpc	r1, r23
 566:	18 06       	cpc	r1, r24
 568:	09 06       	cpc	r0, r25
 56a:	08 95       	ret

0000056c <__fp_pscB>:
 56c:	00 24       	eor	r0, r0
 56e:	0a 94       	dec	r0
 570:	12 16       	cp	r1, r18
 572:	13 06       	cpc	r1, r19
 574:	14 06       	cpc	r1, r20
 576:	05 06       	cpc	r0, r21
 578:	08 95       	ret

0000057a <__fp_round>:
 57a:	09 2e       	mov	r0, r25
 57c:	03 94       	inc	r0
 57e:	00 0c       	add	r0, r0
 580:	11 f4       	brne	.+4      	; 0x586 <__fp_round+0xc>
 582:	88 23       	and	r24, r24
 584:	52 f0       	brmi	.+20     	; 0x59a <__fp_round+0x20>
 586:	bb 0f       	add	r27, r27
 588:	40 f4       	brcc	.+16     	; 0x59a <__fp_round+0x20>
 58a:	bf 2b       	or	r27, r31
 58c:	11 f4       	brne	.+4      	; 0x592 <__fp_round+0x18>
 58e:	60 ff       	sbrs	r22, 0
 590:	04 c0       	rjmp	.+8      	; 0x59a <__fp_round+0x20>
 592:	6f 5f       	subi	r22, 0xFF	; 255
 594:	7f 4f       	sbci	r23, 0xFF	; 255
 596:	8f 4f       	sbci	r24, 0xFF	; 255
 598:	9f 4f       	sbci	r25, 0xFF	; 255
 59a:	08 95       	ret

0000059c <__fp_split3>:
 59c:	57 fd       	sbrc	r21, 7
 59e:	90 58       	subi	r25, 0x80	; 128
 5a0:	44 0f       	add	r20, r20
 5a2:	55 1f       	adc	r21, r21
 5a4:	59 f0       	breq	.+22     	; 0x5bc <__fp_splitA+0x10>
 5a6:	5f 3f       	cpi	r21, 0xFF	; 255
 5a8:	71 f0       	breq	.+28     	; 0x5c6 <__fp_splitA+0x1a>
 5aa:	47 95       	ror	r20

000005ac <__fp_splitA>:
 5ac:	88 0f       	add	r24, r24
 5ae:	97 fb       	bst	r25, 7
 5b0:	99 1f       	adc	r25, r25
 5b2:	61 f0       	breq	.+24     	; 0x5cc <__fp_splitA+0x20>
 5b4:	9f 3f       	cpi	r25, 0xFF	; 255
 5b6:	79 f0       	breq	.+30     	; 0x5d6 <__fp_splitA+0x2a>
 5b8:	87 95       	ror	r24
 5ba:	08 95       	ret
 5bc:	12 16       	cp	r1, r18
 5be:	13 06       	cpc	r1, r19
 5c0:	14 06       	cpc	r1, r20
 5c2:	55 1f       	adc	r21, r21
 5c4:	f2 cf       	rjmp	.-28     	; 0x5aa <__fp_split3+0xe>
 5c6:	46 95       	lsr	r20
 5c8:	f1 df       	rcall	.-30     	; 0x5ac <__fp_splitA>
 5ca:	08 c0       	rjmp	.+16     	; 0x5dc <__fp_splitA+0x30>
 5cc:	16 16       	cp	r1, r22
 5ce:	17 06       	cpc	r1, r23
 5d0:	18 06       	cpc	r1, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	f1 cf       	rjmp	.-30     	; 0x5b8 <__fp_splitA+0xc>
 5d6:	86 95       	lsr	r24
 5d8:	71 05       	cpc	r23, r1
 5da:	61 05       	cpc	r22, r1
 5dc:	08 94       	sec
 5de:	08 95       	ret

000005e0 <__fp_zero>:
 5e0:	e8 94       	clt

000005e2 <__fp_szero>:
 5e2:	bb 27       	eor	r27, r27
 5e4:	66 27       	eor	r22, r22
 5e6:	77 27       	eor	r23, r23
 5e8:	cb 01       	movw	r24, r22
 5ea:	97 f9       	bld	r25, 7
 5ec:	08 95       	ret

000005ee <__mulsf3>:
 5ee:	0e 94 0a 03 	call	0x614	; 0x614 <__mulsf3x>
 5f2:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__fp_round>
 5f6:	0e 94 af 02 	call	0x55e	; 0x55e <__fp_pscA>
 5fa:	38 f0       	brcs	.+14     	; 0x60a <__mulsf3+0x1c>
 5fc:	0e 94 b6 02 	call	0x56c	; 0x56c <__fp_pscB>
 600:	20 f0       	brcs	.+8      	; 0x60a <__mulsf3+0x1c>
 602:	95 23       	and	r25, r21
 604:	11 f0       	breq	.+4      	; 0x60a <__mulsf3+0x1c>
 606:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_inf>
 60a:	0c 94 ac 02 	jmp	0x558	; 0x558 <__fp_nan>
 60e:	11 24       	eor	r1, r1
 610:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_szero>

00000614 <__mulsf3x>:
 614:	0e 94 ce 02 	call	0x59c	; 0x59c <__fp_split3>
 618:	70 f3       	brcs	.-36     	; 0x5f6 <__mulsf3+0x8>

0000061a <__mulsf3_pse>:
 61a:	95 9f       	mul	r25, r21
 61c:	c1 f3       	breq	.-16     	; 0x60e <__mulsf3+0x20>
 61e:	95 0f       	add	r25, r21
 620:	50 e0       	ldi	r21, 0x00	; 0
 622:	55 1f       	adc	r21, r21
 624:	62 9f       	mul	r22, r18
 626:	f0 01       	movw	r30, r0
 628:	72 9f       	mul	r23, r18
 62a:	bb 27       	eor	r27, r27
 62c:	f0 0d       	add	r31, r0
 62e:	b1 1d       	adc	r27, r1
 630:	63 9f       	mul	r22, r19
 632:	aa 27       	eor	r26, r26
 634:	f0 0d       	add	r31, r0
 636:	b1 1d       	adc	r27, r1
 638:	aa 1f       	adc	r26, r26
 63a:	64 9f       	mul	r22, r20
 63c:	66 27       	eor	r22, r22
 63e:	b0 0d       	add	r27, r0
 640:	a1 1d       	adc	r26, r1
 642:	66 1f       	adc	r22, r22
 644:	82 9f       	mul	r24, r18
 646:	22 27       	eor	r18, r18
 648:	b0 0d       	add	r27, r0
 64a:	a1 1d       	adc	r26, r1
 64c:	62 1f       	adc	r22, r18
 64e:	73 9f       	mul	r23, r19
 650:	b0 0d       	add	r27, r0
 652:	a1 1d       	adc	r26, r1
 654:	62 1f       	adc	r22, r18
 656:	83 9f       	mul	r24, r19
 658:	a0 0d       	add	r26, r0
 65a:	61 1d       	adc	r22, r1
 65c:	22 1f       	adc	r18, r18
 65e:	74 9f       	mul	r23, r20
 660:	33 27       	eor	r19, r19
 662:	a0 0d       	add	r26, r0
 664:	61 1d       	adc	r22, r1
 666:	23 1f       	adc	r18, r19
 668:	84 9f       	mul	r24, r20
 66a:	60 0d       	add	r22, r0
 66c:	21 1d       	adc	r18, r1
 66e:	82 2f       	mov	r24, r18
 670:	76 2f       	mov	r23, r22
 672:	6a 2f       	mov	r22, r26
 674:	11 24       	eor	r1, r1
 676:	9f 57       	subi	r25, 0x7F	; 127
 678:	50 40       	sbci	r21, 0x00	; 0
 67a:	9a f0       	brmi	.+38     	; 0x6a2 <__mulsf3_pse+0x88>
 67c:	f1 f0       	breq	.+60     	; 0x6ba <__mulsf3_pse+0xa0>
 67e:	88 23       	and	r24, r24
 680:	4a f0       	brmi	.+18     	; 0x694 <__mulsf3_pse+0x7a>
 682:	ee 0f       	add	r30, r30
 684:	ff 1f       	adc	r31, r31
 686:	bb 1f       	adc	r27, r27
 688:	66 1f       	adc	r22, r22
 68a:	77 1f       	adc	r23, r23
 68c:	88 1f       	adc	r24, r24
 68e:	91 50       	subi	r25, 0x01	; 1
 690:	50 40       	sbci	r21, 0x00	; 0
 692:	a9 f7       	brne	.-22     	; 0x67e <__mulsf3_pse+0x64>
 694:	9e 3f       	cpi	r25, 0xFE	; 254
 696:	51 05       	cpc	r21, r1
 698:	80 f0       	brcs	.+32     	; 0x6ba <__mulsf3_pse+0xa0>
 69a:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_inf>
 69e:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_szero>
 6a2:	5f 3f       	cpi	r21, 0xFF	; 255
 6a4:	e4 f3       	brlt	.-8      	; 0x69e <__mulsf3_pse+0x84>
 6a6:	98 3e       	cpi	r25, 0xE8	; 232
 6a8:	d4 f3       	brlt	.-12     	; 0x69e <__mulsf3_pse+0x84>
 6aa:	86 95       	lsr	r24
 6ac:	77 95       	ror	r23
 6ae:	67 95       	ror	r22
 6b0:	b7 95       	ror	r27
 6b2:	f7 95       	ror	r31
 6b4:	e7 95       	ror	r30
 6b6:	9f 5f       	subi	r25, 0xFF	; 255
 6b8:	c1 f7       	brne	.-16     	; 0x6aa <__mulsf3_pse+0x90>
 6ba:	fe 2b       	or	r31, r30
 6bc:	88 0f       	add	r24, r24
 6be:	91 1d       	adc	r25, r1
 6c0:	96 95       	lsr	r25
 6c2:	87 95       	ror	r24
 6c4:	97 f9       	bld	r25, 7
 6c6:	08 95       	ret

000006c8 <_exit>:
 6c8:	f8 94       	cli

000006ca <__stop_program>:
 6ca:	ff cf       	rjmp	.-2      	; 0x6ca <__stop_program>
