
User_Story_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000818  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000088c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  00800060  00800060  0000088c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b0f  00000000  00000000  000009e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000858  00000000  00000000  000014ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f4  00000000  00000000  00001d47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  0000243c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c2  00000000  00000000  000026a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000044a  00000000  00000000  00002b66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 9a 03 	jmp	0x734	; 0x734 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e1       	ldi	r30, 0x18	; 24
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 37       	cpi	r26, 0x79	; 121
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <main>
  8a:	0c 94 0a 04 	jmp	0x814	; 0x814 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	60 f5       	brcc	.+88     	; 0xfe <DIO_WritePin+0x6c>
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	88 23       	and	r24, r24
  aa:	a9 f4       	brne	.+42     	; 0xd6 <DIO_WritePin+0x44>
  ac:	8b e3       	ldi	r24, 0x3B	; 59
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2b e3       	ldi	r18, 0x3B	; 59
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	60 81       	ld	r22, Z
  b8:	29 81       	ldd	r18, Y+1	; 0x01
  ba:	42 2f       	mov	r20, r18
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_WritePin+0x36>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	4a 95       	dec	r20
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_WritePin+0x32>
  cc:	20 95       	com	r18
  ce:	26 23       	and	r18, r22
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
  d4:	b0 c0       	rjmp	.+352    	; 0x236 <DIO_WritePin+0x1a4>
  d6:	8b e3       	ldi	r24, 0x3B	; 59
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2b e3       	ldi	r18, 0x3B	; 59
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	60 81       	ld	r22, Z
  e2:	29 81       	ldd	r18, Y+1	; 0x01
  e4:	42 2f       	mov	r20, r18
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_WritePin+0x60>
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	4a 95       	dec	r20
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_WritePin+0x5c>
  f6:	26 2b       	or	r18, r22
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
  fc:	9c c0       	rjmp	.+312    	; 0x236 <DIO_WritePin+0x1a4>
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	88 30       	cpi	r24, 0x08	; 8
 102:	88 f1       	brcs	.+98     	; 0x166 <DIO_WritePin+0xd4>
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	80 31       	cpi	r24, 0x10	; 16
 108:	70 f5       	brcc	.+92     	; 0x166 <DIO_WritePin+0xd4>
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	88 23       	and	r24, r24
 10e:	b1 f4       	brne	.+44     	; 0x13c <DIO_WritePin+0xaa>
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 e3       	ldi	r18, 0x38	; 56
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	60 81       	ld	r22, Z
 11c:	29 81       	ldd	r18, Y+1	; 0x01
 11e:	28 50       	subi	r18, 0x08	; 8
 120:	42 2f       	mov	r20, r18
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_WritePin+0x9c>
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	4a 95       	dec	r20
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_WritePin+0x98>
 132:	20 95       	com	r18
 134:	26 23       	and	r18, r22
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
 13a:	7d c0       	rjmp	.+250    	; 0x236 <DIO_WritePin+0x1a4>
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	28 e3       	ldi	r18, 0x38	; 56
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	60 81       	ld	r22, Z
 148:	29 81       	ldd	r18, Y+1	; 0x01
 14a:	28 50       	subi	r18, 0x08	; 8
 14c:	42 2f       	mov	r20, r18
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_WritePin+0xc8>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	4a 95       	dec	r20
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_WritePin+0xc4>
 15e:	26 2b       	or	r18, r22
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
 164:	68 c0       	rjmp	.+208    	; 0x236 <DIO_WritePin+0x1a4>
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	80 31       	cpi	r24, 0x10	; 16
 16a:	88 f1       	brcs	.+98     	; 0x1ce <DIO_WritePin+0x13c>
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	88 31       	cpi	r24, 0x18	; 24
 170:	70 f5       	brcc	.+92     	; 0x1ce <DIO_WritePin+0x13c>
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	88 23       	and	r24, r24
 176:	b1 f4       	brne	.+44     	; 0x1a4 <DIO_WritePin+0x112>
 178:	85 e3       	ldi	r24, 0x35	; 53
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	25 e3       	ldi	r18, 0x35	; 53
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	60 81       	ld	r22, Z
 184:	29 81       	ldd	r18, Y+1	; 0x01
 186:	20 51       	subi	r18, 0x10	; 16
 188:	42 2f       	mov	r20, r18
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_WritePin+0x104>
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	4a 95       	dec	r20
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_WritePin+0x100>
 19a:	20 95       	com	r18
 19c:	26 23       	and	r18, r22
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
 1a2:	49 c0       	rjmp	.+146    	; 0x236 <DIO_WritePin+0x1a4>
 1a4:	85 e3       	ldi	r24, 0x35	; 53
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	25 e3       	ldi	r18, 0x35	; 53
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	60 81       	ld	r22, Z
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	20 51       	subi	r18, 0x10	; 16
 1b4:	42 2f       	mov	r20, r18
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_WritePin+0x130>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_WritePin+0x12c>
 1c6:	26 2b       	or	r18, r22
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
 1cc:	34 c0       	rjmp	.+104    	; 0x236 <DIO_WritePin+0x1a4>
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	88 31       	cpi	r24, 0x18	; 24
 1d2:	88 f1       	brcs	.+98     	; 0x236 <DIO_WritePin+0x1a4>
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	80 32       	cpi	r24, 0x20	; 32
 1d8:	70 f5       	brcc	.+92     	; 0x236 <DIO_WritePin+0x1a4>
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	88 23       	and	r24, r24
 1de:	b1 f4       	brne	.+44     	; 0x20c <DIO_WritePin+0x17a>
 1e0:	82 e3       	ldi	r24, 0x32	; 50
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	22 e3       	ldi	r18, 0x32	; 50
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	60 81       	ld	r22, Z
 1ec:	29 81       	ldd	r18, Y+1	; 0x01
 1ee:	28 51       	subi	r18, 0x18	; 24
 1f0:	42 2f       	mov	r20, r18
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_WritePin+0x16c>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	4a 95       	dec	r20
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_WritePin+0x168>
 202:	20 95       	com	r18
 204:	26 23       	and	r18, r22
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
 20a:	15 c0       	rjmp	.+42     	; 0x236 <DIO_WritePin+0x1a4>
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	22 e3       	ldi	r18, 0x32	; 50
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	60 81       	ld	r22, Z
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	28 51       	subi	r18, 0x18	; 24
 21c:	42 2f       	mov	r20, r18
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_WritePin+0x198>
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	4a 95       	dec	r20
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_WritePin+0x194>
 22e:	26 2b       	or	r18, r22
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
 234:	00 c0       	rjmp	.+0      	; 0x236 <DIO_WritePin+0x1a4>
 236:	00 00       	nop
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <DIO_SetPinDirection>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <DIO_SetPinDirection+0x6>
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	6a 83       	std	Y+2, r22	; 0x02
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 30       	cpi	r24, 0x08	; 8
 254:	60 f5       	brcc	.+88     	; 0x2ae <DIO_SetPinDirection+0x6c>
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	88 23       	and	r24, r24
 25a:	a9 f4       	brne	.+42     	; 0x286 <DIO_SetPinDirection+0x44>
 25c:	8a e3       	ldi	r24, 0x3A	; 58
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2a e3       	ldi	r18, 0x3A	; 58
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	60 81       	ld	r22, Z
 268:	29 81       	ldd	r18, Y+1	; 0x01
 26a:	42 2f       	mov	r20, r18
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_SetPinDirection+0x36>
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	4a 95       	dec	r20
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_SetPinDirection+0x32>
 27c:	20 95       	com	r18
 27e:	26 23       	and	r18, r22
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
 284:	b0 c0       	rjmp	.+352    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 286:	8a e3       	ldi	r24, 0x3A	; 58
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	2a e3       	ldi	r18, 0x3A	; 58
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	f9 01       	movw	r30, r18
 290:	60 81       	ld	r22, Z
 292:	29 81       	ldd	r18, Y+1	; 0x01
 294:	42 2f       	mov	r20, r18
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_SetPinDirection+0x60>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	4a 95       	dec	r20
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_SetPinDirection+0x5c>
 2a6:	26 2b       	or	r18, r22
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
 2ac:	9c c0       	rjmp	.+312    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	88 30       	cpi	r24, 0x08	; 8
 2b2:	88 f1       	brcs	.+98     	; 0x316 <DIO_SetPinDirection+0xd4>
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	80 31       	cpi	r24, 0x10	; 16
 2b8:	70 f5       	brcc	.+92     	; 0x316 <DIO_SetPinDirection+0xd4>
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	88 23       	and	r24, r24
 2be:	b1 f4       	brne	.+44     	; 0x2ec <DIO_SetPinDirection+0xaa>
 2c0:	87 e3       	ldi	r24, 0x37	; 55
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	27 e3       	ldi	r18, 0x37	; 55
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	60 81       	ld	r22, Z
 2cc:	29 81       	ldd	r18, Y+1	; 0x01
 2ce:	28 50       	subi	r18, 0x08	; 8
 2d0:	42 2f       	mov	r20, r18
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_SetPinDirection+0x9c>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	4a 95       	dec	r20
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_SetPinDirection+0x98>
 2e2:	20 95       	com	r18
 2e4:	26 23       	and	r18, r22
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	7d c0       	rjmp	.+250    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 2ec:	87 e3       	ldi	r24, 0x37	; 55
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	27 e3       	ldi	r18, 0x37	; 55
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	f9 01       	movw	r30, r18
 2f6:	60 81       	ld	r22, Z
 2f8:	29 81       	ldd	r18, Y+1	; 0x01
 2fa:	28 50       	subi	r18, 0x08	; 8
 2fc:	42 2f       	mov	r20, r18
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_SetPinDirection+0xc8>
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	4a 95       	dec	r20
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_SetPinDirection+0xc4>
 30e:	26 2b       	or	r18, r22
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
 314:	68 c0       	rjmp	.+208    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	80 31       	cpi	r24, 0x10	; 16
 31a:	88 f1       	brcs	.+98     	; 0x37e <DIO_SetPinDirection+0x13c>
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	70 f5       	brcc	.+92     	; 0x37e <DIO_SetPinDirection+0x13c>
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	88 23       	and	r24, r24
 326:	b1 f4       	brne	.+44     	; 0x354 <DIO_SetPinDirection+0x112>
 328:	84 e3       	ldi	r24, 0x34	; 52
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	24 e3       	ldi	r18, 0x34	; 52
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	f9 01       	movw	r30, r18
 332:	60 81       	ld	r22, Z
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	20 51       	subi	r18, 0x10	; 16
 338:	42 2f       	mov	r20, r18
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPinDirection+0x104>
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	4a 95       	dec	r20
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPinDirection+0x100>
 34a:	20 95       	com	r18
 34c:	26 23       	and	r18, r22
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
 352:	49 c0       	rjmp	.+146    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 354:	84 e3       	ldi	r24, 0x34	; 52
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	24 e3       	ldi	r18, 0x34	; 52
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	f9 01       	movw	r30, r18
 35e:	60 81       	ld	r22, Z
 360:	29 81       	ldd	r18, Y+1	; 0x01
 362:	20 51       	subi	r18, 0x10	; 16
 364:	42 2f       	mov	r20, r18
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_SetPinDirection+0x130>
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	4a 95       	dec	r20
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_SetPinDirection+0x12c>
 376:	26 2b       	or	r18, r22
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
 37c:	34 c0       	rjmp	.+104    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	88 31       	cpi	r24, 0x18	; 24
 382:	88 f1       	brcs	.+98     	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	80 32       	cpi	r24, 0x20	; 32
 388:	70 f5       	brcc	.+92     	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	88 23       	and	r24, r24
 38e:	b1 f4       	brne	.+44     	; 0x3bc <DIO_SetPinDirection+0x17a>
 390:	81 e3       	ldi	r24, 0x31	; 49
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	21 e3       	ldi	r18, 0x31	; 49
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	60 81       	ld	r22, Z
 39c:	29 81       	ldd	r18, Y+1	; 0x01
 39e:	28 51       	subi	r18, 0x18	; 24
 3a0:	42 2f       	mov	r20, r18
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_SetPinDirection+0x16c>
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	4a 95       	dec	r20
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_SetPinDirection+0x168>
 3b2:	20 95       	com	r18
 3b4:	26 23       	and	r18, r22
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
 3ba:	15 c0       	rjmp	.+42     	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 3bc:	81 e3       	ldi	r24, 0x31	; 49
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	21 e3       	ldi	r18, 0x31	; 49
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	60 81       	ld	r22, Z
 3c8:	29 81       	ldd	r18, Y+1	; 0x01
 3ca:	28 51       	subi	r18, 0x18	; 24
 3cc:	42 2f       	mov	r20, r18
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_SetPinDirection+0x198>
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	4a 95       	dec	r20
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_SetPinDirection+0x194>
 3de:	26 2b       	or	r18, r22
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 3e6:	00 00       	nop
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <main>:
#include "includes/BitwiseOperations.h"
#include "includes/Task.h"
#include "includes/schadular.h"

int main(void)
{
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
 3fa:	62 97       	sbiw	r28, 0x12	; 18
 3fc:	0f b6       	in	r0, 0x3f	; 63
 3fe:	f8 94       	cli
 400:	de bf       	out	0x3e, r29	; 62
 402:	0f be       	out	0x3f, r0	; 63
 404:	cd bf       	out	0x3d, r28	; 61
	
    timer0_init_CTC_mode;            /*Timer compare mode initialization */
    DIO_SetPinDirection(LED1,OUTPUT); /*Set DDRB5 (LED1) Output*/
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	8d e0       	ldi	r24, 0x0D	; 13
 40a:	0e 94 21 01 	call	0x242	; 0x242 <DIO_SetPinDirection>
    DIO_SetPinDirection(LED2,OUTPUT); /*Set DDRB6 (LED2) Output*/
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	8e e0       	ldi	r24, 0x0E	; 14
 412:	0e 94 21 01 	call	0x242	; 0x242 <DIO_SetPinDirection>
    DIO_SetPinDirection(LED3,OUTPUT); /*Set DDRB7 (LED3) Output*/
 416:	61 e0       	ldi	r22, 0x01	; 1
 418:	8f e0       	ldi	r24, 0x0F	; 15
 41a:	0e 94 21 01 	call	0x242	; 0x242 <DIO_SetPinDirection>
	
	/*temporary structure to assign them inside the add fun in each element of array of structure */
    Task task1; 
	task1.ptr_func=GO;
 41e:	8e e5       	ldi	r24, 0x5E	; 94
 420:	93 e0       	ldi	r25, 0x03	; 3
 422:	9a 83       	std	Y+2, r25	; 0x02
 424:	89 83       	std	Y+1, r24	; 0x01
	task1.Task_Periodicity=ONE_SECOUND;
 426:	88 ee       	ldi	r24, 0xE8	; 232
 428:	93 e0       	ldi	r25, 0x03	; 3
 42a:	9c 83       	std	Y+4, r25	; 0x04
 42c:	8b 83       	std	Y+3, r24	; 0x03
	task1.Remaining_Ticks=ONE_SECOUND;
 42e:	88 ee       	ldi	r24, 0xE8	; 232
 430:	93 e0       	ldi	r25, 0x03	; 3
 432:	9e 83       	std	Y+6, r25	; 0x06
 434:	8d 83       	std	Y+5, r24	; 0x05
	
	
	/*temporary structure to assign them inside the add fun in each element of array of structure */
	Task task2;
	task2.ptr_func=STOP;
 436:	82 e7       	ldi	r24, 0x72	; 114
 438:	93 e0       	ldi	r25, 0x03	; 3
 43a:	98 87       	std	Y+8, r25	; 0x08
 43c:	8f 83       	std	Y+7, r24	; 0x07
	task2.Task_Periodicity=TWO_SECOND;
 43e:	80 ed       	ldi	r24, 0xD0	; 208
 440:	97 e0       	ldi	r25, 0x07	; 7
 442:	9a 87       	std	Y+10, r25	; 0x0a
 444:	89 87       	std	Y+9, r24	; 0x09
	task2.Remaining_Ticks=TWO_SECOND; 
 446:	80 ed       	ldi	r24, 0xD0	; 208
 448:	97 e0       	ldi	r25, 0x07	; 7
 44a:	9c 87       	std	Y+12, r25	; 0x0c
 44c:	8b 87       	std	Y+11, r24	; 0x0b
	 
	 /*temporary structure to assign them inside the add fun in each element of array of structure */
    Task task3;
    task3.ptr_func=READY;
 44e:	86 e8       	ldi	r24, 0x86	; 134
 450:	93 e0       	ldi	r25, 0x03	; 3
 452:	9e 87       	std	Y+14, r25	; 0x0e
 454:	8d 87       	std	Y+13, r24	; 0x0d
	task3.Task_Periodicity=THREE_SECOUND;
 456:	88 eb       	ldi	r24, 0xB8	; 184
 458:	9b e0       	ldi	r25, 0x0B	; 11
 45a:	98 8b       	std	Y+16, r25	; 0x10
 45c:	8f 87       	std	Y+15, r24	; 0x0f
	task3.Remaining_Ticks=THREE_SECOUND;
 45e:	88 eb       	ldi	r24, 0xB8	; 184
 460:	9b e0       	ldi	r25, 0x0B	; 11
 462:	9a 8b       	std	Y+18, r25	; 0x12
 464:	89 8b       	std	Y+17, r24	; 0x11

	 /*call add task function that take structure and we assign the elements of each structure */
	scheduler_Add_Task(&task1);/* send the address of structure task1 to add function */
 466:	ce 01       	movw	r24, r28
 468:	01 96       	adiw	r24, 0x01	; 1
 46a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <scheduler_Add_Task>
	scheduler_Add_Task(&task2);/* send the address of structure task2 to add function */
 46e:	ce 01       	movw	r24, r28
 470:	07 96       	adiw	r24, 0x07	; 7
 472:	0e 94 db 02 	call	0x5b6	; 0x5b6 <scheduler_Add_Task>
	scheduler_Add_Task(&task3);/* send the address of structure task3 to add function */
 476:	ce 01       	movw	r24, r28
 478:	0d 96       	adiw	r24, 0x0d	; 13
 47a:	0e 94 db 02 	call	0x5b6	; 0x5b6 <scheduler_Add_Task>
	schadular_init_start();/*initialize the scheduler */
 47e:	0e 94 57 02 	call	0x4ae	; 0x4ae <schadular_init_start>
 482:	80 e0       	ldi	r24, 0x00	; 0
 484:	90 e0       	ldi	r25, 0x00	; 0
    

}
 486:	62 96       	adiw	r28, 0x12	; 18
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	08 95       	ret

00000498 <SET_FLAG>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that SET FLAG BY CALL THIS FUN INSIDE ISR */
void SET_FLAG()
{
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	cd b7       	in	r28, 0x3d	; 61
 49e:	de b7       	in	r29, 0x3e	; 62
	FLAG = ONE ;/*flag is set when compare match occure in ISA */
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_end>
}
 4a6:	00 00       	nop
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <schadular_init_start>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that initialize the scheduler  */
void schadular_init_start()
{
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	cd b7       	in	r28, 0x3d	; 61
 4b4:	de b7       	in	r29, 0x3e	; 62
	timer0_init_CTC_mode();/*TIMER INIT */
 4b6:	0e 94 de 03 	call	0x7bc	; 0x7bc <timer0_init_CTC_mode>
	set_call_back(SET_FLAG);/*CALL BACK FUN THAT TAKES THE ADDRESS OFN SET FLAG FUN TO SET THIS FLAG EACH COMPARE */
 4ba:	8c e4       	ldi	r24, 0x4C	; 76
 4bc:	92 e0       	ldi	r25, 0x02	; 2
 4be:	0e 94 cb 03 	call	0x796	; 0x796 <set_call_back>
	
	while(ONE)
	{
		if(ONE == FLAG)/*check if flag is set and its set every compare occur and its set inside ISR */
 4c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_end>
 4c6:	81 30       	cpi	r24, 0x01	; 1
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <schadular_init_start+0x14>
		{
			 FLAG=ZERO;
 4ca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_end>
			 prefield();/*call algorithm for scheduling */
 4ce:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <prefield>

		}
	}	
 4d2:	f7 cf       	rjmp	.-18     	; 0x4c2 <schadular_init_start+0x14>

000004d4 <prefield>:
/* I/p : array of pointer to function that void/void  and size of array*/
/* O/p : N/A */
/* Return : void */
/* Function that takes array of pointer to fun to access the task  */
static void prefield()
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	1f 92       	push	r1
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
	uint8 i;/*INDEX */
	for(i=ZERO ; i<NUMBER_OF_TASK ; i++)
 4de:	19 82       	std	Y+1, r1	; 0x01
 4e0:	61 c0       	rjmp	.+194    	; 0x5a4 <prefield+0xd0>
	{
		/* the idea of this algorithm is in the beginning the periodicity equal time remain 
		so to make sure to execute this task is wait untiles periodicity equal zero so the task execute and 
		initialize the periodicty == remaining and loop like this again this algorithm make sure that each task will be
		executed in its periodicity */
      Task_Arr[i].Remaining_Ticks--;
 4e2:	89 81       	ldd	r24, Y+1	; 0x01
 4e4:	28 2f       	mov	r18, r24
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	c9 01       	movw	r24, r18
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	82 0f       	add	r24, r18
 4f0:	93 1f       	adc	r25, r19
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	87 59       	subi	r24, 0x97	; 151
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	fc 01       	movw	r30, r24
 4fc:	80 81       	ld	r24, Z
 4fe:	91 81       	ldd	r25, Z+1	; 0x01
 500:	ac 01       	movw	r20, r24
 502:	41 50       	subi	r20, 0x01	; 1
 504:	51 09       	sbc	r21, r1
 506:	c9 01       	movw	r24, r18
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	82 0f       	add	r24, r18
 50e:	93 1f       	adc	r25, r19
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	87 59       	subi	r24, 0x97	; 151
 516:	9f 4f       	sbci	r25, 0xFF	; 255
 518:	fc 01       	movw	r30, r24
 51a:	51 83       	std	Z+1, r21	; 0x01
 51c:	40 83       	st	Z, r20
	  /*when remain = zero it means periodicity ticks finished and its time to execute task */
	  if(Task_Arr[i].Remaining_Ticks==0)
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	28 2f       	mov	r18, r24
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	c9 01       	movw	r24, r18
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	82 0f       	add	r24, r18
 52c:	93 1f       	adc	r25, r19
 52e:	88 0f       	add	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	87 59       	subi	r24, 0x97	; 151
 534:	9f 4f       	sbci	r25, 0xFF	; 255
 536:	fc 01       	movw	r30, r24
 538:	80 81       	ld	r24, Z
 53a:	91 81       	ldd	r25, Z+1	; 0x01
 53c:	89 2b       	or	r24, r25
 53e:	79 f5       	brne	.+94     	; 0x59e <prefield+0xca>
	  {
		  Task_Arr[i].ptr_func();
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	28 2f       	mov	r18, r24
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	c9 01       	movw	r24, r18
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	82 0f       	add	r24, r18
 54e:	93 1f       	adc	r25, r19
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	8b 59       	subi	r24, 0x9B	; 155
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	fc 01       	movw	r30, r24
 55a:	80 81       	ld	r24, Z
 55c:	91 81       	ldd	r25, Z+1	; 0x01
 55e:	fc 01       	movw	r30, r24
 560:	09 95       	icall
		  Task_Arr[i].Remaining_Ticks=Task_Arr[i].Task_Periodicity;
 562:	89 81       	ldd	r24, Y+1	; 0x01
 564:	28 2f       	mov	r18, r24
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	89 81       	ldd	r24, Y+1	; 0x01
 56a:	48 2f       	mov	r20, r24
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	ca 01       	movw	r24, r20
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	84 0f       	add	r24, r20
 576:	95 1f       	adc	r25, r21
 578:	88 0f       	add	r24, r24
 57a:	99 1f       	adc	r25, r25
 57c:	89 59       	subi	r24, 0x99	; 153
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	fc 01       	movw	r30, r24
 582:	40 81       	ld	r20, Z
 584:	51 81       	ldd	r21, Z+1	; 0x01
 586:	c9 01       	movw	r24, r18
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	82 0f       	add	r24, r18
 58e:	93 1f       	adc	r25, r19
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	87 59       	subi	r24, 0x97	; 151
 596:	9f 4f       	sbci	r25, 0xFF	; 255
 598:	fc 01       	movw	r30, r24
 59a:	51 83       	std	Z+1, r21	; 0x01
 59c:	40 83       	st	Z, r20
/* Return : void */
/* Function that takes array of pointer to fun to access the task  */
static void prefield()
{
	uint8 i;/*INDEX */
	for(i=ZERO ; i<NUMBER_OF_TASK ; i++)
 59e:	89 81       	ldd	r24, Y+1	; 0x01
 5a0:	8f 5f       	subi	r24, 0xFF	; 255
 5a2:	89 83       	std	Y+1, r24	; 0x01
 5a4:	89 81       	ldd	r24, Y+1	; 0x01
 5a6:	83 30       	cpi	r24, 0x03	; 3
 5a8:	08 f4       	brcc	.+2      	; 0x5ac <prefield+0xd8>
 5aa:	9b cf       	rjmp	.-202    	; 0x4e2 <prefield+0xe>
		  Task_Arr[i].ptr_func();
		  Task_Arr[i].Remaining_Ticks=Task_Arr[i].Task_Periodicity;
		  
	  }
	}
}
 5ac:	00 00       	nop
 5ae:	0f 90       	pop	r0
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <scheduler_Add_Task>:
/* I/p : array of pointer to function that void/void  and size of array*/
/* O/p : N/A */
/* Return : void */
/* Function that takes array of pointer to fun to access the task  */
uint8 scheduler_Add_Task(Task *ptr)/*the argument for add fun is structure so i receive it in pointer to structure */
{
 5b6:	cf 93       	push	r28
 5b8:	df 93       	push	r29
 5ba:	00 d0       	rcall	.+0      	; 0x5bc <scheduler_Add_Task+0x6>
 5bc:	1f 92       	push	r1
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
 5c2:	9b 83       	std	Y+3, r25	; 0x03
 5c4:	8a 83       	std	Y+2, r24	; 0x02
		uint8 x = ONE;
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	89 83       	std	Y+1, r24	; 0x01
		
		if (index < NUMBER_OF_TASK)
 5ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <index>
 5ce:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <index+0x1>
 5d2:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <index+0x2>
 5d6:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <index+0x3>
 5da:	03 97       	sbiw	r24, 0x03	; 3
 5dc:	a1 05       	cpc	r26, r1
 5de:	b1 05       	cpc	r27, r1
 5e0:	08 f0       	brcs	.+2      	; 0x5e4 <scheduler_Add_Task+0x2e>
 5e2:	64 c0       	rjmp	.+200    	; 0x6ac <scheduler_Add_Task+0xf6>
		{
			/* here i am initialize the structure element so in the main i 
			send this structure as argument and here aim assign  each element*/
			
			Task_Arr[index].ptr_func=ptr->ptr_func;/*assign the value of ptr_fun element in Task_array = ptr in main */
 5e4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <index>
 5e8:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <index+0x1>
 5ec:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <index+0x2>
 5f0:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <index+0x3>
 5f4:	2a 81       	ldd	r18, Y+2	; 0x02
 5f6:	3b 81       	ldd	r19, Y+3	; 0x03
 5f8:	f9 01       	movw	r30, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	31 81       	ldd	r19, Z+1	; 0x01
 5fe:	ac 01       	movw	r20, r24
 600:	ca 01       	movw	r24, r20
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	84 0f       	add	r24, r20
 608:	95 1f       	adc	r25, r21
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	8b 59       	subi	r24, 0x9B	; 155
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	fc 01       	movw	r30, r24
 614:	31 83       	std	Z+1, r19	; 0x01
 616:	20 83       	st	Z, r18
			Task_Arr[index].Task_Periodicity=ptr->Task_Periodicity;
 618:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <index>
 61c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <index+0x1>
 620:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <index+0x2>
 624:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <index+0x3>
 628:	2a 81       	ldd	r18, Y+2	; 0x02
 62a:	3b 81       	ldd	r19, Y+3	; 0x03
 62c:	f9 01       	movw	r30, r18
 62e:	22 81       	ldd	r18, Z+2	; 0x02
 630:	33 81       	ldd	r19, Z+3	; 0x03
 632:	ac 01       	movw	r20, r24
 634:	ca 01       	movw	r24, r20
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	84 0f       	add	r24, r20
 63c:	95 1f       	adc	r25, r21
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	89 59       	subi	r24, 0x99	; 153
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	fc 01       	movw	r30, r24
 648:	31 83       	std	Z+1, r19	; 0x01
 64a:	20 83       	st	Z, r18
			Task_Arr[index].Remaining_Ticks=ptr->Remaining_Ticks;
 64c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <index>
 650:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <index+0x1>
 654:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <index+0x2>
 658:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <index+0x3>
 65c:	2a 81       	ldd	r18, Y+2	; 0x02
 65e:	3b 81       	ldd	r19, Y+3	; 0x03
 660:	f9 01       	movw	r30, r18
 662:	24 81       	ldd	r18, Z+4	; 0x04
 664:	35 81       	ldd	r19, Z+5	; 0x05
 666:	ac 01       	movw	r20, r24
 668:	ca 01       	movw	r24, r20
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	84 0f       	add	r24, r20
 670:	95 1f       	adc	r25, r21
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	87 59       	subi	r24, 0x97	; 151
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	fc 01       	movw	r30, r24
 67c:	31 83       	std	Z+1, r19	; 0x01
 67e:	20 83       	st	Z, r18
             /*access each element in structure using arrow cause its pointer */
			index++;
 680:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <index>
 684:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <index+0x1>
 688:	a0 91 63 00 	lds	r26, 0x0063	; 0x800063 <index+0x2>
 68c:	b0 91 64 00 	lds	r27, 0x0064	; 0x800064 <index+0x3>
 690:	01 96       	adiw	r24, 0x01	; 1
 692:	a1 1d       	adc	r26, r1
 694:	b1 1d       	adc	r27, r1
 696:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <index>
 69a:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <index+0x1>
 69e:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <index+0x2>
 6a2:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <index+0x3>
			x = ONE;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	89 83       	std	Y+1, r24	; 0x01
 6aa:	01 c0       	rjmp	.+2      	; 0x6ae <scheduler_Add_Task+0xf8>
		}
		else
		{
			x = ZERO;
 6ac:	19 82       	std	Y+1, r1	; 0x01
		}
		return x;
 6ae:	89 81       	ldd	r24, Y+1	; 0x01
	
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	08 95       	ret

000006bc <GO>:
#include "../includes/Task.h"

void GO(void)
{
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29
 6c0:	cd b7       	in	r28, 0x3d	; 61
 6c2:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LED1,HIGH); /*GO State*/
 6c4:	61 e0       	ldi	r22, 0x01	; 1
 6c6:	8d e0       	ldi	r24, 0x0D	; 13
 6c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED2,LOW);
 6cc:	60 e0       	ldi	r22, 0x00	; 0
 6ce:	8e e0       	ldi	r24, 0x0E	; 14
 6d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED3,LOW);	
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	8f e0       	ldi	r24, 0x0F	; 15
 6d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
}
 6dc:	00 00       	nop
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	08 95       	ret

000006e4 <STOP>:
void STOP(void)
{
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LED1,LOW); /*STOP State*/
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	8d e0       	ldi	r24, 0x0D	; 13
 6f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED2,LOW);
 6f4:	60 e0       	ldi	r22, 0x00	; 0
 6f6:	8e e0       	ldi	r24, 0x0E	; 14
 6f8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED3,HIGH);	
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	8f e0       	ldi	r24, 0x0F	; 15
 700:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
}
 704:	00 00       	nop
 706:	df 91       	pop	r29
 708:	cf 91       	pop	r28
 70a:	08 95       	ret

0000070c <READY>:
void READY(void)
{	
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LED1,LOW); /*STOP State*/
 714:	60 e0       	ldi	r22, 0x00	; 0
 716:	8d e0       	ldi	r24, 0x0D	; 13
 718:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(LED2,HIGH);
 71c:	61 e0       	ldi	r22, 0x01	; 1
 71e:	8e e0       	ldi	r24, 0x0E	; 14
 720:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED3,LOW);	
 724:	60 e0       	ldi	r22, 0x00	; 0
 726:	8f e0       	ldi	r24, 0x0F	; 15
 728:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
}
 72c:	00 00       	nop
 72e:	df 91       	pop	r29
 730:	cf 91       	pop	r28
 732:	08 95       	ret

00000734 <__vector_10>:
volatile uint16 g_tick = NUMBER_ZERO;  /* FLAG FOR TIMER ZERO COMPRE INTERRUPT */
void (*global_ptr)(void);/*GLOBAL POINTER TO STORE THE ADDRESS OF CALL BACK FUNCTION AND USE IT INSIDE isr */

/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
 734:	1f 92       	push	r1
 736:	0f 92       	push	r0
 738:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 73c:	0f 92       	push	r0
 73e:	11 24       	eor	r1, r1
 740:	2f 93       	push	r18
 742:	3f 93       	push	r19
 744:	4f 93       	push	r20
 746:	5f 93       	push	r21
 748:	6f 93       	push	r22
 74a:	7f 93       	push	r23
 74c:	8f 93       	push	r24
 74e:	9f 93       	push	r25
 750:	af 93       	push	r26
 752:	bf 93       	push	r27
 754:	ef 93       	push	r30
 756:	ff 93       	push	r31
 758:	cf 93       	push	r28
 75a:	df 93       	push	r29
 75c:	cd b7       	in	r28, 0x3d	; 61
 75e:	de b7       	in	r29, 0x3e	; 62
		global_ptr();
 760:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <global_ptr>
 764:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <global_ptr+0x1>
 768:	fc 01       	movw	r30, r24
 76a:	09 95       	icall
		
}
 76c:	00 00       	nop
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	ff 91       	pop	r31
 774:	ef 91       	pop	r30
 776:	bf 91       	pop	r27
 778:	af 91       	pop	r26
 77a:	9f 91       	pop	r25
 77c:	8f 91       	pop	r24
 77e:	7f 91       	pop	r23
 780:	6f 91       	pop	r22
 782:	5f 91       	pop	r21
 784:	4f 91       	pop	r20
 786:	3f 91       	pop	r19
 788:	2f 91       	pop	r18
 78a:	0f 90       	pop	r0
 78c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 790:	0f 90       	pop	r0
 792:	1f 90       	pop	r1
 794:	18 95       	reti

00000796 <set_call_back>:
/* O/p : N/A */
/* Return : void */
/* Function that takes pointer to fun to use it inside ISR */

void set_call_back(void (*gptr)(void))
{
 796:	cf 93       	push	r28
 798:	df 93       	push	r29
 79a:	00 d0       	rcall	.+0      	; 0x79c <set_call_back+0x6>
 79c:	cd b7       	in	r28, 0x3d	; 61
 79e:	de b7       	in	r29, 0x3e	; 62
 7a0:	9a 83       	std	Y+2, r25	; 0x02
 7a2:	89 83       	std	Y+1, r24	; 0x01
	global_ptr=gptr;
 7a4:	89 81       	ldd	r24, Y+1	; 0x01
 7a6:	9a 81       	ldd	r25, Y+2	; 0x02
 7a8:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <global_ptr+0x1>
 7ac:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <global_ptr>
}
 7b0:	00 00       	nop
 7b2:	0f 90       	pop	r0
 7b4:	0f 90       	pop	r0
 7b6:	df 91       	pop	r29
 7b8:	cf 91       	pop	r28
 7ba:	08 95       	ret

000007bc <timer0_init_CTC_mode>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that initialize timer zero */
void timer0_init_CTC_mode(void)
{
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
	TCNT0=NUMBER_ZERO;/*timer register zero TCNT0 start from zero */
 7c4:	82 e5       	ldi	r24, 0x52	; 82
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	fc 01       	movw	r30, r24
 7ca:	10 82       	st	Z, r1
	OCR0=OCR0_VALUE_REGISTER;/*compare register value */
 7cc:	8c e5       	ldi	r24, 0x5C	; 92
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	2c e7       	ldi	r18, 0x7C	; 124
 7d2:	fc 01       	movw	r30, r24
 7d4:	20 83       	st	Z, r18
	TIMSK|=(NUMBER_ONE<<OCIE0);/*TIMER INTERRUPT ENABLE FOR COMPARE MATCH */
 7d6:	89 e5       	ldi	r24, 0x59	; 89
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	29 e5       	ldi	r18, 0x59	; 89
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	f9 01       	movw	r30, r18
 7e0:	20 81       	ld	r18, Z
 7e2:	22 60       	ori	r18, 0x02	; 2
 7e4:	fc 01       	movw	r30, r24
 7e6:	20 83       	st	Z, r18
	TCCR0|= (NUMBER_ONE<<WGM01) | (NUMBER_ONE<<CS01) | (NUMBER_ONE<<CS00);/*prescaler */
 7e8:	83 e5       	ldi	r24, 0x53	; 83
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	23 e5       	ldi	r18, 0x53	; 83
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	f9 01       	movw	r30, r18
 7f2:	20 81       	ld	r18, Z
 7f4:	2b 60       	ori	r18, 0x0B	; 11
 7f6:	fc 01       	movw	r30, r24
 7f8:	20 83       	st	Z, r18
    Set_Bit(SREG,IBIT);/*ENABEL GLOBAL INTERRUPT BIT IN SREG REGISTER */
 7fa:	8f e5       	ldi	r24, 0x5F	; 95
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	2f e5       	ldi	r18, 0x5F	; 95
 800:	30 e0       	ldi	r19, 0x00	; 0
 802:	f9 01       	movw	r30, r18
 804:	20 81       	ld	r18, Z
 806:	20 68       	ori	r18, 0x80	; 128
 808:	fc 01       	movw	r30, r24
 80a:	20 83       	st	Z, r18
}
 80c:	00 00       	nop
 80e:	df 91       	pop	r29
 810:	cf 91       	pop	r28
 812:	08 95       	ret

00000814 <_exit>:
 814:	f8 94       	cli

00000816 <__stop_program>:
 816:	ff cf       	rjmp	.-2      	; 0x816 <__stop_program>
