
User_Story_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000898  0000092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800066  00800066  00000932  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2b  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079e  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073f  00000000  00000000  00001c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000204  00000000  00000000  00002380  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000352  00000000  00000000  000029c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002d15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 17 03 	jmp	0x62e	; 0x62e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 f7 02 	jmp	0x5ee	; 0x5ee <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 36       	cpi	r26, 0x69	; 105
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <main>
  8a:	0c 94 4a 04 	jmp	0x894	; 0x894 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
	}
	else{
		
	}
	
}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	60 f5       	brcc	.+88     	; 0xfe <DIO_WritePin+0x6c>
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	88 23       	and	r24, r24
  aa:	a9 f4       	brne	.+42     	; 0xd6 <DIO_WritePin+0x44>
  ac:	8b e3       	ldi	r24, 0x3B	; 59
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2b e3       	ldi	r18, 0x3B	; 59
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	60 81       	ld	r22, Z
  b8:	29 81       	ldd	r18, Y+1	; 0x01
  ba:	42 2f       	mov	r20, r18
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_WritePin+0x36>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	4a 95       	dec	r20
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_WritePin+0x32>
  cc:	20 95       	com	r18
  ce:	26 23       	and	r18, r22
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
  d4:	b0 c0       	rjmp	.+352    	; 0x236 <DIO_WritePin+0x1a4>
  d6:	8b e3       	ldi	r24, 0x3B	; 59
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2b e3       	ldi	r18, 0x3B	; 59
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	60 81       	ld	r22, Z
  e2:	29 81       	ldd	r18, Y+1	; 0x01
  e4:	42 2f       	mov	r20, r18
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_WritePin+0x60>
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	4a 95       	dec	r20
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_WritePin+0x5c>
  f6:	26 2b       	or	r18, r22
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
  fc:	9c c0       	rjmp	.+312    	; 0x236 <DIO_WritePin+0x1a4>
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	88 30       	cpi	r24, 0x08	; 8
 102:	88 f1       	brcs	.+98     	; 0x166 <DIO_WritePin+0xd4>
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	80 31       	cpi	r24, 0x10	; 16
 108:	70 f5       	brcc	.+92     	; 0x166 <DIO_WritePin+0xd4>
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	88 23       	and	r24, r24
 10e:	b1 f4       	brne	.+44     	; 0x13c <DIO_WritePin+0xaa>
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 e3       	ldi	r18, 0x38	; 56
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	60 81       	ld	r22, Z
 11c:	29 81       	ldd	r18, Y+1	; 0x01
 11e:	28 50       	subi	r18, 0x08	; 8
 120:	42 2f       	mov	r20, r18
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_WritePin+0x9c>
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	4a 95       	dec	r20
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_WritePin+0x98>
 132:	20 95       	com	r18
 134:	26 23       	and	r18, r22
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
 13a:	7d c0       	rjmp	.+250    	; 0x236 <DIO_WritePin+0x1a4>
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	28 e3       	ldi	r18, 0x38	; 56
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	60 81       	ld	r22, Z
 148:	29 81       	ldd	r18, Y+1	; 0x01
 14a:	28 50       	subi	r18, 0x08	; 8
 14c:	42 2f       	mov	r20, r18
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_WritePin+0xc8>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	4a 95       	dec	r20
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_WritePin+0xc4>
 15e:	26 2b       	or	r18, r22
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
 164:	68 c0       	rjmp	.+208    	; 0x236 <DIO_WritePin+0x1a4>
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	80 31       	cpi	r24, 0x10	; 16
 16a:	88 f1       	brcs	.+98     	; 0x1ce <DIO_WritePin+0x13c>
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	88 31       	cpi	r24, 0x18	; 24
 170:	70 f5       	brcc	.+92     	; 0x1ce <DIO_WritePin+0x13c>
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	88 23       	and	r24, r24
 176:	b1 f4       	brne	.+44     	; 0x1a4 <DIO_WritePin+0x112>
 178:	85 e3       	ldi	r24, 0x35	; 53
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	25 e3       	ldi	r18, 0x35	; 53
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	60 81       	ld	r22, Z
 184:	29 81       	ldd	r18, Y+1	; 0x01
 186:	20 51       	subi	r18, 0x10	; 16
 188:	42 2f       	mov	r20, r18
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_WritePin+0x104>
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	4a 95       	dec	r20
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_WritePin+0x100>
 19a:	20 95       	com	r18
 19c:	26 23       	and	r18, r22
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
 1a2:	49 c0       	rjmp	.+146    	; 0x236 <DIO_WritePin+0x1a4>
 1a4:	85 e3       	ldi	r24, 0x35	; 53
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	25 e3       	ldi	r18, 0x35	; 53
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	60 81       	ld	r22, Z
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	20 51       	subi	r18, 0x10	; 16
 1b4:	42 2f       	mov	r20, r18
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_WritePin+0x130>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_WritePin+0x12c>
 1c6:	26 2b       	or	r18, r22
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
 1cc:	34 c0       	rjmp	.+104    	; 0x236 <DIO_WritePin+0x1a4>
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	88 31       	cpi	r24, 0x18	; 24
 1d2:	88 f1       	brcs	.+98     	; 0x236 <DIO_WritePin+0x1a4>
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	80 32       	cpi	r24, 0x20	; 32
 1d8:	70 f5       	brcc	.+92     	; 0x236 <DIO_WritePin+0x1a4>
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	88 23       	and	r24, r24
 1de:	b1 f4       	brne	.+44     	; 0x20c <DIO_WritePin+0x17a>
 1e0:	82 e3       	ldi	r24, 0x32	; 50
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	22 e3       	ldi	r18, 0x32	; 50
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	60 81       	ld	r22, Z
 1ec:	29 81       	ldd	r18, Y+1	; 0x01
 1ee:	28 51       	subi	r18, 0x18	; 24
 1f0:	42 2f       	mov	r20, r18
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_WritePin+0x16c>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	4a 95       	dec	r20
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_WritePin+0x168>
 202:	20 95       	com	r18
 204:	26 23       	and	r18, r22
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
 20a:	15 c0       	rjmp	.+42     	; 0x236 <DIO_WritePin+0x1a4>
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	22 e3       	ldi	r18, 0x32	; 50
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	60 81       	ld	r22, Z
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	28 51       	subi	r18, 0x18	; 24
 21c:	42 2f       	mov	r20, r18
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_WritePin+0x198>
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	4a 95       	dec	r20
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_WritePin+0x194>
 22e:	26 2b       	or	r18, r22
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
 234:	00 c0       	rjmp	.+0      	; 0x236 <DIO_WritePin+0x1a4>
 236:	00 00       	nop
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <DIO_SetPinDirection+0x6>
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	6a 83       	std	Y+2, r22	; 0x02
	
	if( (PinNum >= 0U) && (PinNum <= 7U) ){
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 30       	cpi	r24, 0x08	; 8
 254:	60 f5       	brcc	.+88     	; 0x2ae <DIO_SetPinDirection+0x6c>
		if(PinDirection == 0U){
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	88 23       	and	r24, r24
 25a:	a9 f4       	brne	.+42     	; 0x286 <DIO_SetPinDirection+0x44>
			Clear_Bit(DDRA,PinNum);
 25c:	8a e3       	ldi	r24, 0x3A	; 58
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2a e3       	ldi	r18, 0x3A	; 58
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	60 81       	ld	r22, Z
 268:	29 81       	ldd	r18, Y+1	; 0x01
 26a:	42 2f       	mov	r20, r18
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_SetPinDirection+0x36>
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	4a 95       	dec	r20
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_SetPinDirection+0x32>
 27c:	20 95       	com	r18
 27e:	26 23       	and	r18, r22
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
 284:	b0 c0       	rjmp	.+352    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
	if( (PinNum >= 0U) && (PinNum <= 7U) ){
		if(PinDirection == 0U){
			Clear_Bit(DDRA,PinNum);
		}
		else{
			Set_Bit(DDRA,PinNum);
 286:	8a e3       	ldi	r24, 0x3A	; 58
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	2a e3       	ldi	r18, 0x3A	; 58
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	f9 01       	movw	r30, r18
 290:	60 81       	ld	r22, Z
 292:	29 81       	ldd	r18, Y+1	; 0x01
 294:	42 2f       	mov	r20, r18
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_SetPinDirection+0x60>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	4a 95       	dec	r20
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_SetPinDirection+0x5c>
 2a6:	26 2b       	or	r18, r22
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
 2ac:	9c c0       	rjmp	.+312    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
		}
		else{
			Set_Bit(DDRA,PinNum);
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	88 30       	cpi	r24, 0x08	; 8
 2b2:	88 f1       	brcs	.+98     	; 0x316 <DIO_SetPinDirection+0xd4>
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	80 31       	cpi	r24, 0x10	; 16
 2b8:	70 f5       	brcc	.+92     	; 0x316 <DIO_SetPinDirection+0xd4>
		if(PinDirection == 0U){
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	88 23       	and	r24, r24
 2be:	b1 f4       	brne	.+44     	; 0x2ec <DIO_SetPinDirection+0xaa>
			Clear_Bit(DDRB,PinNum-8U);
 2c0:	87 e3       	ldi	r24, 0x37	; 55
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	27 e3       	ldi	r18, 0x37	; 55
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	60 81       	ld	r22, Z
 2cc:	29 81       	ldd	r18, Y+1	; 0x01
 2ce:	28 50       	subi	r18, 0x08	; 8
 2d0:	42 2f       	mov	r20, r18
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_SetPinDirection+0x9c>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	4a 95       	dec	r20
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_SetPinDirection+0x98>
 2e2:	20 95       	com	r18
 2e4:	26 23       	and	r18, r22
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRA,PinNum);
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
		if(PinDirection == 0U){
 2ea:	7d c0       	rjmp	.+250    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
			Clear_Bit(DDRB,PinNum-8U);
		}
		else{
			Set_Bit(DDRB,PinNum-8U);
 2ec:	87 e3       	ldi	r24, 0x37	; 55
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	27 e3       	ldi	r18, 0x37	; 55
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	f9 01       	movw	r30, r18
 2f6:	60 81       	ld	r22, Z
 2f8:	29 81       	ldd	r18, Y+1	; 0x01
 2fa:	28 50       	subi	r18, 0x08	; 8
 2fc:	42 2f       	mov	r20, r18
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_SetPinDirection+0xc8>
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	4a 95       	dec	r20
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_SetPinDirection+0xc4>
 30e:	26 2b       	or	r18, r22
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRA,PinNum);
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
		if(PinDirection == 0U){
 314:	68 c0       	rjmp	.+208    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
		}
		else{
			Set_Bit(DDRB,PinNum-8U);
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	80 31       	cpi	r24, 0x10	; 16
 31a:	88 f1       	brcs	.+98     	; 0x37e <DIO_SetPinDirection+0x13c>
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	70 f5       	brcc	.+92     	; 0x37e <DIO_SetPinDirection+0x13c>
		if(PinDirection == 0U){
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	88 23       	and	r24, r24
 326:	b1 f4       	brne	.+44     	; 0x354 <DIO_SetPinDirection+0x112>
			Clear_Bit(DDRC,PinNum-16);
 328:	84 e3       	ldi	r24, 0x34	; 52
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	24 e3       	ldi	r18, 0x34	; 52
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	f9 01       	movw	r30, r18
 332:	60 81       	ld	r22, Z
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	20 51       	subi	r18, 0x10	; 16
 338:	42 2f       	mov	r20, r18
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPinDirection+0x104>
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	4a 95       	dec	r20
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPinDirection+0x100>
 34a:	20 95       	com	r18
 34c:	26 23       	and	r18, r22
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRB,PinNum-8U);
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
		if(PinDirection == 0U){
 352:	49 c0       	rjmp	.+146    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
			Clear_Bit(DDRC,PinNum-16);
		}
		else{
			Set_Bit(DDRC,PinNum-16);
 354:	84 e3       	ldi	r24, 0x34	; 52
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	24 e3       	ldi	r18, 0x34	; 52
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	f9 01       	movw	r30, r18
 35e:	60 81       	ld	r22, Z
 360:	29 81       	ldd	r18, Y+1	; 0x01
 362:	20 51       	subi	r18, 0x10	; 16
 364:	42 2f       	mov	r20, r18
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_SetPinDirection+0x130>
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	4a 95       	dec	r20
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_SetPinDirection+0x12c>
 376:	26 2b       	or	r18, r22
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRB,PinNum-8U);
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
		if(PinDirection == 0U){
 37c:	34 c0       	rjmp	.+104    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
		}
		else{
			Set_Bit(DDRC,PinNum-16);
		}
	}
	else if( (PinNum >= 24U) && (PinNum <= 31U) ){
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	88 31       	cpi	r24, 0x18	; 24
 382:	88 f1       	brcs	.+98     	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	80 32       	cpi	r24, 0x20	; 32
 388:	70 f5       	brcc	.+92     	; 0x3e6 <DIO_SetPinDirection+0x1a4>
		if(PinDirection == 0U){
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	88 23       	and	r24, r24
 38e:	b1 f4       	brne	.+44     	; 0x3bc <DIO_SetPinDirection+0x17a>
			Clear_Bit(DDRD,PinNum-24);
 390:	81 e3       	ldi	r24, 0x31	; 49
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	21 e3       	ldi	r18, 0x31	; 49
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	60 81       	ld	r22, Z
 39c:	29 81       	ldd	r18, Y+1	; 0x01
 39e:	28 51       	subi	r18, 0x18	; 24
 3a0:	42 2f       	mov	r20, r18
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_SetPinDirection+0x16c>
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	4a 95       	dec	r20
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_SetPinDirection+0x168>
 3b2:	20 95       	com	r18
 3b4:	26 23       	and	r18, r22
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
 3ba:	15 c0       	rjmp	.+42     	; 0x3e6 <DIO_SetPinDirection+0x1a4>
	else if( (PinNum >= 24U) && (PinNum <= 31U) ){
		if(PinDirection == 0U){
			Clear_Bit(DDRD,PinNum-24);
		}
		else{
			Set_Bit(DDRD,PinNum-24);
 3bc:	81 e3       	ldi	r24, 0x31	; 49
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	21 e3       	ldi	r18, 0x31	; 49
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	60 81       	ld	r22, Z
 3c8:	29 81       	ldd	r18, Y+1	; 0x01
 3ca:	28 51       	subi	r18, 0x18	; 24
 3cc:	42 2f       	mov	r20, r18
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_SetPinDirection+0x198>
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	4a 95       	dec	r20
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_SetPinDirection+0x194>
 3de:	26 2b       	or	r18, r22
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 3e6:	00 00       	nop
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <main>:
#include "includes/BitwiseOperations.h"
#include "includes/schadular.h"

int main(void)
{
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
	
    DIO_SetPinDirection(LED1,OUTPUT); /*Set DDRB5 (LED1) Output*/
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	8d e0       	ldi	r24, 0x0D	; 13
 3fe:	0e 94 21 01 	call	0x242	; 0x242 <DIO_SetPinDirection>
    DIO_SetPinDirection(LED2,OUTPUT); /*Set DDRB6 (LED2) Output*/
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	8e e0       	ldi	r24, 0x0E	; 14
 406:	0e 94 21 01 	call	0x242	; 0x242 <DIO_SetPinDirection>
    DIO_SetPinDirection(LED3,OUTPUT); /*Set DDRB7 (LED3) Output*/
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	8f e0       	ldi	r24, 0x0F	; 15
 40e:	0e 94 21 01 	call	0x242	; 0x242 <DIO_SetPinDirection>

    DIO_WritePin(LED1,LOW); /*Led is off*/
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	8d e0       	ldi	r24, 0x0D	; 13
 416:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(LED2,LOW); /*Led is off*/
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	8e e0       	ldi	r24, 0x0E	; 14
 41e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(LED3,LOW); /*Led is off*/
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	8f e0       	ldi	r24, 0x0F	; 15
 426:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    while (1) 
    {  
		prefield(ptr,3);
 42a:	63 e0       	ldi	r22, 0x03	; 3
 42c:	80 e6       	ldi	r24, 0x60	; 96
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 1b 02 	call	0x436	; 0x436 <prefield>
	}
 434:	fa cf       	rjmp	.-12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>

00000436 <prefield>:
#include "../includes/schadular.h"

void prefield(void (*ptr[])(void),uint8 size )
{
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	62 97       	sbiw	r28, 0x12	; 18
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	99 8b       	std	Y+17, r25	; 0x11
 44c:	88 8b       	std	Y+16, r24	; 0x10
 44e:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i ;
	for(i=0 ; i<3;i++)
 450:	19 82       	std	Y+1, r1	; 0x01
 452:	83 c0       	rjmp	.+262    	; 0x55a <prefield+0x124>
	{
		ptr[i]();
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	88 2f       	mov	r24, r24
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	28 89       	ldd	r18, Y+16	; 0x10
 460:	39 89       	ldd	r19, Y+17	; 0x11
 462:	82 0f       	add	r24, r18
 464:	93 1f       	adc	r25, r19
 466:	fc 01       	movw	r30, r24
 468:	80 81       	ld	r24, Z
 46a:	91 81       	ldd	r25, Z+1	; 0x01
 46c:	fc 01       	movw	r30, r24
 46e:	09 95       	icall
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	aa ef       	ldi	r26, 0xFA	; 250
 476:	b4 e4       	ldi	r27, 0x44	; 68
 478:	8a 83       	std	Y+2, r24	; 0x02
 47a:	9b 83       	std	Y+3, r25	; 0x03
 47c:	ac 83       	std	Y+4, r26	; 0x04
 47e:	bd 83       	std	Y+5, r27	; 0x05

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 480:	20 e0       	ldi	r18, 0x00	; 0
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	4a e7       	ldi	r20, 0x7A	; 122
 486:	53 e4       	ldi	r21, 0x43	; 67
 488:	6a 81       	ldd	r22, Y+2	; 0x02
 48a:	7b 81       	ldd	r23, Y+3	; 0x03
 48c:	8c 81       	ldd	r24, Y+4	; 0x04
 48e:	9d 81       	ldd	r25, Y+5	; 0x05
 490:	0e 94 b5 03 	call	0x76a	; 0x76a <__mulsf3>
 494:	dc 01       	movw	r26, r24
 496:	cb 01       	movw	r24, r22
 498:	8e 83       	std	Y+6, r24	; 0x06
 49a:	9f 83       	std	Y+7, r25	; 0x07
 49c:	a8 87       	std	Y+8, r26	; 0x08
 49e:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	40 e8       	ldi	r20, 0x80	; 128
 4a6:	5f e3       	ldi	r21, 0x3F	; 63
 4a8:	6e 81       	ldd	r22, Y+6	; 0x06
 4aa:	7f 81       	ldd	r23, Y+7	; 0x07
 4ac:	88 85       	ldd	r24, Y+8	; 0x08
 4ae:	99 85       	ldd	r25, Y+9	; 0x09
 4b0:	0e 94 2f 03 	call	0x65e	; 0x65e <__cmpsf2>
 4b4:	88 23       	and	r24, r24
 4b6:	2c f4       	brge	.+10     	; 0x4c2 <prefield+0x8c>
		__ticks = 1;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	9b 87       	std	Y+11, r25	; 0x0b
 4be:	8a 87       	std	Y+10, r24	; 0x0a
 4c0:	3f c0       	rjmp	.+126    	; 0x540 <prefield+0x10a>
	else if (__tmp > 65535)
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	3f ef       	ldi	r19, 0xFF	; 255
 4c6:	4f e7       	ldi	r20, 0x7F	; 127
 4c8:	57 e4       	ldi	r21, 0x47	; 71
 4ca:	6e 81       	ldd	r22, Y+6	; 0x06
 4cc:	7f 81       	ldd	r23, Y+7	; 0x07
 4ce:	88 85       	ldd	r24, Y+8	; 0x08
 4d0:	99 85       	ldd	r25, Y+9	; 0x09
 4d2:	0e 94 b0 03 	call	0x760	; 0x760 <__gesf2>
 4d6:	18 16       	cp	r1, r24
 4d8:	4c f5       	brge	.+82     	; 0x52c <prefield+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4da:	20 e0       	ldi	r18, 0x00	; 0
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	40 e2       	ldi	r20, 0x20	; 32
 4e0:	51 e4       	ldi	r21, 0x41	; 65
 4e2:	6a 81       	ldd	r22, Y+2	; 0x02
 4e4:	7b 81       	ldd	r23, Y+3	; 0x03
 4e6:	8c 81       	ldd	r24, Y+4	; 0x04
 4e8:	9d 81       	ldd	r25, Y+5	; 0x05
 4ea:	0e 94 b5 03 	call	0x76a	; 0x76a <__mulsf3>
 4ee:	dc 01       	movw	r26, r24
 4f0:	cb 01       	movw	r24, r22
 4f2:	bc 01       	movw	r22, r24
 4f4:	cd 01       	movw	r24, r26
 4f6:	0e 94 34 03 	call	0x668	; 0x668 <__fixunssfsi>
 4fa:	dc 01       	movw	r26, r24
 4fc:	cb 01       	movw	r24, r22
 4fe:	9b 87       	std	Y+11, r25	; 0x0b
 500:	8a 87       	std	Y+10, r24	; 0x0a
 502:	0f c0       	rjmp	.+30     	; 0x522 <prefield+0xec>
 504:	89 e1       	ldi	r24, 0x19	; 25
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	9d 87       	std	Y+13, r25	; 0x0d
 50a:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 50c:	8c 85       	ldd	r24, Y+12	; 0x0c
 50e:	9d 85       	ldd	r25, Y+13	; 0x0d
 510:	01 97       	sbiw	r24, 0x01	; 1
 512:	f1 f7       	brne	.-4      	; 0x510 <prefield+0xda>
 514:	9d 87       	std	Y+13, r25	; 0x0d
 516:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 518:	8a 85       	ldd	r24, Y+10	; 0x0a
 51a:	9b 85       	ldd	r25, Y+11	; 0x0b
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	9b 87       	std	Y+11, r25	; 0x0b
 520:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 522:	8a 85       	ldd	r24, Y+10	; 0x0a
 524:	9b 85       	ldd	r25, Y+11	; 0x0b
 526:	89 2b       	or	r24, r25
 528:	69 f7       	brne	.-38     	; 0x504 <prefield+0xce>
 52a:	14 c0       	rjmp	.+40     	; 0x554 <prefield+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 52c:	6e 81       	ldd	r22, Y+6	; 0x06
 52e:	7f 81       	ldd	r23, Y+7	; 0x07
 530:	88 85       	ldd	r24, Y+8	; 0x08
 532:	99 85       	ldd	r25, Y+9	; 0x09
 534:	0e 94 34 03 	call	0x668	; 0x668 <__fixunssfsi>
 538:	dc 01       	movw	r26, r24
 53a:	cb 01       	movw	r24, r22
 53c:	9b 87       	std	Y+11, r25	; 0x0b
 53e:	8a 87       	std	Y+10, r24	; 0x0a
 540:	8a 85       	ldd	r24, Y+10	; 0x0a
 542:	9b 85       	ldd	r25, Y+11	; 0x0b
 544:	9f 87       	std	Y+15, r25	; 0x0f
 546:	8e 87       	std	Y+14, r24	; 0x0e
 548:	8e 85       	ldd	r24, Y+14	; 0x0e
 54a:	9f 85       	ldd	r25, Y+15	; 0x0f
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <prefield+0x116>
 550:	9f 87       	std	Y+15, r25	; 0x0f
 552:	8e 87       	std	Y+14, r24	; 0x0e
#include "../includes/schadular.h"

void prefield(void (*ptr[])(void),uint8 size )
{
	uint8 i ;
	for(i=0 ; i<3;i++)
 554:	89 81       	ldd	r24, Y+1	; 0x01
 556:	8f 5f       	subi	r24, 0xFF	; 255
 558:	89 83       	std	Y+1, r24	; 0x01
 55a:	89 81       	ldd	r24, Y+1	; 0x01
 55c:	83 30       	cpi	r24, 0x03	; 3
 55e:	08 f4       	brcc	.+2      	; 0x562 <prefield+0x12c>
 560:	79 cf       	rjmp	.-270    	; 0x454 <prefield+0x1e>
	{
		ptr[i]();
		_delay_ms(2000);
	}
 562:	00 00       	nop
 564:	62 96       	adiw	r28, 0x12	; 18
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	f8 94       	cli
 56a:	de bf       	out	0x3e, r29	; 62
 56c:	0f be       	out	0x3f, r0	; 63
 56e:	cd bf       	out	0x3d, r28	; 61
 570:	df 91       	pop	r29
 572:	cf 91       	pop	r28
 574:	08 95       	ret

00000576 <GO>:
/* O/p : N/A */
/* Return : void */
/* Function that initialize GO LED IN STATE MACHINE  */

void GO(void)
{
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LED1,HIGH); /*GO State*/
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	8d e0       	ldi	r24, 0x0D	; 13
 582:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED2,LOW);
 586:	60 e0       	ldi	r22, 0x00	; 0
 588:	8e e0       	ldi	r24, 0x0E	; 14
 58a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED3,LOW);
 58e:	60 e0       	ldi	r22, 0x00	; 0
 590:	8f e0       	ldi	r24, 0x0F	; 15
 592:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	
}
 596:	00 00       	nop
 598:	df 91       	pop	r29
 59a:	cf 91       	pop	r28
 59c:	08 95       	ret

0000059e <STOP>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that initialize STOP LED IN STATE MACHINE  */
void STOP(void)
{
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	cd b7       	in	r28, 0x3d	; 61
 5a4:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LED1,LOW); /*STOP State*/
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	8d e0       	ldi	r24, 0x0D	; 13
 5aa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED2,LOW);
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	8e e0       	ldi	r24, 0x0E	; 14
 5b2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED3,HIGH);
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	8f e0       	ldi	r24, 0x0F	; 15
 5ba:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
}
 5be:	00 00       	nop
 5c0:	df 91       	pop	r29
 5c2:	cf 91       	pop	r28
 5c4:	08 95       	ret

000005c6 <READY>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that initialize STOP LED IN STATE MACHINE  */
void READY(void)
{
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	cd b7       	in	r28, 0x3d	; 61
 5cc:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LED1,LOW); /*READY State*/
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	8d e0       	ldi	r24, 0x0D	; 13
 5d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED2,HIGH);
 5d6:	61 e0       	ldi	r22, 0x01	; 1
 5d8:	8e e0       	ldi	r24, 0x0E	; 14
 5da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED3,LOW);
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	8f e0       	ldi	r24, 0x0F	; 15
 5e2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
}
 5e6:	00 00       	nop
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	08 95       	ret

000005ee <__vector_10>:
volatile uint8 external_flag =NUMBER_ZERO ; /* FLAG FOR EXTERNAL INTEERUPT 2 */


/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
 5ee:	1f 92       	push	r1
 5f0:	0f 92       	push	r0
 5f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	8f 93       	push	r24
 5fc:	9f 93       	push	r25
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
		g_tick++;
 606:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 60a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__data_end+0x1>
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__data_end+0x1>
 614:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
}
 618:	00 00       	nop
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	9f 91       	pop	r25
 620:	8f 91       	pop	r24
 622:	0f 90       	pop	r0
 624:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 628:	0f 90       	pop	r0
 62a:	1f 90       	pop	r1
 62c:	18 95       	reti

0000062e <__vector_3>:
/* Interrupt Service Routine EXTERNAL INTERRUPT mode */

ISR(INT2_vect)
{
 62e:	1f 92       	push	r1
 630:	0f 92       	push	r0
 632:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 636:	0f 92       	push	r0
 638:	11 24       	eor	r1, r1
 63a:	8f 93       	push	r24
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	cd b7       	in	r28, 0x3d	; 61
 642:	de b7       	in	r29, 0x3e	; 62
	external_flag = NUMBER_ONE ;
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <external_flag>
}
 64a:	00 00       	nop
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	8f 91       	pop	r24
 652:	0f 90       	pop	r0
 654:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 658:	0f 90       	pop	r0
 65a:	1f 90       	pop	r1
 65c:	18 95       	reti

0000065e <__cmpsf2>:
 65e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_cmp>
 662:	08 f4       	brcc	.+2      	; 0x666 <__cmpsf2+0x8>
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	08 95       	ret

00000668 <__fixunssfsi>:
 668:	0e 94 8f 03 	call	0x71e	; 0x71e <__fp_splitA>
 66c:	88 f0       	brcs	.+34     	; 0x690 <__fixunssfsi+0x28>
 66e:	9f 57       	subi	r25, 0x7F	; 127
 670:	98 f0       	brcs	.+38     	; 0x698 <__fixunssfsi+0x30>
 672:	b9 2f       	mov	r27, r25
 674:	99 27       	eor	r25, r25
 676:	b7 51       	subi	r27, 0x17	; 23
 678:	b0 f0       	brcs	.+44     	; 0x6a6 <__fixunssfsi+0x3e>
 67a:	e1 f0       	breq	.+56     	; 0x6b4 <__fixunssfsi+0x4c>
 67c:	66 0f       	add	r22, r22
 67e:	77 1f       	adc	r23, r23
 680:	88 1f       	adc	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	1a f0       	brmi	.+6      	; 0x68c <__fixunssfsi+0x24>
 686:	ba 95       	dec	r27
 688:	c9 f7       	brne	.-14     	; 0x67c <__fixunssfsi+0x14>
 68a:	14 c0       	rjmp	.+40     	; 0x6b4 <__fixunssfsi+0x4c>
 68c:	b1 30       	cpi	r27, 0x01	; 1
 68e:	91 f0       	breq	.+36     	; 0x6b4 <__fixunssfsi+0x4c>
 690:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_zero>
 694:	b1 e0       	ldi	r27, 0x01	; 1
 696:	08 95       	ret
 698:	0c 94 a9 03 	jmp	0x752	; 0x752 <__fp_zero>
 69c:	67 2f       	mov	r22, r23
 69e:	78 2f       	mov	r23, r24
 6a0:	88 27       	eor	r24, r24
 6a2:	b8 5f       	subi	r27, 0xF8	; 248
 6a4:	39 f0       	breq	.+14     	; 0x6b4 <__fixunssfsi+0x4c>
 6a6:	b9 3f       	cpi	r27, 0xF9	; 249
 6a8:	cc f3       	brlt	.-14     	; 0x69c <__fixunssfsi+0x34>
 6aa:	86 95       	lsr	r24
 6ac:	77 95       	ror	r23
 6ae:	67 95       	ror	r22
 6b0:	b3 95       	inc	r27
 6b2:	d9 f7       	brne	.-10     	; 0x6aa <__fixunssfsi+0x42>
 6b4:	3e f4       	brtc	.+14     	; 0x6c4 <__fixunssfsi+0x5c>
 6b6:	90 95       	com	r25
 6b8:	80 95       	com	r24
 6ba:	70 95       	com	r23
 6bc:	61 95       	neg	r22
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	08 95       	ret

000006c6 <__fp_cmp>:
 6c6:	99 0f       	add	r25, r25
 6c8:	00 08       	sbc	r0, r0
 6ca:	55 0f       	add	r21, r21
 6cc:	aa 0b       	sbc	r26, r26
 6ce:	e0 e8       	ldi	r30, 0x80	; 128
 6d0:	fe ef       	ldi	r31, 0xFE	; 254
 6d2:	16 16       	cp	r1, r22
 6d4:	17 06       	cpc	r1, r23
 6d6:	e8 07       	cpc	r30, r24
 6d8:	f9 07       	cpc	r31, r25
 6da:	c0 f0       	brcs	.+48     	; 0x70c <__fp_cmp+0x46>
 6dc:	12 16       	cp	r1, r18
 6de:	13 06       	cpc	r1, r19
 6e0:	e4 07       	cpc	r30, r20
 6e2:	f5 07       	cpc	r31, r21
 6e4:	98 f0       	brcs	.+38     	; 0x70c <__fp_cmp+0x46>
 6e6:	62 1b       	sub	r22, r18
 6e8:	73 0b       	sbc	r23, r19
 6ea:	84 0b       	sbc	r24, r20
 6ec:	95 0b       	sbc	r25, r21
 6ee:	39 f4       	brne	.+14     	; 0x6fe <__fp_cmp+0x38>
 6f0:	0a 26       	eor	r0, r26
 6f2:	61 f0       	breq	.+24     	; 0x70c <__fp_cmp+0x46>
 6f4:	23 2b       	or	r18, r19
 6f6:	24 2b       	or	r18, r20
 6f8:	25 2b       	or	r18, r21
 6fa:	21 f4       	brne	.+8      	; 0x704 <__fp_cmp+0x3e>
 6fc:	08 95       	ret
 6fe:	0a 26       	eor	r0, r26
 700:	09 f4       	brne	.+2      	; 0x704 <__fp_cmp+0x3e>
 702:	a1 40       	sbci	r26, 0x01	; 1
 704:	a6 95       	lsr	r26
 706:	8f ef       	ldi	r24, 0xFF	; 255
 708:	81 1d       	adc	r24, r1
 70a:	81 1d       	adc	r24, r1
 70c:	08 95       	ret

0000070e <__fp_split3>:
 70e:	57 fd       	sbrc	r21, 7
 710:	90 58       	subi	r25, 0x80	; 128
 712:	44 0f       	add	r20, r20
 714:	55 1f       	adc	r21, r21
 716:	59 f0       	breq	.+22     	; 0x72e <__fp_splitA+0x10>
 718:	5f 3f       	cpi	r21, 0xFF	; 255
 71a:	71 f0       	breq	.+28     	; 0x738 <__fp_splitA+0x1a>
 71c:	47 95       	ror	r20

0000071e <__fp_splitA>:
 71e:	88 0f       	add	r24, r24
 720:	97 fb       	bst	r25, 7
 722:	99 1f       	adc	r25, r25
 724:	61 f0       	breq	.+24     	; 0x73e <__fp_splitA+0x20>
 726:	9f 3f       	cpi	r25, 0xFF	; 255
 728:	79 f0       	breq	.+30     	; 0x748 <__fp_splitA+0x2a>
 72a:	87 95       	ror	r24
 72c:	08 95       	ret
 72e:	12 16       	cp	r1, r18
 730:	13 06       	cpc	r1, r19
 732:	14 06       	cpc	r1, r20
 734:	55 1f       	adc	r21, r21
 736:	f2 cf       	rjmp	.-28     	; 0x71c <__fp_split3+0xe>
 738:	46 95       	lsr	r20
 73a:	f1 df       	rcall	.-30     	; 0x71e <__fp_splitA>
 73c:	08 c0       	rjmp	.+16     	; 0x74e <__fp_splitA+0x30>
 73e:	16 16       	cp	r1, r22
 740:	17 06       	cpc	r1, r23
 742:	18 06       	cpc	r1, r24
 744:	99 1f       	adc	r25, r25
 746:	f1 cf       	rjmp	.-30     	; 0x72a <__fp_splitA+0xc>
 748:	86 95       	lsr	r24
 74a:	71 05       	cpc	r23, r1
 74c:	61 05       	cpc	r22, r1
 74e:	08 94       	sec
 750:	08 95       	ret

00000752 <__fp_zero>:
 752:	e8 94       	clt

00000754 <__fp_szero>:
 754:	bb 27       	eor	r27, r27
 756:	66 27       	eor	r22, r22
 758:	77 27       	eor	r23, r23
 75a:	cb 01       	movw	r24, r22
 75c:	97 f9       	bld	r25, 7
 75e:	08 95       	ret

00000760 <__gesf2>:
 760:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fp_cmp>
 764:	08 f4       	brcc	.+2      	; 0x768 <__gesf2+0x8>
 766:	8f ef       	ldi	r24, 0xFF	; 255
 768:	08 95       	ret

0000076a <__mulsf3>:
 76a:	0e 94 c8 03 	call	0x790	; 0x790 <__mulsf3x>
 76e:	0c 94 39 04 	jmp	0x872	; 0x872 <__fp_round>
 772:	0e 94 2b 04 	call	0x856	; 0x856 <__fp_pscA>
 776:	38 f0       	brcs	.+14     	; 0x786 <__mulsf3+0x1c>
 778:	0e 94 32 04 	call	0x864	; 0x864 <__fp_pscB>
 77c:	20 f0       	brcs	.+8      	; 0x786 <__mulsf3+0x1c>
 77e:	95 23       	and	r25, r21
 780:	11 f0       	breq	.+4      	; 0x786 <__mulsf3+0x1c>
 782:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 786:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_nan>
 78a:	11 24       	eor	r1, r1
 78c:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_szero>

00000790 <__mulsf3x>:
 790:	0e 94 87 03 	call	0x70e	; 0x70e <__fp_split3>
 794:	70 f3       	brcs	.-36     	; 0x772 <__mulsf3+0x8>

00000796 <__mulsf3_pse>:
 796:	95 9f       	mul	r25, r21
 798:	c1 f3       	breq	.-16     	; 0x78a <__mulsf3+0x20>
 79a:	95 0f       	add	r25, r21
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	55 1f       	adc	r21, r21
 7a0:	62 9f       	mul	r22, r18
 7a2:	f0 01       	movw	r30, r0
 7a4:	72 9f       	mul	r23, r18
 7a6:	bb 27       	eor	r27, r27
 7a8:	f0 0d       	add	r31, r0
 7aa:	b1 1d       	adc	r27, r1
 7ac:	63 9f       	mul	r22, r19
 7ae:	aa 27       	eor	r26, r26
 7b0:	f0 0d       	add	r31, r0
 7b2:	b1 1d       	adc	r27, r1
 7b4:	aa 1f       	adc	r26, r26
 7b6:	64 9f       	mul	r22, r20
 7b8:	66 27       	eor	r22, r22
 7ba:	b0 0d       	add	r27, r0
 7bc:	a1 1d       	adc	r26, r1
 7be:	66 1f       	adc	r22, r22
 7c0:	82 9f       	mul	r24, r18
 7c2:	22 27       	eor	r18, r18
 7c4:	b0 0d       	add	r27, r0
 7c6:	a1 1d       	adc	r26, r1
 7c8:	62 1f       	adc	r22, r18
 7ca:	73 9f       	mul	r23, r19
 7cc:	b0 0d       	add	r27, r0
 7ce:	a1 1d       	adc	r26, r1
 7d0:	62 1f       	adc	r22, r18
 7d2:	83 9f       	mul	r24, r19
 7d4:	a0 0d       	add	r26, r0
 7d6:	61 1d       	adc	r22, r1
 7d8:	22 1f       	adc	r18, r18
 7da:	74 9f       	mul	r23, r20
 7dc:	33 27       	eor	r19, r19
 7de:	a0 0d       	add	r26, r0
 7e0:	61 1d       	adc	r22, r1
 7e2:	23 1f       	adc	r18, r19
 7e4:	84 9f       	mul	r24, r20
 7e6:	60 0d       	add	r22, r0
 7e8:	21 1d       	adc	r18, r1
 7ea:	82 2f       	mov	r24, r18
 7ec:	76 2f       	mov	r23, r22
 7ee:	6a 2f       	mov	r22, r26
 7f0:	11 24       	eor	r1, r1
 7f2:	9f 57       	subi	r25, 0x7F	; 127
 7f4:	50 40       	sbci	r21, 0x00	; 0
 7f6:	9a f0       	brmi	.+38     	; 0x81e <__mulsf3_pse+0x88>
 7f8:	f1 f0       	breq	.+60     	; 0x836 <__mulsf3_pse+0xa0>
 7fa:	88 23       	and	r24, r24
 7fc:	4a f0       	brmi	.+18     	; 0x810 <__mulsf3_pse+0x7a>
 7fe:	ee 0f       	add	r30, r30
 800:	ff 1f       	adc	r31, r31
 802:	bb 1f       	adc	r27, r27
 804:	66 1f       	adc	r22, r22
 806:	77 1f       	adc	r23, r23
 808:	88 1f       	adc	r24, r24
 80a:	91 50       	subi	r25, 0x01	; 1
 80c:	50 40       	sbci	r21, 0x00	; 0
 80e:	a9 f7       	brne	.-22     	; 0x7fa <__mulsf3_pse+0x64>
 810:	9e 3f       	cpi	r25, 0xFE	; 254
 812:	51 05       	cpc	r21, r1
 814:	80 f0       	brcs	.+32     	; 0x836 <__mulsf3_pse+0xa0>
 816:	0c 94 22 04 	jmp	0x844	; 0x844 <__fp_inf>
 81a:	0c 94 aa 03 	jmp	0x754	; 0x754 <__fp_szero>
 81e:	5f 3f       	cpi	r21, 0xFF	; 255
 820:	e4 f3       	brlt	.-8      	; 0x81a <__mulsf3_pse+0x84>
 822:	98 3e       	cpi	r25, 0xE8	; 232
 824:	d4 f3       	brlt	.-12     	; 0x81a <__mulsf3_pse+0x84>
 826:	86 95       	lsr	r24
 828:	77 95       	ror	r23
 82a:	67 95       	ror	r22
 82c:	b7 95       	ror	r27
 82e:	f7 95       	ror	r31
 830:	e7 95       	ror	r30
 832:	9f 5f       	subi	r25, 0xFF	; 255
 834:	c1 f7       	brne	.-16     	; 0x826 <__mulsf3_pse+0x90>
 836:	fe 2b       	or	r31, r30
 838:	88 0f       	add	r24, r24
 83a:	91 1d       	adc	r25, r1
 83c:	96 95       	lsr	r25
 83e:	87 95       	ror	r24
 840:	97 f9       	bld	r25, 7
 842:	08 95       	ret

00000844 <__fp_inf>:
 844:	97 f9       	bld	r25, 7
 846:	9f 67       	ori	r25, 0x7F	; 127
 848:	80 e8       	ldi	r24, 0x80	; 128
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	60 e0       	ldi	r22, 0x00	; 0
 84e:	08 95       	ret

00000850 <__fp_nan>:
 850:	9f ef       	ldi	r25, 0xFF	; 255
 852:	80 ec       	ldi	r24, 0xC0	; 192
 854:	08 95       	ret

00000856 <__fp_pscA>:
 856:	00 24       	eor	r0, r0
 858:	0a 94       	dec	r0
 85a:	16 16       	cp	r1, r22
 85c:	17 06       	cpc	r1, r23
 85e:	18 06       	cpc	r1, r24
 860:	09 06       	cpc	r0, r25
 862:	08 95       	ret

00000864 <__fp_pscB>:
 864:	00 24       	eor	r0, r0
 866:	0a 94       	dec	r0
 868:	12 16       	cp	r1, r18
 86a:	13 06       	cpc	r1, r19
 86c:	14 06       	cpc	r1, r20
 86e:	05 06       	cpc	r0, r21
 870:	08 95       	ret

00000872 <__fp_round>:
 872:	09 2e       	mov	r0, r25
 874:	03 94       	inc	r0
 876:	00 0c       	add	r0, r0
 878:	11 f4       	brne	.+4      	; 0x87e <__fp_round+0xc>
 87a:	88 23       	and	r24, r24
 87c:	52 f0       	brmi	.+20     	; 0x892 <__fp_round+0x20>
 87e:	bb 0f       	add	r27, r27
 880:	40 f4       	brcc	.+16     	; 0x892 <__fp_round+0x20>
 882:	bf 2b       	or	r27, r31
 884:	11 f4       	brne	.+4      	; 0x88a <__fp_round+0x18>
 886:	60 ff       	sbrs	r22, 0
 888:	04 c0       	rjmp	.+8      	; 0x892 <__fp_round+0x20>
 88a:	6f 5f       	subi	r22, 0xFF	; 255
 88c:	7f 4f       	sbci	r23, 0xFF	; 255
 88e:	8f 4f       	sbci	r24, 0xFF	; 255
 890:	9f 4f       	sbci	r25, 0xFF	; 255
 892:	08 95       	ret

00000894 <_exit>:
 894:	f8 94       	cli

00000896 <__stop_program>:
 896:	ff cf       	rjmp	.-2      	; 0x896 <__stop_program>
