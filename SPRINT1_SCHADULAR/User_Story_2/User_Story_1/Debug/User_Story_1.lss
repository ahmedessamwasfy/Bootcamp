
User_Story_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  0000069c  00000730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800066  00800066  00000736  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000736  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a0e  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e1  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000680  00000000  00000000  00001a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000248  00000000  00000000  000020f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000475  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003f6  00000000  00000000  000027b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002ba7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <main>
  8a:	0c 94 4c 03 	jmp	0x698	; 0x698 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	60 f5       	brcc	.+88     	; 0xfe <DIO_WritePin+0x6c>
  a6:	8a 81       	ldd	r24, Y+2	; 0x02
  a8:	88 23       	and	r24, r24
  aa:	a9 f4       	brne	.+42     	; 0xd6 <DIO_WritePin+0x44>
  ac:	8b e3       	ldi	r24, 0x3B	; 59
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	2b e3       	ldi	r18, 0x3B	; 59
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	60 81       	ld	r22, Z
  b8:	29 81       	ldd	r18, Y+1	; 0x01
  ba:	42 2f       	mov	r20, r18
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_WritePin+0x36>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	4a 95       	dec	r20
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_WritePin+0x32>
  cc:	20 95       	com	r18
  ce:	26 23       	and	r18, r22
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
  d4:	b0 c0       	rjmp	.+352    	; 0x236 <DIO_WritePin+0x1a4>
  d6:	8b e3       	ldi	r24, 0x3B	; 59
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	2b e3       	ldi	r18, 0x3B	; 59
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	60 81       	ld	r22, Z
  e2:	29 81       	ldd	r18, Y+1	; 0x01
  e4:	42 2f       	mov	r20, r18
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_WritePin+0x60>
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	4a 95       	dec	r20
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_WritePin+0x5c>
  f6:	26 2b       	or	r18, r22
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
  fc:	9c c0       	rjmp	.+312    	; 0x236 <DIO_WritePin+0x1a4>
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	88 30       	cpi	r24, 0x08	; 8
 102:	88 f1       	brcs	.+98     	; 0x166 <DIO_WritePin+0xd4>
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	80 31       	cpi	r24, 0x10	; 16
 108:	70 f5       	brcc	.+92     	; 0x166 <DIO_WritePin+0xd4>
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	88 23       	and	r24, r24
 10e:	b1 f4       	brne	.+44     	; 0x13c <DIO_WritePin+0xaa>
 110:	88 e3       	ldi	r24, 0x38	; 56
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 e3       	ldi	r18, 0x38	; 56
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	f9 01       	movw	r30, r18
 11a:	60 81       	ld	r22, Z
 11c:	29 81       	ldd	r18, Y+1	; 0x01
 11e:	28 50       	subi	r18, 0x08	; 8
 120:	42 2f       	mov	r20, r18
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	21 e0       	ldi	r18, 0x01	; 1
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_WritePin+0x9c>
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	4a 95       	dec	r20
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_WritePin+0x98>
 132:	20 95       	com	r18
 134:	26 23       	and	r18, r22
 136:	fc 01       	movw	r30, r24
 138:	20 83       	st	Z, r18
 13a:	7d c0       	rjmp	.+250    	; 0x236 <DIO_WritePin+0x1a4>
 13c:	88 e3       	ldi	r24, 0x38	; 56
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	28 e3       	ldi	r18, 0x38	; 56
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	60 81       	ld	r22, Z
 148:	29 81       	ldd	r18, Y+1	; 0x01
 14a:	28 50       	subi	r18, 0x08	; 8
 14c:	42 2f       	mov	r20, r18
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	21 e0       	ldi	r18, 0x01	; 1
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_WritePin+0xc8>
 156:	22 0f       	add	r18, r18
 158:	33 1f       	adc	r19, r19
 15a:	4a 95       	dec	r20
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_WritePin+0xc4>
 15e:	26 2b       	or	r18, r22
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
 164:	68 c0       	rjmp	.+208    	; 0x236 <DIO_WritePin+0x1a4>
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	80 31       	cpi	r24, 0x10	; 16
 16a:	88 f1       	brcs	.+98     	; 0x1ce <DIO_WritePin+0x13c>
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	88 31       	cpi	r24, 0x18	; 24
 170:	70 f5       	brcc	.+92     	; 0x1ce <DIO_WritePin+0x13c>
 172:	8a 81       	ldd	r24, Y+2	; 0x02
 174:	88 23       	and	r24, r24
 176:	b1 f4       	brne	.+44     	; 0x1a4 <DIO_WritePin+0x112>
 178:	85 e3       	ldi	r24, 0x35	; 53
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	25 e3       	ldi	r18, 0x35	; 53
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	f9 01       	movw	r30, r18
 182:	60 81       	ld	r22, Z
 184:	29 81       	ldd	r18, Y+1	; 0x01
 186:	20 51       	subi	r18, 0x10	; 16
 188:	42 2f       	mov	r20, r18
 18a:	50 e0       	ldi	r21, 0x00	; 0
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_WritePin+0x104>
 192:	22 0f       	add	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	4a 95       	dec	r20
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_WritePin+0x100>
 19a:	20 95       	com	r18
 19c:	26 23       	and	r18, r22
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
 1a2:	49 c0       	rjmp	.+146    	; 0x236 <DIO_WritePin+0x1a4>
 1a4:	85 e3       	ldi	r24, 0x35	; 53
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	25 e3       	ldi	r18, 0x35	; 53
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	60 81       	ld	r22, Z
 1b0:	29 81       	ldd	r18, Y+1	; 0x01
 1b2:	20 51       	subi	r18, 0x10	; 16
 1b4:	42 2f       	mov	r20, r18
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_WritePin+0x130>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_WritePin+0x12c>
 1c6:	26 2b       	or	r18, r22
 1c8:	fc 01       	movw	r30, r24
 1ca:	20 83       	st	Z, r18
 1cc:	34 c0       	rjmp	.+104    	; 0x236 <DIO_WritePin+0x1a4>
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	88 31       	cpi	r24, 0x18	; 24
 1d2:	88 f1       	brcs	.+98     	; 0x236 <DIO_WritePin+0x1a4>
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	80 32       	cpi	r24, 0x20	; 32
 1d8:	70 f5       	brcc	.+92     	; 0x236 <DIO_WritePin+0x1a4>
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	88 23       	and	r24, r24
 1de:	b1 f4       	brne	.+44     	; 0x20c <DIO_WritePin+0x17a>
 1e0:	82 e3       	ldi	r24, 0x32	; 50
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	22 e3       	ldi	r18, 0x32	; 50
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	60 81       	ld	r22, Z
 1ec:	29 81       	ldd	r18, Y+1	; 0x01
 1ee:	28 51       	subi	r18, 0x18	; 24
 1f0:	42 2f       	mov	r20, r18
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	21 e0       	ldi	r18, 0x01	; 1
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_WritePin+0x16c>
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	4a 95       	dec	r20
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_WritePin+0x168>
 202:	20 95       	com	r18
 204:	26 23       	and	r18, r22
 206:	fc 01       	movw	r30, r24
 208:	20 83       	st	Z, r18
 20a:	15 c0       	rjmp	.+42     	; 0x236 <DIO_WritePin+0x1a4>
 20c:	82 e3       	ldi	r24, 0x32	; 50
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	22 e3       	ldi	r18, 0x32	; 50
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	60 81       	ld	r22, Z
 218:	29 81       	ldd	r18, Y+1	; 0x01
 21a:	28 51       	subi	r18, 0x18	; 24
 21c:	42 2f       	mov	r20, r18
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_WritePin+0x198>
 226:	22 0f       	add	r18, r18
 228:	33 1f       	adc	r19, r19
 22a:	4a 95       	dec	r20
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_WritePin+0x194>
 22e:	26 2b       	or	r18, r22
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
 234:	00 c0       	rjmp	.+0      	; 0x236 <DIO_WritePin+0x1a4>
 236:	00 00       	nop
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	08 95       	ret

00000242 <DIO_SetPinDirection>:
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	00 d0       	rcall	.+0      	; 0x248 <DIO_SetPinDirection+0x6>
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	6a 83       	std	Y+2, r22	; 0x02
 250:	89 81       	ldd	r24, Y+1	; 0x01
 252:	88 30       	cpi	r24, 0x08	; 8
 254:	60 f5       	brcc	.+88     	; 0x2ae <DIO_SetPinDirection+0x6c>
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	88 23       	and	r24, r24
 25a:	a9 f4       	brne	.+42     	; 0x286 <DIO_SetPinDirection+0x44>
 25c:	8a e3       	ldi	r24, 0x3A	; 58
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2a e3       	ldi	r18, 0x3A	; 58
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	60 81       	ld	r22, Z
 268:	29 81       	ldd	r18, Y+1	; 0x01
 26a:	42 2f       	mov	r20, r18
 26c:	50 e0       	ldi	r21, 0x00	; 0
 26e:	21 e0       	ldi	r18, 0x01	; 1
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_SetPinDirection+0x36>
 274:	22 0f       	add	r18, r18
 276:	33 1f       	adc	r19, r19
 278:	4a 95       	dec	r20
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_SetPinDirection+0x32>
 27c:	20 95       	com	r18
 27e:	26 23       	and	r18, r22
 280:	fc 01       	movw	r30, r24
 282:	20 83       	st	Z, r18
 284:	b0 c0       	rjmp	.+352    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 286:	8a e3       	ldi	r24, 0x3A	; 58
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	2a e3       	ldi	r18, 0x3A	; 58
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	f9 01       	movw	r30, r18
 290:	60 81       	ld	r22, Z
 292:	29 81       	ldd	r18, Y+1	; 0x01
 294:	42 2f       	mov	r20, r18
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	21 e0       	ldi	r18, 0x01	; 1
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <DIO_SetPinDirection+0x60>
 29e:	22 0f       	add	r18, r18
 2a0:	33 1f       	adc	r19, r19
 2a2:	4a 95       	dec	r20
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <DIO_SetPinDirection+0x5c>
 2a6:	26 2b       	or	r18, r22
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
 2ac:	9c c0       	rjmp	.+312    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	88 30       	cpi	r24, 0x08	; 8
 2b2:	88 f1       	brcs	.+98     	; 0x316 <DIO_SetPinDirection+0xd4>
 2b4:	89 81       	ldd	r24, Y+1	; 0x01
 2b6:	80 31       	cpi	r24, 0x10	; 16
 2b8:	70 f5       	brcc	.+92     	; 0x316 <DIO_SetPinDirection+0xd4>
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	88 23       	and	r24, r24
 2be:	b1 f4       	brne	.+44     	; 0x2ec <DIO_SetPinDirection+0xaa>
 2c0:	87 e3       	ldi	r24, 0x37	; 55
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	27 e3       	ldi	r18, 0x37	; 55
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	f9 01       	movw	r30, r18
 2ca:	60 81       	ld	r22, Z
 2cc:	29 81       	ldd	r18, Y+1	; 0x01
 2ce:	28 50       	subi	r18, 0x08	; 8
 2d0:	42 2f       	mov	r20, r18
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_SetPinDirection+0x9c>
 2da:	22 0f       	add	r18, r18
 2dc:	33 1f       	adc	r19, r19
 2de:	4a 95       	dec	r20
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_SetPinDirection+0x98>
 2e2:	20 95       	com	r18
 2e4:	26 23       	and	r18, r22
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
 2ea:	7d c0       	rjmp	.+250    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 2ec:	87 e3       	ldi	r24, 0x37	; 55
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	27 e3       	ldi	r18, 0x37	; 55
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	f9 01       	movw	r30, r18
 2f6:	60 81       	ld	r22, Z
 2f8:	29 81       	ldd	r18, Y+1	; 0x01
 2fa:	28 50       	subi	r18, 0x08	; 8
 2fc:	42 2f       	mov	r20, r18
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_SetPinDirection+0xc8>
 306:	22 0f       	add	r18, r18
 308:	33 1f       	adc	r19, r19
 30a:	4a 95       	dec	r20
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_SetPinDirection+0xc4>
 30e:	26 2b       	or	r18, r22
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
 314:	68 c0       	rjmp	.+208    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	80 31       	cpi	r24, 0x10	; 16
 31a:	88 f1       	brcs	.+98     	; 0x37e <DIO_SetPinDirection+0x13c>
 31c:	89 81       	ldd	r24, Y+1	; 0x01
 31e:	88 31       	cpi	r24, 0x18	; 24
 320:	70 f5       	brcc	.+92     	; 0x37e <DIO_SetPinDirection+0x13c>
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	88 23       	and	r24, r24
 326:	b1 f4       	brne	.+44     	; 0x354 <DIO_SetPinDirection+0x112>
 328:	84 e3       	ldi	r24, 0x34	; 52
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	24 e3       	ldi	r18, 0x34	; 52
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	f9 01       	movw	r30, r18
 332:	60 81       	ld	r22, Z
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	20 51       	subi	r18, 0x10	; 16
 338:	42 2f       	mov	r20, r18
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	02 c0       	rjmp	.+4      	; 0x346 <DIO_SetPinDirection+0x104>
 342:	22 0f       	add	r18, r18
 344:	33 1f       	adc	r19, r19
 346:	4a 95       	dec	r20
 348:	e2 f7       	brpl	.-8      	; 0x342 <DIO_SetPinDirection+0x100>
 34a:	20 95       	com	r18
 34c:	26 23       	and	r18, r22
 34e:	fc 01       	movw	r30, r24
 350:	20 83       	st	Z, r18
 352:	49 c0       	rjmp	.+146    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 354:	84 e3       	ldi	r24, 0x34	; 52
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	24 e3       	ldi	r18, 0x34	; 52
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	f9 01       	movw	r30, r18
 35e:	60 81       	ld	r22, Z
 360:	29 81       	ldd	r18, Y+1	; 0x01
 362:	20 51       	subi	r18, 0x10	; 16
 364:	42 2f       	mov	r20, r18
 366:	50 e0       	ldi	r21, 0x00	; 0
 368:	21 e0       	ldi	r18, 0x01	; 1
 36a:	30 e0       	ldi	r19, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_SetPinDirection+0x130>
 36e:	22 0f       	add	r18, r18
 370:	33 1f       	adc	r19, r19
 372:	4a 95       	dec	r20
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_SetPinDirection+0x12c>
 376:	26 2b       	or	r18, r22
 378:	fc 01       	movw	r30, r24
 37a:	20 83       	st	Z, r18
 37c:	34 c0       	rjmp	.+104    	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 37e:	89 81       	ldd	r24, Y+1	; 0x01
 380:	88 31       	cpi	r24, 0x18	; 24
 382:	88 f1       	brcs	.+98     	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 384:	89 81       	ldd	r24, Y+1	; 0x01
 386:	80 32       	cpi	r24, 0x20	; 32
 388:	70 f5       	brcc	.+92     	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	88 23       	and	r24, r24
 38e:	b1 f4       	brne	.+44     	; 0x3bc <DIO_SetPinDirection+0x17a>
 390:	81 e3       	ldi	r24, 0x31	; 49
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	21 e3       	ldi	r18, 0x31	; 49
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	f9 01       	movw	r30, r18
 39a:	60 81       	ld	r22, Z
 39c:	29 81       	ldd	r18, Y+1	; 0x01
 39e:	28 51       	subi	r18, 0x18	; 24
 3a0:	42 2f       	mov	r20, r18
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_SetPinDirection+0x16c>
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	4a 95       	dec	r20
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_SetPinDirection+0x168>
 3b2:	20 95       	com	r18
 3b4:	26 23       	and	r18, r22
 3b6:	fc 01       	movw	r30, r24
 3b8:	20 83       	st	Z, r18
 3ba:	15 c0       	rjmp	.+42     	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 3bc:	81 e3       	ldi	r24, 0x31	; 49
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	21 e3       	ldi	r18, 0x31	; 49
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	f9 01       	movw	r30, r18
 3c6:	60 81       	ld	r22, Z
 3c8:	29 81       	ldd	r18, Y+1	; 0x01
 3ca:	28 51       	subi	r18, 0x18	; 24
 3cc:	42 2f       	mov	r20, r18
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	21 e0       	ldi	r18, 0x01	; 1
 3d2:	30 e0       	ldi	r19, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_SetPinDirection+0x198>
 3d6:	22 0f       	add	r18, r18
 3d8:	33 1f       	adc	r19, r19
 3da:	4a 95       	dec	r20
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_SetPinDirection+0x194>
 3de:	26 2b       	or	r18, r22
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <DIO_SetPinDirection+0x1a4>
 3e6:	00 00       	nop
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <main>:
#include "includes/BitwiseOperations.h"
#include "includes/Task.h"
#include "includes/schadular.h"

int main(void)
{
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	cd b7       	in	r28, 0x3d	; 61
 3f8:	de b7       	in	r29, 0x3e	; 62
	
    timer0_init_CTC_mode; 
    DIO_SetPinDirection(LED1,OUTPUT); /*Set DDRB5 (LED1) Output*/
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	8d e0       	ldi	r24, 0x0D	; 13
 3fe:	0e 94 21 01 	call	0x242	; 0x242 <DIO_SetPinDirection>
    DIO_SetPinDirection(LED2,OUTPUT); /*Set DDRB6 (LED2) Output*/
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	8e e0       	ldi	r24, 0x0E	; 14
 406:	0e 94 21 01 	call	0x242	; 0x242 <DIO_SetPinDirection>
    DIO_SetPinDirection(LED3,OUTPUT); /*Set DDRB7 (LED3) Output*/
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	8f e0       	ldi	r24, 0x0F	; 15
 40e:	0e 94 21 01 	call	0x242	; 0x242 <DIO_SetPinDirection>

    DIO_WritePin(LED1,LOW); /*Led is off*/
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	8d e0       	ldi	r24, 0x0D	; 13
 416:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(LED2,LOW); /*Led is off*/
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	8e e0       	ldi	r24, 0x0E	; 14
 41e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(LED3,LOW); /*Led is off*/
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	8f e0       	ldi	r24, 0x0F	; 15
 426:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	schadular_init_start();/*initialize the schadular*/
 42a:	0e 94 27 02 	call	0x44e	; 0x44e <schadular_init_start>
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	90 e0       	ldi	r25, 0x00	; 0
    
	

}
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	08 95       	ret

00000438 <SET_FLAG>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that SET FLAG BY CALL THIS FUN INSIDE ISR */
void SET_FLAG()
{
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
	FLAG =ONE ;
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>
}
 446:	00 00       	nop
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	08 95       	ret

0000044e <schadular_init_start>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that initialize the schadeular  */
void schadular_init_start()
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
	
	timer0_init_CTC_mode();/*TIMER INIT */
 456:	0e 94 20 03 	call	0x640	; 0x640 <timer0_init_CTC_mode>
	set_call_back(SET_FLAG);/*CALL BACK FUN THAT TAKES THE ADDRESS OFN SET FLAG FUN TO SET THIS FLAG EACH COMPARE */
 45a:	8c e1       	ldi	r24, 0x1C	; 28
 45c:	92 e0       	ldi	r25, 0x02	; 2
 45e:	0e 94 0d 03 	call	0x61a	; 0x61a <set_call_back>
	
	while(ONE)
	{
		if(FLAG ==ONE)/*THIS FLAG IS SET IN ISR B Y CALL BACK FUN */
 462:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	e1 f7       	brne	.-8      	; 0x462 <schadular_init_start+0x14>
		{
			 FLAG=ZERO;/*CLEAR FLAG */
 46a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
			 prefield(ptr, NUMBER_OF_TASK);/* call the prefield function for schaduling */
 46e:	63 e0       	ldi	r22, 0x03	; 3
 470:	80 e6       	ldi	r24, 0x60	; 96
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 3d 02 	call	0x47a	; 0x47a <prefield>

		}
	}	
 478:	f4 cf       	rjmp	.-24     	; 0x462 <schadular_init_start+0x14>

0000047a <prefield>:
/* I/p : array of pointer to function that void/void  and size of array*/
/* O/p : N/A */
/* Return : void */
/* Function that takes array of pointer to fun to access the task  */
void prefield(void (*ptr[])(void),uint8 size )
{/* the argument is array of pointer to function that take void/void and another argument is size of array */
 47a:	cf 93       	push	r28
 47c:	df 93       	push	r29
 47e:	00 d0       	rcall	.+0      	; 0x480 <prefield+0x6>
 480:	00 d0       	rcall	.+0      	; 0x482 <prefield+0x8>
 482:	cd b7       	in	r28, 0x3d	; 61
 484:	de b7       	in	r29, 0x3e	; 62
 486:	9b 83       	std	Y+3, r25	; 0x03
 488:	8a 83       	std	Y+2, r24	; 0x02
 48a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=ZERO ; i<NUMBER_OF_TASK ; i++)/*LOOP TO PERFORM TASK IN ONE SHOOT AS REQUIRD */
 48c:	19 82       	std	Y+1, r1	; 0x01
 48e:	11 c0       	rjmp	.+34     	; 0x4b2 <prefield+0x38>
	{
		ptr[i]();/*call the task by address from array of pointer to fun */
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	88 2f       	mov	r24, r24
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	2a 81       	ldd	r18, Y+2	; 0x02
 49c:	3b 81       	ldd	r19, Y+3	; 0x03
 49e:	82 0f       	add	r24, r18
 4a0:	93 1f       	adc	r25, r19
 4a2:	fc 01       	movw	r30, r24
 4a4:	80 81       	ld	r24, Z
 4a6:	91 81       	ldd	r25, Z+1	; 0x01
 4a8:	fc 01       	movw	r30, r24
 4aa:	09 95       	icall
/* Return : void */
/* Function that takes array of pointer to fun to access the task  */
void prefield(void (*ptr[])(void),uint8 size )
{/* the argument is array of pointer to function that take void/void and another argument is size of array */
	uint8 i;
	for(i=ZERO ; i<NUMBER_OF_TASK ; i++)/*LOOP TO PERFORM TASK IN ONE SHOOT AS REQUIRD */
 4ac:	89 81       	ldd	r24, Y+1	; 0x01
 4ae:	8f 5f       	subi	r24, 0xFF	; 255
 4b0:	89 83       	std	Y+1, r24	; 0x01
 4b2:	89 81       	ldd	r24, Y+1	; 0x01
 4b4:	83 30       	cpi	r24, 0x03	; 3
 4b6:	60 f3       	brcs	.-40     	; 0x490 <prefield+0x16>
	{
		ptr[i]();/*call the task by address from array of pointer to fun */
	}
 4b8:	00 00       	nop
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	08 95       	ret

000004c8 <GO>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that perform task1 which is GO LED1 HIGH   */
void GO(void)
{
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
	static uint16 G_TICK;
	/*each time the prefield call the three task every one 
	sec in one shoot and here i increment the G_TICK flag every time every 1 sec and when this 
	flag is equal the required time (period )thats mean its time to perform this task */
	
	G_TICK++;/*increment G_TICK */
 4d0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <G_TICK.1603>
 4d4:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <G_TICK.1603+0x1>
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <G_TICK.1603+0x1>
 4de:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <G_TICK.1603>
	if(G_TICK>=ONE_SECOUND)/*CHECK G_TICK == REQUIRD TIME EXCUTE THIS TASK */
 4e2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <G_TICK.1603>
 4e6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <G_TICK.1603+0x1>
 4ea:	88 3e       	cpi	r24, 0xE8	; 232
 4ec:	93 40       	sbci	r25, 0x03	; 3
 4ee:	80 f0       	brcs	.+32     	; 0x510 <GO+0x48>
	{
	DIO_WritePin(LED1,HIGH); /*GO State*/
 4f0:	61 e0       	ldi	r22, 0x01	; 1
 4f2:	8d e0       	ldi	r24, 0x0D	; 13
 4f4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED2,LOW);
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	8e e0       	ldi	r24, 0x0E	; 14
 4fc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED3,LOW);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	8f e0       	ldi	r24, 0x0F	; 15
 504:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	G_TICK=ZERO;/* clear the flag after executed this task */
 508:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <G_TICK.1603+0x1>
 50c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <G_TICK.1603>
	}
	
}
 510:	00 00       	nop
 512:	df 91       	pop	r29
 514:	cf 91       	pop	r28
 516:	08 95       	ret

00000518 <STOP>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that perform task1 which is STOP LED1 HIGH   */
void STOP(void)
{
 518:	cf 93       	push	r28
 51a:	df 93       	push	r29
 51c:	cd b7       	in	r28, 0x3d	; 61
 51e:	de b7       	in	r29, 0x3e	; 62
	static uint16 G_TICK;
	/*each time the prefield call the three task every one 
	sec in one shoot and here i increment the G_TICK flag every time every 1 sec and when this 
	flag is equal the required time (period )thats mean its time to perform this task */
	G_TICK++;
 520:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <G_TICK.1607>
 524:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <G_TICK.1607+0x1>
 528:	01 96       	adiw	r24, 0x01	; 1
 52a:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <G_TICK.1607+0x1>
 52e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <G_TICK.1607>
	if(G_TICK>=THREE_SECOUND)
 532:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <G_TICK.1607>
 536:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <G_TICK.1607+0x1>
 53a:	88 3b       	cpi	r24, 0xB8	; 184
 53c:	9b 40       	sbci	r25, 0x0B	; 11
 53e:	80 f0       	brcs	.+32     	; 0x560 <STOP+0x48>
	{
	DIO_WritePin(LED1,LOW); /*STOP State*/
 540:	60 e0       	ldi	r22, 0x00	; 0
 542:	8d e0       	ldi	r24, 0x0D	; 13
 544:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED2,LOW);
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	8e e0       	ldi	r24, 0x0E	; 14
 54c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(LED3,HIGH);/* clear the flag after executed this task */
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	8f e0       	ldi	r24, 0x0F	; 15
 554:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	G_TICK=ZERO;
 558:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <G_TICK.1607+0x1>
 55c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <G_TICK.1607>
	}
}
 560:	00 00       	nop
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <READY>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that perform task1 which is READY LED1 HIGH   */
void READY(void)
{
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	cd b7       	in	r28, 0x3d	; 61
 56e:	de b7       	in	r29, 0x3e	; 62
	    static uint16 G_TICK;
		/*each time the prefield call the three task every one 
	   sec in one shoot and here i increment the G_TICK flag every time every 1 sec  and when this 
	   flag is equal the required time (period )thats mean its time to perform this task */
		G_TICK++;
 570:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <G_TICK.1611>
 574:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <G_TICK.1611+0x1>
 578:	01 96       	adiw	r24, 0x01	; 1
 57a:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <G_TICK.1611+0x1>
 57e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <G_TICK.1611>
		if(G_TICK>=TWO_SECOND)
 582:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <G_TICK.1611>
 586:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <G_TICK.1611+0x1>
 58a:	80 3d       	cpi	r24, 0xD0	; 208
 58c:	97 40       	sbci	r25, 0x07	; 7
 58e:	80 f0       	brcs	.+32     	; 0x5b0 <READY+0x48>
		{
			DIO_WritePin(LED1,LOW); /*STOP State*/
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	8d e0       	ldi	r24, 0x0D	; 13
 594:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(LED2,HIGH);
 598:	61 e0       	ldi	r22, 0x01	; 1
 59a:	8e e0       	ldi	r24, 0x0E	; 14
 59c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(LED3,LOW);/* clear the flag after executed this task */
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	8f e0       	ldi	r24, 0x0F	; 15
 5a4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			G_TICK=ZERO;
 5a8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <G_TICK.1611+0x1>
 5ac:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <G_TICK.1611>
		}
}
 5b0:	00 00       	nop
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <__vector_10>:
volatile uint16 g_tick = NUMBER_ZERO;  /* FLAG FOR TIMER ZERO COMPRE INTERRUPT */
volatile uint8 STATUS =ZERO ;
void (*global_ptr)(void);
/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
 5b8:	1f 92       	push	r1
 5ba:	0f 92       	push	r0
 5bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5c0:	0f 92       	push	r0
 5c2:	11 24       	eor	r1, r1
 5c4:	2f 93       	push	r18
 5c6:	3f 93       	push	r19
 5c8:	4f 93       	push	r20
 5ca:	5f 93       	push	r21
 5cc:	6f 93       	push	r22
 5ce:	7f 93       	push	r23
 5d0:	8f 93       	push	r24
 5d2:	9f 93       	push	r25
 5d4:	af 93       	push	r26
 5d6:	bf 93       	push	r27
 5d8:	ef 93       	push	r30
 5da:	ff 93       	push	r31
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	cd b7       	in	r28, 0x3d	; 61
 5e2:	de b7       	in	r29, 0x3e	; 62
		global_ptr();
 5e4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <global_ptr>
 5e8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <global_ptr+0x1>
 5ec:	fc 01       	movw	r30, r24
 5ee:	09 95       	icall
		
}
 5f0:	00 00       	nop
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	ff 91       	pop	r31
 5f8:	ef 91       	pop	r30
 5fa:	bf 91       	pop	r27
 5fc:	af 91       	pop	r26
 5fe:	9f 91       	pop	r25
 600:	8f 91       	pop	r24
 602:	7f 91       	pop	r23
 604:	6f 91       	pop	r22
 606:	5f 91       	pop	r21
 608:	4f 91       	pop	r20
 60a:	3f 91       	pop	r19
 60c:	2f 91       	pop	r18
 60e:	0f 90       	pop	r0
 610:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <set_call_back>:
/* I/p : pointer to function that void/void */
/* O/p : N/A */
/* Return : void */
/* Function that takes pointer to fun to use it inside ISR */
void set_call_back(void (*gptr)(void))
{
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	00 d0       	rcall	.+0      	; 0x620 <set_call_back+0x6>
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
 624:	9a 83       	std	Y+2, r25	; 0x02
 626:	89 83       	std	Y+1, r24	; 0x01
	global_ptr=gptr;
 628:	89 81       	ldd	r24, Y+1	; 0x01
 62a:	9a 81       	ldd	r25, Y+2	; 0x02
 62c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <global_ptr+0x1>
 630:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <global_ptr>
}
 634:	00 00       	nop
 636:	0f 90       	pop	r0
 638:	0f 90       	pop	r0
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <timer0_init_CTC_mode>:
/* I/p : N/A */
/* O/p : N/A */
/* Return : void */
/* Function that initialize timer zero */
void timer0_init_CTC_mode(void)
{
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	cd b7       	in	r28, 0x3d	; 61
 646:	de b7       	in	r29, 0x3e	; 62
	TCNT0=NUMBER_ZERO;/*timer register zero TCNT0 start from zero */
 648:	82 e5       	ldi	r24, 0x52	; 82
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	fc 01       	movw	r30, r24
 64e:	10 82       	st	Z, r1
	OCR0=OCR0_VALUE_REGISTER;/*compare register value */
 650:	8c e5       	ldi	r24, 0x5C	; 92
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	2c e7       	ldi	r18, 0x7C	; 124
 656:	fc 01       	movw	r30, r24
 658:	20 83       	st	Z, r18
	TIMSK|=(NUMBER_ONE<<OCIE0);/*interrupt enable module for compare mode in timer */
 65a:	89 e5       	ldi	r24, 0x59	; 89
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	29 e5       	ldi	r18, 0x59	; 89
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	f9 01       	movw	r30, r18
 664:	20 81       	ld	r18, Z
 666:	22 60       	ori	r18, 0x02	; 2
 668:	fc 01       	movw	r30, r24
 66a:	20 83       	st	Z, r18
	TCCR0|= (NUMBER_ONE<<WGM01) | (NUMBER_ONE<<CS01) | (NUMBER_ONE<<CS00);
 66c:	83 e5       	ldi	r24, 0x53	; 83
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	23 e5       	ldi	r18, 0x53	; 83
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	f9 01       	movw	r30, r18
 676:	20 81       	ld	r18, Z
 678:	2b 60       	ori	r18, 0x0B	; 11
 67a:	fc 01       	movw	r30, r24
 67c:	20 83       	st	Z, r18
    Set_Bit(SREG,IBIT);/*enabel global interrupt bit 7 */
 67e:	8f e5       	ldi	r24, 0x5F	; 95
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	2f e5       	ldi	r18, 0x5F	; 95
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	f9 01       	movw	r30, r18
 688:	20 81       	ld	r18, Z
 68a:	20 68       	ori	r18, 0x80	; 128
 68c:	fc 01       	movw	r30, r24
 68e:	20 83       	st	Z, r18
}
 690:	00 00       	nop
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	08 95       	ret

00000698 <_exit>:
 698:	f8 94       	cli

0000069a <__stop_program>:
 69a:	ff cf       	rjmp	.-2      	; 0x69a <__stop_program>
