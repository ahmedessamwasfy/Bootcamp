
sevseg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097e  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ba  00000000  00000000  00000db2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000047b  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000018e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000424  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000039e  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002156  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 01 	call	0x284	; 0x284 <main>
  64:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <BCDSevegments_enable>:
#include "sevseg.h"

void BCDSevegments_enable(uint8 SevenSegment_Number)
{
	DIO_WritePin(SevenSegment_Number,high);
  6c:	61 e0       	ldi	r22, 0x01	; 1
  6e:	0e 94 40 00 	call	0x80	; 0x80 <DIO_WritePin>
  72:	08 95       	ret

00000074 <BCDSevegments_disable>:
}

void BCDSevegments_disable (uint8 SevenSegment_Number)
{
		DIO_WritePin(SevenSegment_Number,low);
  74:	60 e0       	ldi	r22, 0x00	; 0
  76:	0e 94 40 00 	call	0x80	; 0x80 <DIO_WritePin>
  7a:	08 95       	ret

0000007c <BCDSevegments_displayNo>:
		
	}
}*/
void BCDSevegments_displayNo (uint8 Display_Number){
	
	PORTB=Display_Number;
  7c:	88 bb       	out	0x18, r24	; 24
  7e:	08 95       	ret

00000080 <DIO_WritePin>:
	}
	else{
		
	}
	
}
  80:	88 30       	cpi	r24, 0x08	; 8
  82:	e8 f4       	brcc	.+58     	; 0xbe <DIO_WritePin+0x3e>
  84:	61 11       	cpse	r22, r1
  86:	0e c0       	rjmp	.+28     	; 0xa4 <DIO_WritePin+0x24>
  88:	4b b3       	in	r20, 0x1b	; 27
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	b9 01       	movw	r22, r18
  90:	02 c0       	rjmp	.+4      	; 0x96 <DIO_WritePin+0x16>
  92:	66 0f       	add	r22, r22
  94:	77 1f       	adc	r23, r23
  96:	8a 95       	dec	r24
  98:	e2 f7       	brpl	.-8      	; 0x92 <DIO_WritePin+0x12>
  9a:	cb 01       	movw	r24, r22
  9c:	80 95       	com	r24
  9e:	84 23       	and	r24, r20
  a0:	8b bb       	out	0x1b, r24	; 27
  a2:	08 95       	ret
  a4:	4b b3       	in	r20, 0x1b	; 27
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	b9 01       	movw	r22, r18
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_WritePin+0x32>
  ae:	66 0f       	add	r22, r22
  b0:	77 1f       	adc	r23, r23
  b2:	8a 95       	dec	r24
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_WritePin+0x2e>
  b6:	cb 01       	movw	r24, r22
  b8:	84 2b       	or	r24, r20
  ba:	8b bb       	out	0x1b, r24	; 27
  bc:	08 95       	ret
  be:	98 ef       	ldi	r25, 0xF8	; 248
  c0:	98 0f       	add	r25, r24
  c2:	98 30       	cpi	r25, 0x08	; 8
  c4:	e8 f4       	brcc	.+58     	; 0x100 <DIO_WritePin+0x80>
  c6:	61 11       	cpse	r22, r1
  c8:	0e c0       	rjmp	.+28     	; 0xe6 <DIO_WritePin+0x66>
  ca:	48 b3       	in	r20, 0x18	; 24
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	b9 01       	movw	r22, r18
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_WritePin+0x58>
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	9a 95       	dec	r25
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_WritePin+0x54>
  dc:	cb 01       	movw	r24, r22
  de:	80 95       	com	r24
  e0:	84 23       	and	r24, r20
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	08 95       	ret
  e6:	48 b3       	in	r20, 0x18	; 24
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_WritePin+0x74>
  f0:	66 0f       	add	r22, r22
  f2:	77 1f       	adc	r23, r23
  f4:	9a 95       	dec	r25
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_WritePin+0x70>
  f8:	cb 01       	movw	r24, r22
  fa:	84 2b       	or	r24, r20
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	08 95       	ret
 100:	90 ef       	ldi	r25, 0xF0	; 240
 102:	98 0f       	add	r25, r24
 104:	98 30       	cpi	r25, 0x08	; 8
 106:	e8 f4       	brcc	.+58     	; 0x142 <DIO_WritePin+0xc2>
 108:	61 11       	cpse	r22, r1
 10a:	0e c0       	rjmp	.+28     	; 0x128 <DIO_WritePin+0xa8>
 10c:	45 b3       	in	r20, 0x15	; 21
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	b9 01       	movw	r22, r18
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_WritePin+0x9a>
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	9a 95       	dec	r25
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_WritePin+0x96>
 11e:	cb 01       	movw	r24, r22
 120:	80 95       	com	r24
 122:	84 23       	and	r24, r20
 124:	85 bb       	out	0x15, r24	; 21
 126:	08 95       	ret
 128:	45 b3       	in	r20, 0x15	; 21
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	b9 01       	movw	r22, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_WritePin+0xb6>
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	9a 95       	dec	r25
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_WritePin+0xb2>
 13a:	cb 01       	movw	r24, r22
 13c:	84 2b       	or	r24, r20
 13e:	85 bb       	out	0x15, r24	; 21
 140:	08 95       	ret
 142:	88 51       	subi	r24, 0x18	; 24
 144:	88 30       	cpi	r24, 0x08	; 8
 146:	e0 f4       	brcc	.+56     	; 0x180 <DIO_WritePin+0x100>
 148:	61 11       	cpse	r22, r1
 14a:	0e c0       	rjmp	.+28     	; 0x168 <DIO_WritePin+0xe8>
 14c:	42 b3       	in	r20, 0x12	; 18
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	b9 01       	movw	r22, r18
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_WritePin+0xda>
 156:	66 0f       	add	r22, r22
 158:	77 1f       	adc	r23, r23
 15a:	8a 95       	dec	r24
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_WritePin+0xd6>
 15e:	cb 01       	movw	r24, r22
 160:	80 95       	com	r24
 162:	84 23       	and	r24, r20
 164:	82 bb       	out	0x12, r24	; 18
 166:	08 95       	ret
 168:	42 b3       	in	r20, 0x12	; 18
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	30 e0       	ldi	r19, 0x00	; 0
 16e:	b9 01       	movw	r22, r18
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_WritePin+0xf6>
 172:	66 0f       	add	r22, r22
 174:	77 1f       	adc	r23, r23
 176:	8a 95       	dec	r24
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_WritePin+0xf2>
 17a:	cb 01       	movw	r24, r22
 17c:	84 2b       	or	r24, r20
 17e:	82 bb       	out	0x12, r24	; 18
 180:	08 95       	ret

00000182 <DIO_SetPinDirection>:

void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	
	if( (PinNum >= 0U) && (PinNum <= 7U) ){
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	e8 f4       	brcc	.+58     	; 0x1c0 <DIO_SetPinDirection+0x3e>
		if(PinDirection == 0U){
 186:	61 11       	cpse	r22, r1
 188:	0e c0       	rjmp	.+28     	; 0x1a6 <DIO_SetPinDirection+0x24>
			Clear_Bit(DDRA,PinNum);
 18a:	4a b3       	in	r20, 0x1a	; 26
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_SetPinDirection+0x16>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_SetPinDirection+0x12>
 19c:	cb 01       	movw	r24, r22
 19e:	80 95       	com	r24
 1a0:	84 23       	and	r24, r20
 1a2:	8a bb       	out	0x1a, r24	; 26
 1a4:	08 95       	ret
		}
		else{
			Set_Bit(DDRA,PinNum);
 1a6:	4a b3       	in	r20, 0x1a	; 26
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SetPinDirection+0x32>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SetPinDirection+0x2e>
 1b8:	cb 01       	movw	r24, r22
 1ba:	84 2b       	or	r24, r20
 1bc:	8a bb       	out	0x1a, r24	; 26
 1be:	08 95       	ret
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
 1c0:	98 ef       	ldi	r25, 0xF8	; 248
 1c2:	98 0f       	add	r25, r24
 1c4:	98 30       	cpi	r25, 0x08	; 8
 1c6:	e8 f4       	brcc	.+58     	; 0x202 <DIO_SetPinDirection+0x80>
		if(PinDirection == 0U){
 1c8:	61 11       	cpse	r22, r1
 1ca:	0e c0       	rjmp	.+28     	; 0x1e8 <DIO_SetPinDirection+0x66>
			Clear_Bit(DDRB,PinNum-8U);
 1cc:	47 b3       	in	r20, 0x17	; 23
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_SetPinDirection+0x58>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	9a 95       	dec	r25
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_SetPinDirection+0x54>
 1de:	cb 01       	movw	r24, r22
 1e0:	80 95       	com	r24
 1e2:	84 23       	and	r24, r20
 1e4:	87 bb       	out	0x17, r24	; 23
 1e6:	08 95       	ret
		}
		else{
			Set_Bit(DDRB,PinNum-8U);
 1e8:	47 b3       	in	r20, 0x17	; 23
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_SetPinDirection+0x74>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	9a 95       	dec	r25
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_SetPinDirection+0x70>
 1fa:	cb 01       	movw	r24, r22
 1fc:	84 2b       	or	r24, r20
 1fe:	87 bb       	out	0x17, r24	; 23
 200:	08 95       	ret
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
 202:	90 ef       	ldi	r25, 0xF0	; 240
 204:	98 0f       	add	r25, r24
 206:	98 30       	cpi	r25, 0x08	; 8
 208:	e8 f4       	brcc	.+58     	; 0x244 <DIO_SetPinDirection+0xc2>
		if(PinDirection == 0U){
 20a:	61 11       	cpse	r22, r1
 20c:	0e c0       	rjmp	.+28     	; 0x22a <DIO_SetPinDirection+0xa8>
			Clear_Bit(DDRC,PinNum-16);
 20e:	44 b3       	in	r20, 0x14	; 20
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_SetPinDirection+0x9a>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	9a 95       	dec	r25
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_SetPinDirection+0x96>
 220:	cb 01       	movw	r24, r22
 222:	80 95       	com	r24
 224:	84 23       	and	r24, r20
 226:	84 bb       	out	0x14, r24	; 20
 228:	08 95       	ret
		}
		else{
			Set_Bit(DDRC,PinNum-16);
 22a:	44 b3       	in	r20, 0x14	; 20
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinDirection+0xb6>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	9a 95       	dec	r25
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinDirection+0xb2>
 23c:	cb 01       	movw	r24, r22
 23e:	84 2b       	or	r24, r20
 240:	84 bb       	out	0x14, r24	; 20
 242:	08 95       	ret
		}
	}
	else if( (PinNum >= 24U) && (PinNum <= 31U) ){
 244:	88 51       	subi	r24, 0x18	; 24
 246:	88 30       	cpi	r24, 0x08	; 8
 248:	e0 f4       	brcc	.+56     	; 0x282 <DIO_SetPinDirection+0x100>
		if(PinDirection == 0U){
 24a:	61 11       	cpse	r22, r1
 24c:	0e c0       	rjmp	.+28     	; 0x26a <DIO_SetPinDirection+0xe8>
			Clear_Bit(DDRD,PinNum-24);
 24e:	41 b3       	in	r20, 0x11	; 17
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	b9 01       	movw	r22, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_SetPinDirection+0xda>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	8a 95       	dec	r24
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_SetPinDirection+0xd6>
 260:	cb 01       	movw	r24, r22
 262:	80 95       	com	r24
 264:	84 23       	and	r24, r20
 266:	81 bb       	out	0x11, r24	; 17
 268:	08 95       	ret
		}
		else{
			Set_Bit(DDRD,PinNum-24);
 26a:	41 b3       	in	r20, 0x11	; 17
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	b9 01       	movw	r22, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_SetPinDirection+0xf6>
 274:	66 0f       	add	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_SetPinDirection+0xf2>
 27c:	cb 01       	movw	r24, r22
 27e:	84 2b       	or	r24, r20
 280:	81 bb       	out	0x11, r24	; 17
 282:	08 95       	ret

00000284 <main>:
#include <util/delay.h>


int main()
{
	DIO_SetPinDirection(DATA_PINA,output);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	88 e0       	ldi	r24, 0x08	; 8
 288:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_SetPinDirection>
	DIO_SetPinDirection(DATA_PINB,output);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	89 e0       	ldi	r24, 0x09	; 9
 290:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_SetPinDirection>
	DIO_SetPinDirection(DATA_PINC,output);
 294:	61 e0       	ldi	r22, 0x01	; 1
 296:	8a e0       	ldi	r24, 0x0A	; 10
 298:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_SetPinDirection>
	DIO_SetPinDirection(DATA_PIND,output);
 29c:	61 e0       	ldi	r22, 0x01	; 1
 29e:	8b e0       	ldi	r24, 0x0B	; 11
 2a0:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_SetPinDirection>
	
	DIO_SetPinDirection(enable_pin_7seg_1,output);
 2a4:	61 e0       	ldi	r22, 0x01	; 1
 2a6:	8a e1       	ldi	r24, 0x1A	; 26
 2a8:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_SetPinDirection>
	DIO_SetPinDirection(enable_pin_7seg_2,output);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	8b e1       	ldi	r24, 0x1B	; 27
 2b0:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_SetPinDirection>
	DIO_SetPinDirection(enable_pin_7seg_3,output);
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	8e e1       	ldi	r24, 0x1E	; 30
 2b8:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_SetPinDirection>
	DIO_SetPinDirection(enable_pin_7seg_4,output);
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	8f e1       	ldi	r24, 0x1F	; 31
 2c0:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_SetPinDirection>
	
	while(1)
	{
		BCDSevegments_enable(enable_pin_7seg_2);
 2c4:	8b e1       	ldi	r24, 0x1B	; 27
 2c6:	0e 94 36 00 	call	0x6c	; 0x6c <BCDSevegments_enable>
		BCDSevegments_disable(enable_pin_7seg_3);
 2ca:	8e e1       	ldi	r24, 0x1E	; 30
 2cc:	0e 94 3a 00 	call	0x74	; 0x74 <BCDSevegments_disable>
		BCDSevegments_disable(enable_pin_7seg_1);
 2d0:	8a e1       	ldi	r24, 0x1A	; 26
 2d2:	0e 94 3a 00 	call	0x74	; 0x74 <BCDSevegments_disable>
		BCDSevegments_disable(enable_pin_7seg_4);
 2d6:	8f e1       	ldi	r24, 0x1F	; 31
 2d8:	0e 94 3a 00 	call	0x74	; 0x74 <BCDSevegments_disable>
		BCDSevegments_displayNo(8);
 2dc:	88 e0       	ldi	r24, 0x08	; 8
 2de:	0e 94 3e 00 	call	0x7c	; 0x7c <BCDSevegments_displayNo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e2:	81 ee       	ldi	r24, 0xE1	; 225
 2e4:	94 e0       	ldi	r25, 0x04	; 4
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <main+0x62>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x68>
 2ec:	00 00       	nop
 2ee:	ea cf       	rjmp	.-44     	; 0x2c4 <main+0x40>

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
