
User_Story_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000628  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  0000069c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007ef  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000625  00000000  00000000  00000f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005d8  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  00001b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000412  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000267  00000000  00000000  000020ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002351  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 ce 02 	jmp	0x59c	; 0x59c <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 ae 02 	jmp	0x55c	; 0x55c <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 ee 01 	call	0x3dc	; 0x3dc <main>
  74:	0c 94 12 03 	jmp	0x624	; 0x624 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
	}
	else{
		
	}
	
}
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_WritePin+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	6a 83       	std	Y+2, r22	; 0x02
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	88 30       	cpi	r24, 0x08	; 8
  8e:	60 f5       	brcc	.+88     	; 0xe8 <DIO_WritePin+0x6c>
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 23       	and	r24, r24
  94:	a9 f4       	brne	.+42     	; 0xc0 <DIO_WritePin+0x44>
  96:	8b e3       	ldi	r24, 0x3B	; 59
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	2b e3       	ldi	r18, 0x3B	; 59
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	f9 01       	movw	r30, r18
  a0:	60 81       	ld	r22, Z
  a2:	29 81       	ldd	r18, Y+1	; 0x01
  a4:	42 2f       	mov	r20, r18
  a6:	50 e0       	ldi	r21, 0x00	; 0
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <DIO_WritePin+0x36>
  ae:	22 0f       	add	r18, r18
  b0:	33 1f       	adc	r19, r19
  b2:	4a 95       	dec	r20
  b4:	e2 f7       	brpl	.-8      	; 0xae <DIO_WritePin+0x32>
  b6:	20 95       	com	r18
  b8:	26 23       	and	r18, r22
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
  be:	b0 c0       	rjmp	.+352    	; 0x220 <DIO_WritePin+0x1a4>
  c0:	8b e3       	ldi	r24, 0x3B	; 59
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2b e3       	ldi	r18, 0x3B	; 59
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	60 81       	ld	r22, Z
  cc:	29 81       	ldd	r18, Y+1	; 0x01
  ce:	42 2f       	mov	r20, r18
  d0:	50 e0       	ldi	r21, 0x00	; 0
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_WritePin+0x60>
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	4a 95       	dec	r20
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_WritePin+0x5c>
  e0:	26 2b       	or	r18, r22
  e2:	fc 01       	movw	r30, r24
  e4:	20 83       	st	Z, r18
  e6:	9c c0       	rjmp	.+312    	; 0x220 <DIO_WritePin+0x1a4>
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	88 30       	cpi	r24, 0x08	; 8
  ec:	88 f1       	brcs	.+98     	; 0x150 <DIO_WritePin+0xd4>
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	80 31       	cpi	r24, 0x10	; 16
  f2:	70 f5       	brcc	.+92     	; 0x150 <DIO_WritePin+0xd4>
  f4:	8a 81       	ldd	r24, Y+2	; 0x02
  f6:	88 23       	and	r24, r24
  f8:	b1 f4       	brne	.+44     	; 0x126 <DIO_WritePin+0xaa>
  fa:	88 e3       	ldi	r24, 0x38	; 56
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	28 e3       	ldi	r18, 0x38	; 56
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	60 81       	ld	r22, Z
 106:	29 81       	ldd	r18, Y+1	; 0x01
 108:	28 50       	subi	r18, 0x08	; 8
 10a:	42 2f       	mov	r20, r18
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	21 e0       	ldi	r18, 0x01	; 1
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_WritePin+0x9c>
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	4a 95       	dec	r20
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_WritePin+0x98>
 11c:	20 95       	com	r18
 11e:	26 23       	and	r18, r22
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
 124:	7d c0       	rjmp	.+250    	; 0x220 <DIO_WritePin+0x1a4>
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	28 e3       	ldi	r18, 0x38	; 56
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	f9 01       	movw	r30, r18
 130:	60 81       	ld	r22, Z
 132:	29 81       	ldd	r18, Y+1	; 0x01
 134:	28 50       	subi	r18, 0x08	; 8
 136:	42 2f       	mov	r20, r18
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_WritePin+0xc8>
 140:	22 0f       	add	r18, r18
 142:	33 1f       	adc	r19, r19
 144:	4a 95       	dec	r20
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_WritePin+0xc4>
 148:	26 2b       	or	r18, r22
 14a:	fc 01       	movw	r30, r24
 14c:	20 83       	st	Z, r18
 14e:	68 c0       	rjmp	.+208    	; 0x220 <DIO_WritePin+0x1a4>
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	80 31       	cpi	r24, 0x10	; 16
 154:	88 f1       	brcs	.+98     	; 0x1b8 <DIO_WritePin+0x13c>
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	88 31       	cpi	r24, 0x18	; 24
 15a:	70 f5       	brcc	.+92     	; 0x1b8 <DIO_WritePin+0x13c>
 15c:	8a 81       	ldd	r24, Y+2	; 0x02
 15e:	88 23       	and	r24, r24
 160:	b1 f4       	brne	.+44     	; 0x18e <DIO_WritePin+0x112>
 162:	85 e3       	ldi	r24, 0x35	; 53
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	25 e3       	ldi	r18, 0x35	; 53
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	60 81       	ld	r22, Z
 16e:	29 81       	ldd	r18, Y+1	; 0x01
 170:	20 51       	subi	r18, 0x10	; 16
 172:	42 2f       	mov	r20, r18
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_WritePin+0x104>
 17c:	22 0f       	add	r18, r18
 17e:	33 1f       	adc	r19, r19
 180:	4a 95       	dec	r20
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_WritePin+0x100>
 184:	20 95       	com	r18
 186:	26 23       	and	r18, r22
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
 18c:	49 c0       	rjmp	.+146    	; 0x220 <DIO_WritePin+0x1a4>
 18e:	85 e3       	ldi	r24, 0x35	; 53
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	25 e3       	ldi	r18, 0x35	; 53
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	60 81       	ld	r22, Z
 19a:	29 81       	ldd	r18, Y+1	; 0x01
 19c:	20 51       	subi	r18, 0x10	; 16
 19e:	42 2f       	mov	r20, r18
 1a0:	50 e0       	ldi	r21, 0x00	; 0
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_WritePin+0x130>
 1a8:	22 0f       	add	r18, r18
 1aa:	33 1f       	adc	r19, r19
 1ac:	4a 95       	dec	r20
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_WritePin+0x12c>
 1b0:	26 2b       	or	r18, r22
 1b2:	fc 01       	movw	r30, r24
 1b4:	20 83       	st	Z, r18
 1b6:	34 c0       	rjmp	.+104    	; 0x220 <DIO_WritePin+0x1a4>
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	88 31       	cpi	r24, 0x18	; 24
 1bc:	88 f1       	brcs	.+98     	; 0x220 <DIO_WritePin+0x1a4>
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	80 32       	cpi	r24, 0x20	; 32
 1c2:	70 f5       	brcc	.+92     	; 0x220 <DIO_WritePin+0x1a4>
 1c4:	8a 81       	ldd	r24, Y+2	; 0x02
 1c6:	88 23       	and	r24, r24
 1c8:	b1 f4       	brne	.+44     	; 0x1f6 <DIO_WritePin+0x17a>
 1ca:	82 e3       	ldi	r24, 0x32	; 50
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	22 e3       	ldi	r18, 0x32	; 50
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	f9 01       	movw	r30, r18
 1d4:	60 81       	ld	r22, Z
 1d6:	29 81       	ldd	r18, Y+1	; 0x01
 1d8:	28 51       	subi	r18, 0x18	; 24
 1da:	42 2f       	mov	r20, r18
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	21 e0       	ldi	r18, 0x01	; 1
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_WritePin+0x16c>
 1e4:	22 0f       	add	r18, r18
 1e6:	33 1f       	adc	r19, r19
 1e8:	4a 95       	dec	r20
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_WritePin+0x168>
 1ec:	20 95       	com	r18
 1ee:	26 23       	and	r18, r22
 1f0:	fc 01       	movw	r30, r24
 1f2:	20 83       	st	Z, r18
 1f4:	15 c0       	rjmp	.+42     	; 0x220 <DIO_WritePin+0x1a4>
 1f6:	82 e3       	ldi	r24, 0x32	; 50
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	22 e3       	ldi	r18, 0x32	; 50
 1fc:	30 e0       	ldi	r19, 0x00	; 0
 1fe:	f9 01       	movw	r30, r18
 200:	60 81       	ld	r22, Z
 202:	29 81       	ldd	r18, Y+1	; 0x01
 204:	28 51       	subi	r18, 0x18	; 24
 206:	42 2f       	mov	r20, r18
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_WritePin+0x198>
 210:	22 0f       	add	r18, r18
 212:	33 1f       	adc	r19, r19
 214:	4a 95       	dec	r20
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_WritePin+0x194>
 218:	26 2b       	or	r18, r22
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18
 21e:	00 c0       	rjmp	.+0      	; 0x220 <DIO_WritePin+0x1a4>
 220:	00 00       	nop
 222:	0f 90       	pop	r0
 224:	0f 90       	pop	r0
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	00 d0       	rcall	.+0      	; 0x232 <DIO_SetPinDirection+0x6>
 232:	cd b7       	in	r28, 0x3d	; 61
 234:	de b7       	in	r29, 0x3e	; 62
 236:	89 83       	std	Y+1, r24	; 0x01
 238:	6a 83       	std	Y+2, r22	; 0x02
	
	if( (PinNum >= 0U) && (PinNum <= 7U) ){
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	88 30       	cpi	r24, 0x08	; 8
 23e:	60 f5       	brcc	.+88     	; 0x298 <DIO_SetPinDirection+0x6c>
		if(PinDirection == 0U){
 240:	8a 81       	ldd	r24, Y+2	; 0x02
 242:	88 23       	and	r24, r24
 244:	a9 f4       	brne	.+42     	; 0x270 <DIO_SetPinDirection+0x44>
			Clear_Bit(DDRA,PinNum);
 246:	8a e3       	ldi	r24, 0x3A	; 58
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2a e3       	ldi	r18, 0x3A	; 58
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	60 81       	ld	r22, Z
 252:	29 81       	ldd	r18, Y+1	; 0x01
 254:	42 2f       	mov	r20, r18
 256:	50 e0       	ldi	r21, 0x00	; 0
 258:	21 e0       	ldi	r18, 0x01	; 1
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_SetPinDirection+0x36>
 25e:	22 0f       	add	r18, r18
 260:	33 1f       	adc	r19, r19
 262:	4a 95       	dec	r20
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_SetPinDirection+0x32>
 266:	20 95       	com	r18
 268:	26 23       	and	r18, r22
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
 26e:	b0 c0       	rjmp	.+352    	; 0x3d0 <DIO_SetPinDirection+0x1a4>
	if( (PinNum >= 0U) && (PinNum <= 7U) ){
		if(PinDirection == 0U){
			Clear_Bit(DDRA,PinNum);
		}
		else{
			Set_Bit(DDRA,PinNum);
 270:	8a e3       	ldi	r24, 0x3A	; 58
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	2a e3       	ldi	r18, 0x3A	; 58
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	f9 01       	movw	r30, r18
 27a:	60 81       	ld	r22, Z
 27c:	29 81       	ldd	r18, Y+1	; 0x01
 27e:	42 2f       	mov	r20, r18
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_SetPinDirection+0x60>
 288:	22 0f       	add	r18, r18
 28a:	33 1f       	adc	r19, r19
 28c:	4a 95       	dec	r20
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_SetPinDirection+0x5c>
 290:	26 2b       	or	r18, r22
 292:	fc 01       	movw	r30, r24
 294:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
 296:	9c c0       	rjmp	.+312    	; 0x3d0 <DIO_SetPinDirection+0x1a4>
		}
		else{
			Set_Bit(DDRA,PinNum);
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	88 30       	cpi	r24, 0x08	; 8
 29c:	88 f1       	brcs	.+98     	; 0x300 <DIO_SetPinDirection+0xd4>
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	80 31       	cpi	r24, 0x10	; 16
 2a2:	70 f5       	brcc	.+92     	; 0x300 <DIO_SetPinDirection+0xd4>
		if(PinDirection == 0U){
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	88 23       	and	r24, r24
 2a8:	b1 f4       	brne	.+44     	; 0x2d6 <DIO_SetPinDirection+0xaa>
			Clear_Bit(DDRB,PinNum-8U);
 2aa:	87 e3       	ldi	r24, 0x37	; 55
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	27 e3       	ldi	r18, 0x37	; 55
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	f9 01       	movw	r30, r18
 2b4:	60 81       	ld	r22, Z
 2b6:	29 81       	ldd	r18, Y+1	; 0x01
 2b8:	28 50       	subi	r18, 0x08	; 8
 2ba:	42 2f       	mov	r20, r18
 2bc:	50 e0       	ldi	r21, 0x00	; 0
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_SetPinDirection+0x9c>
 2c4:	22 0f       	add	r18, r18
 2c6:	33 1f       	adc	r19, r19
 2c8:	4a 95       	dec	r20
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_SetPinDirection+0x98>
 2cc:	20 95       	com	r18
 2ce:	26 23       	and	r18, r22
 2d0:	fc 01       	movw	r30, r24
 2d2:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRA,PinNum);
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
		if(PinDirection == 0U){
 2d4:	7d c0       	rjmp	.+250    	; 0x3d0 <DIO_SetPinDirection+0x1a4>
			Clear_Bit(DDRB,PinNum-8U);
		}
		else{
			Set_Bit(DDRB,PinNum-8U);
 2d6:	87 e3       	ldi	r24, 0x37	; 55
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	27 e3       	ldi	r18, 0x37	; 55
 2dc:	30 e0       	ldi	r19, 0x00	; 0
 2de:	f9 01       	movw	r30, r18
 2e0:	60 81       	ld	r22, Z
 2e2:	29 81       	ldd	r18, Y+1	; 0x01
 2e4:	28 50       	subi	r18, 0x08	; 8
 2e6:	42 2f       	mov	r20, r18
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	21 e0       	ldi	r18, 0x01	; 1
 2ec:	30 e0       	ldi	r19, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DIO_SetPinDirection+0xc8>
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	4a 95       	dec	r20
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <DIO_SetPinDirection+0xc4>
 2f8:	26 2b       	or	r18, r22
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRA,PinNum);
		}
	}
	else if( (PinNum >= 8U) && (PinNum <= 15U) ){
		if(PinDirection == 0U){
 2fe:	68 c0       	rjmp	.+208    	; 0x3d0 <DIO_SetPinDirection+0x1a4>
		}
		else{
			Set_Bit(DDRB,PinNum-8U);
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	80 31       	cpi	r24, 0x10	; 16
 304:	88 f1       	brcs	.+98     	; 0x368 <DIO_SetPinDirection+0x13c>
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	88 31       	cpi	r24, 0x18	; 24
 30a:	70 f5       	brcc	.+92     	; 0x368 <DIO_SetPinDirection+0x13c>
		if(PinDirection == 0U){
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	88 23       	and	r24, r24
 310:	b1 f4       	brne	.+44     	; 0x33e <DIO_SetPinDirection+0x112>
			Clear_Bit(DDRC,PinNum-16);
 312:	84 e3       	ldi	r24, 0x34	; 52
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	24 e3       	ldi	r18, 0x34	; 52
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	f9 01       	movw	r30, r18
 31c:	60 81       	ld	r22, Z
 31e:	29 81       	ldd	r18, Y+1	; 0x01
 320:	20 51       	subi	r18, 0x10	; 16
 322:	42 2f       	mov	r20, r18
 324:	50 e0       	ldi	r21, 0x00	; 0
 326:	21 e0       	ldi	r18, 0x01	; 1
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_SetPinDirection+0x104>
 32c:	22 0f       	add	r18, r18
 32e:	33 1f       	adc	r19, r19
 330:	4a 95       	dec	r20
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_SetPinDirection+0x100>
 334:	20 95       	com	r18
 336:	26 23       	and	r18, r22
 338:	fc 01       	movw	r30, r24
 33a:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRB,PinNum-8U);
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
		if(PinDirection == 0U){
 33c:	49 c0       	rjmp	.+146    	; 0x3d0 <DIO_SetPinDirection+0x1a4>
			Clear_Bit(DDRC,PinNum-16);
		}
		else{
			Set_Bit(DDRC,PinNum-16);
 33e:	84 e3       	ldi	r24, 0x34	; 52
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	24 e3       	ldi	r18, 0x34	; 52
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	f9 01       	movw	r30, r18
 348:	60 81       	ld	r22, Z
 34a:	29 81       	ldd	r18, Y+1	; 0x01
 34c:	20 51       	subi	r18, 0x10	; 16
 34e:	42 2f       	mov	r20, r18
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	21 e0       	ldi	r18, 0x01	; 1
 354:	30 e0       	ldi	r19, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_SetPinDirection+0x130>
 358:	22 0f       	add	r18, r18
 35a:	33 1f       	adc	r19, r19
 35c:	4a 95       	dec	r20
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_SetPinDirection+0x12c>
 360:	26 2b       	or	r18, r22
 362:	fc 01       	movw	r30, r24
 364:	20 83       	st	Z, r18
		else{
			Set_Bit(DDRB,PinNum-8U);
		}
	}
	else if( (PinNum >= 16U) && (PinNum <= 23U) ){
		if(PinDirection == 0U){
 366:	34 c0       	rjmp	.+104    	; 0x3d0 <DIO_SetPinDirection+0x1a4>
		}
		else{
			Set_Bit(DDRC,PinNum-16);
		}
	}
	else if( (PinNum >= 24U) && (PinNum <= 31U) ){
 368:	89 81       	ldd	r24, Y+1	; 0x01
 36a:	88 31       	cpi	r24, 0x18	; 24
 36c:	88 f1       	brcs	.+98     	; 0x3d0 <DIO_SetPinDirection+0x1a4>
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	80 32       	cpi	r24, 0x20	; 32
 372:	70 f5       	brcc	.+92     	; 0x3d0 <DIO_SetPinDirection+0x1a4>
		if(PinDirection == 0U){
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	88 23       	and	r24, r24
 378:	b1 f4       	brne	.+44     	; 0x3a6 <DIO_SetPinDirection+0x17a>
			Clear_Bit(DDRD,PinNum-24);
 37a:	81 e3       	ldi	r24, 0x31	; 49
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	21 e3       	ldi	r18, 0x31	; 49
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	f9 01       	movw	r30, r18
 384:	60 81       	ld	r22, Z
 386:	29 81       	ldd	r18, Y+1	; 0x01
 388:	28 51       	subi	r18, 0x18	; 24
 38a:	42 2f       	mov	r20, r18
 38c:	50 e0       	ldi	r21, 0x00	; 0
 38e:	21 e0       	ldi	r18, 0x01	; 1
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	02 c0       	rjmp	.+4      	; 0x398 <DIO_SetPinDirection+0x16c>
 394:	22 0f       	add	r18, r18
 396:	33 1f       	adc	r19, r19
 398:	4a 95       	dec	r20
 39a:	e2 f7       	brpl	.-8      	; 0x394 <DIO_SetPinDirection+0x168>
 39c:	20 95       	com	r18
 39e:	26 23       	and	r18, r22
 3a0:	fc 01       	movw	r30, r24
 3a2:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
 3a4:	15 c0       	rjmp	.+42     	; 0x3d0 <DIO_SetPinDirection+0x1a4>
	else if( (PinNum >= 24U) && (PinNum <= 31U) ){
		if(PinDirection == 0U){
			Clear_Bit(DDRD,PinNum-24);
		}
		else{
			Set_Bit(DDRD,PinNum-24);
 3a6:	81 e3       	ldi	r24, 0x31	; 49
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	21 e3       	ldi	r18, 0x31	; 49
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	f9 01       	movw	r30, r18
 3b0:	60 81       	ld	r22, Z
 3b2:	29 81       	ldd	r18, Y+1	; 0x01
 3b4:	28 51       	subi	r18, 0x18	; 24
 3b6:	42 2f       	mov	r20, r18
 3b8:	50 e0       	ldi	r21, 0x00	; 0
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_SetPinDirection+0x198>
 3c0:	22 0f       	add	r18, r18
 3c2:	33 1f       	adc	r19, r19
 3c4:	4a 95       	dec	r20
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_SetPinDirection+0x194>
 3c8:	26 2b       	or	r18, r22
 3ca:	fc 01       	movw	r30, r24
 3cc:	20 83       	st	Z, r18
	else{
		
	}
	
	
}
 3ce:	00 c0       	rjmp	.+0      	; 0x3d0 <DIO_SetPinDirection+0x1a4>
 3d0:	00 00       	nop
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <main>:
#define BTN1   10



int main(void)
{
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	1f 92       	push	r1
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
	uint8 STATE = GO ;
 3e6:	19 82       	std	Y+1, r1	; 0x01
    Set_Bit(MCUCSR,ISC2); 
 3e8:	84 e5       	ldi	r24, 0x54	; 84
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	24 e5       	ldi	r18, 0x54	; 84
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	f9 01       	movw	r30, r18
 3f2:	20 81       	ld	r18, Z
 3f4:	20 64       	ori	r18, 0x40	; 64
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18
    Set_Bit(GICR,INT2);
 3fa:	8b e5       	ldi	r24, 0x5B	; 91
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	2b e5       	ldi	r18, 0x5B	; 91
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	f9 01       	movw	r30, r18
 404:	20 81       	ld	r18, Z
 406:	20 62       	ori	r18, 0x20	; 32
 408:	fc 01       	movw	r30, r24
 40a:	20 83       	st	Z, r18
	timer0_init_CTC_mode();
 40c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <timer0_init_CTC_mode>
    
    DIO_SetPinDirection(LED1,HIGH); /*Set DDRB5 (LED1) Output*/
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	8d e0       	ldi	r24, 0x0D	; 13
 414:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_SetPinDirection>
    DIO_SetPinDirection(LED2,HIGH); /*Set DDRB6 (LED2) Output*/
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	8e e0       	ldi	r24, 0x0E	; 14
 41c:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_SetPinDirection>
    DIO_SetPinDirection(LED3,HIGH); /*Set DDRB7 (LED3) Output*/
 420:	61 e0       	ldi	r22, 0x01	; 1
 422:	8f e0       	ldi	r24, 0x0F	; 15
 424:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_SetPinDirection>
    DIO_SetPinDirection(BTN1,LOW); /*Set DDRB2 (BTN1) Input*/
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	8a e0       	ldi	r24, 0x0A	; 10
 42c:	0e 94 16 01 	call	0x22c	; 0x22c <DIO_SetPinDirection>

    DIO_WritePin(LED1,LOW); /*Led is off*/
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	8d e0       	ldi	r24, 0x0D	; 13
 434:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
    DIO_WritePin(LED2,LOW); /*Led is off*/
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	8e e0       	ldi	r24, 0x0E	; 14
 43c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
    DIO_WritePin(LED3,LOW); /*Led is off*/
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	8f e0       	ldi	r24, 0x0F	; 15
 444:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
    while (1) 
    {   
	switch (STATE)
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	88 2f       	mov	r24, r24
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	91 05       	cpc	r25, r1
 452:	09 f4       	brne	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	55 c0       	rjmp	.+170    	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
 456:	82 30       	cpi	r24, 0x02	; 2
 458:	91 05       	cpc	r25, r1
 45a:	59 f1       	breq	.+86     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 45c:	89 2b       	or	r24, r25
 45e:	09 f0       	breq	.+2      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 460:	75 c0       	rjmp	.+234    	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
	{
		case GO :
		DIO_WritePin(LED1,high); /*GO State*/
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	8d e0       	ldi	r24, 0x0D	; 13
 466:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(LED2,low);
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	8e e0       	ldi	r24, 0x0E	; 14
 46e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(LED3,low);
 472:	60 e0       	ldi	r22, 0x00	; 0
 474:	8f e0       	ldi	r24, 0x0F	; 15
 476:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>

	    if(external_flag==NUMBER_ONE)
 47a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <external_flag>
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	49 f4       	brne	.+18     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
	       {
		     STATE = STOP ;
 482:	82 e0       	ldi	r24, 0x02	; 2
 484:	89 83       	std	Y+1, r24	; 0x01
		     external_flag=NUMBER_ZERO;
 486:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <external_flag>
		     g_tick = NUMBER_ZERO ;
 48a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 48e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		     break ;
 492:	63 c0       	rjmp	.+198    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
         	}
		else if(g_tick >= NUMBER_OF_OVERFLOWS_PER_ONE_SECOND)/*check if external interrupt 2 accrue go to stop state */
 494:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 498:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 49c:	88 3e       	cpi	r24, 0xE8	; 232
 49e:	93 40       	sbci	r25, 0x03	; 3
 4a0:	08 f4       	brcc	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a2:	56 c0       	rjmp	.+172    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
		    {
			g_tick = NUMBER_ZERO ;
 4a4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 4a8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			STATE = STOP ;
 4ac:	82 e0       	ldi	r24, 0x02	; 2
 4ae:	89 83       	std	Y+1, r24	; 0x01
		    }
		   break;
 4b0:	4f c0       	rjmp	.+158    	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
		
		case STOP :
		DIO_WritePin(LED1,low); /*Stop State*/
 4b2:	60 e0       	ldi	r22, 0x00	; 0
 4b4:	8d e0       	ldi	r24, 0x0D	; 13
 4b6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(LED2,low);
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	8e e0       	ldi	r24, 0x0E	; 14
 4be:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(LED3,high);
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	8f e0       	ldi	r24, 0x0F	; 15
 4c6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		
	    if(external_flag==NUMBER_ONE)/*check if external interrupt 2 accrue go to stop state */
 4ca:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <external_flag>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	49 f4       	brne	.+18     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
    	{
	     	STATE = STOP ;
 4d2:	82 e0       	ldi	r24, 0x02	; 2
 4d4:	89 83       	std	Y+1, r24	; 0x01
	    	external_flag=NUMBER_ZERO;
 4d6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <external_flag>
	     	g_tick = NUMBER_ZERO ;
 4da:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 4de:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	    	break ;
 4e2:	3b c0       	rjmp	.+118    	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     	}
		else if(g_tick >= NUMBER_OF_OVERFLOWS_PER_ONE_SECOND)
 4e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 4e8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 4ec:	88 3e       	cpi	r24, 0xE8	; 232
 4ee:	93 40       	sbci	r25, 0x03	; 3
 4f0:	88 f1       	brcs	.+98     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		{
			g_tick = NUMBER_ZERO ;
 4f2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 4f6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			STATE = READY ;
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
 4fe:	2a c0       	rjmp	.+84     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
		
		case READY :     /*READY State*/
		DIO_WritePin(LED1,low);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	8d e0       	ldi	r24, 0x0D	; 13
 504:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(LED2,high);
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	8e e0       	ldi	r24, 0x0E	; 14
 50c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		DIO_WritePin(LED3,low);
 510:	60 e0       	ldi	r22, 0x00	; 0
 512:	8f e0       	ldi	r24, 0x0F	; 15
 514:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
		if(external_flag==NUMBER_ONE)/*check if external interrupt 2 accrue go to stop state */
 518:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <external_flag>
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	49 f4       	brne	.+18     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
		{
			STATE = STOP ;
 520:	82 e0       	ldi	r24, 0x02	; 2
 522:	89 83       	std	Y+1, r24	; 0x01
			external_flag=NUMBER_ZERO;
 524:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <external_flag>
			g_tick = NUMBER_ZERO ;
 528:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 52c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			break ;
 530:	14 c0       	rjmp	.+40     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
		}
		else if(g_tick >= NUMBER_OF_OVERFLOWS_PER_ONE_SECOND)
 532:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 536:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 53a:	88 3e       	cpi	r24, 0xE8	; 232
 53c:	93 40       	sbci	r25, 0x03	; 3
 53e:	60 f0       	brcs	.+24     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
		{
			g_tick = NUMBER_ZERO ;
 540:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
 544:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
			STATE = GO ;
 548:	19 82       	std	Y+1, r1	; 0x01
		}
		break;
 54a:	06 c0       	rjmp	.+12     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
		default :
		STATE = GO ;
 54c:	19 82       	std	Y+1, r1	; 0x01
		break;
 54e:	05 c0       	rjmp	.+10     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
		else if(g_tick >= NUMBER_OF_OVERFLOWS_PER_ONE_SECOND)/*check if external interrupt 2 accrue go to stop state */
		    {
			g_tick = NUMBER_ZERO ;
			STATE = STOP ;
		    }
		   break;
 550:	00 00       	nop
 552:	7a cf       	rjmp	.-268    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		else if(g_tick >= NUMBER_OF_OVERFLOWS_PER_ONE_SECOND)
		{
			g_tick = NUMBER_ZERO ;
			STATE = READY ;
		}
		break;
 554:	00 00       	nop
 556:	78 cf       	rjmp	.-272    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
		else if(g_tick >= NUMBER_OF_OVERFLOWS_PER_ONE_SECOND)
		{
			g_tick = NUMBER_ZERO ;
			STATE = GO ;
		}
		break;
 558:	00 00       	nop
		default :
		STATE = GO ;
		break;
	}
}
 55a:	76 cf       	rjmp	.-276    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>

0000055c <__vector_10>:
volatile uint8 external_flag =NUMBER_ZERO ; /* FLAG FOR EXTERNAL INTEERUPT 2 */


/* Interrupt Service Routine for timer0 compare mode */
ISR(TIMER0_COMP_vect)
{
 55c:	1f 92       	push	r1
 55e:	0f 92       	push	r0
 560:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 564:	0f 92       	push	r0
 566:	11 24       	eor	r1, r1
 568:	8f 93       	push	r24
 56a:	9f 93       	push	r25
 56c:	cf 93       	push	r28
 56e:	df 93       	push	r29
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
		g_tick++;
 574:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 578:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 582:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
}
 586:	00 00       	nop
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	9f 91       	pop	r25
 58e:	8f 91       	pop	r24
 590:	0f 90       	pop	r0
 592:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 596:	0f 90       	pop	r0
 598:	1f 90       	pop	r1
 59a:	18 95       	reti

0000059c <__vector_3>:
/* Interrupt Service Routine EXTERNAL INTERRUPT mode */

ISR(INT2_vect)
{
 59c:	1f 92       	push	r1
 59e:	0f 92       	push	r0
 5a0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5a4:	0f 92       	push	r0
 5a6:	11 24       	eor	r1, r1
 5a8:	8f 93       	push	r24
 5aa:	cf 93       	push	r28
 5ac:	df 93       	push	r29
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
	external_flag = NUMBER_ONE ;
 5b2:	81 e0       	ldi	r24, 0x01	; 1
 5b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <external_flag>
}
 5b8:	00 00       	nop
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	8f 91       	pop	r24
 5c0:	0f 90       	pop	r0
 5c2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <timer0_init_CTC_mode>:
/* O/p : N/A */
/* Return : void */
/* Function that initialize timer zero */

void timer0_init_CTC_mode(void)
{
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
	TCNT0=NUMBER_ZERO;/*timer register zero TCNT0 start from zero */
 5d4:	82 e5       	ldi	r24, 0x52	; 82
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	fc 01       	movw	r30, r24
 5da:	10 82       	st	Z, r1
	OCR0=OCR0_VALUE_REGISTER;/*compare register value */
 5dc:	8c e5       	ldi	r24, 0x5C	; 92
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	2c e7       	ldi	r18, 0x7C	; 124
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 83       	st	Z, r18
	TIMSK|=(NUMBER_ONE<<OCIE0);
 5e6:	89 e5       	ldi	r24, 0x59	; 89
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	29 e5       	ldi	r18, 0x59	; 89
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	f9 01       	movw	r30, r18
 5f0:	20 81       	ld	r18, Z
 5f2:	22 60       	ori	r18, 0x02	; 2
 5f4:	fc 01       	movw	r30, r24
 5f6:	20 83       	st	Z, r18
	TCCR0|= (NUMBER_ONE<<WGM01) | (NUMBER_ONE<<CS01) | (NUMBER_ONE<<CS00);
 5f8:	83 e5       	ldi	r24, 0x53	; 83
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	23 e5       	ldi	r18, 0x53	; 83
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	f9 01       	movw	r30, r18
 602:	20 81       	ld	r18, Z
 604:	2b 60       	ori	r18, 0x0B	; 11
 606:	fc 01       	movw	r30, r24
 608:	20 83       	st	Z, r18
    Set_Bit(SREG,IBIT);
 60a:	8f e5       	ldi	r24, 0x5F	; 95
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	2f e5       	ldi	r18, 0x5F	; 95
 610:	30 e0       	ldi	r19, 0x00	; 0
 612:	f9 01       	movw	r30, r18
 614:	20 81       	ld	r18, Z
 616:	20 68       	ori	r18, 0x80	; 128
 618:	fc 01       	movw	r30, r24
 61a:	20 83       	st	Z, r18
}
 61c:	00 00       	nop
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
